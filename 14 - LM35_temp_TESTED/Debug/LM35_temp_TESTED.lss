
LM35_temp_TESTED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003336  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00003336  000033aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000020d0  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cae  00000000  00000000  00005590  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  0000623e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000063de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000065d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000089db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000af38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <main>
      7a:	0c 94 99 19 	jmp	0x3332	; 0x3332 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e6       	ldi	r22, 0x6C	; 108
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 45 19 	jmp	0x328a	; 0x328a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ec 58       	subi	r30, 0x8C	; 140
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:

/* Description :
 * initiate the ADC module
 */
void ADC_init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	/*channel is channel(0) Vref=AVCC*/
	ADMUX=(1<<REFS0);
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 e4       	ldi	r24, 0x40	; 64
     e2c:	80 83       	st	Z, r24

	/*Enable ADC , ADC interrupt is disabled*/
	ADCSRA=(1<<ADEN);
     e2e:	e6 e2       	ldi	r30, 0x26	; 38
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	80 83       	st	Z, r24

	/* Prescaler=128 so F(ADC)=125KHz*/
	ADCSRA|=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	87 60       	ori	r24, 0x07	; 7
     e42:	8c 93       	st	X, r24

}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <ADC_readChannel>:

/* Description :
 * read the value at the channel ( The produced value of conversation )
 */
uint16 ADC_readChannel(uint8 channel_number)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	89 83       	std	Y+1, r24	; 0x01
	/*insert channel_number to ADMUX*/
	ADMUX|=channel_number;
     e56:	a7 e2       	ldi	r26, 0x27	; 39
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e7 e2       	ldi	r30, 0x27	; 39
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	90 81       	ld	r25, Z
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	89 2b       	or	r24, r25
     e64:	8c 93       	st	X, r24

	/*start conversation*/
	ADCSRA|=(1<<ADSC);
     e66:	a6 e2       	ldi	r26, 0x26	; 38
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e6 e2       	ldi	r30, 0x26	; 38
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	80 64       	ori	r24, 0x40	; 64
     e72:	8c 93       	st	X, r24

	/* polling : Looping till flag=1*/
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     e74:	e6 e2       	ldi	r30, 0x26	; 38
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	80 71       	andi	r24, 0x10	; 16
     e80:	90 70       	andi	r25, 0x00	; 0
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	b9 f3       	breq	.-18     	; 0xe74 <ADC_readChannel+0x2a>

	/*Clear the flag*/
	SET_BIT(ADCSRA,ADIF);
     e86:	a6 e2       	ldi	r26, 0x26	; 38
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e6 e2       	ldi	r30, 0x26	; 38
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 61       	ori	r24, 0x10	; 16
     e92:	8c 93       	st	X, r24

	/*return data*/
	return ADC;
     e94:	e4 e2       	ldi	r30, 0x24	; 36
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
}
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	27 97       	sbiw	r28, 0x07	; 7
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	6a 83       	std	Y+2, r22	; 0x02
     ebc:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	88 30       	cpi	r24, 0x08	; 8
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <GPIO_setupPinDirection+0x22>
     ec4:	d2 c0       	rjmp	.+420    	; 0x106a <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	09 f0       	breq	.+2      	; 0xece <GPIO_setupPinDirection+0x2a>
     ecc:	63 c0       	rjmp	.+198    	; 0xf94 <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3f 83       	std	Y+7, r19	; 0x07
     ed6:	2e 83       	std	Y+6, r18	; 0x06
     ed8:	8e 81       	ldd	r24, Y+6	; 0x06
     eda:	9f 81       	ldd	r25, Y+7	; 0x07
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	e9 f0       	breq	.+58     	; 0xf1c <GPIO_setupPinDirection+0x78>
     ee2:	2e 81       	ldd	r18, Y+6	; 0x06
     ee4:	3f 81       	ldd	r19, Y+7	; 0x07
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	61 f1       	breq	.+88     	; 0xf44 <GPIO_setupPinDirection+0xa0>
     eec:	8e 81       	ldd	r24, Y+6	; 0x06
     eee:	9f 81       	ldd	r25, Y+7	; 0x07
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	e1 f5       	brne	.+120    	; 0xf6c <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
     ef4:	aa e3       	ldi	r26, 0x3A	; 58
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	ea e3       	ldi	r30, 0x3A	; 58
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	48 2f       	mov	r20, r24
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <GPIO_setupPinDirection+0x6e>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <GPIO_setupPinDirection+0x6a>
     f16:	84 2b       	or	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	a7 c0       	rjmp	.+334    	; 0x106a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
     f1c:	a7 e3       	ldi	r26, 0x37	; 55
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e3       	ldi	r30, 0x37	; 55
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <GPIO_setupPinDirection+0x96>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <GPIO_setupPinDirection+0x92>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	93 c0       	rjmp	.+294    	; 0x106a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
     f44:	a4 e3       	ldi	r26, 0x34	; 52
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e4 e3       	ldi	r30, 0x34	; 52
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <GPIO_setupPinDirection+0xbe>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <GPIO_setupPinDirection+0xba>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	7f c0       	rjmp	.+254    	; 0x106a <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
     f6c:	a1 e3       	ldi	r26, 0x31	; 49
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e1 e3       	ldi	r30, 0x31	; 49
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_setupPinDirection+0xe6>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_setupPinDirection+0xe2>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	6b c0       	rjmp	.+214    	; 0x106a <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 23       	and	r24, r24
     f98:	09 f0       	breq	.+2      	; 0xf9c <GPIO_setupPinDirection+0xf8>
     f9a:	67 c0       	rjmp	.+206    	; 0x106a <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 83       	std	Y+5, r19	; 0x05
     fa4:	2c 83       	std	Y+4, r18	; 0x04
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	f9 f0       	breq	.+62     	; 0xfee <GPIO_setupPinDirection+0x14a>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	79 f1       	breq	.+94     	; 0x1018 <GPIO_setupPinDirection+0x174>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <GPIO_setupPinDirection+0x120>
     fc2:	3f c0       	rjmp	.+126    	; 0x1042 <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
     fc4:	aa e3       	ldi	r26, 0x3A	; 58
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ea e3       	ldi	r30, 0x3A	; 58
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_setupPinDirection+0x13e>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_setupPinDirection+0x13a>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	3e c0       	rjmp	.+124    	; 0x106a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
     fee:	a7 e3       	ldi	r26, 0x37	; 55
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e3       	ldi	r30, 0x37	; 55
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <GPIO_setupPinDirection+0x168>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <GPIO_setupPinDirection+0x164>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	29 c0       	rjmp	.+82     	; 0x106a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
    1018:	a4 e3       	ldi	r26, 0x34	; 52
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e4 e3       	ldi	r30, 0x34	; 52
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <GPIO_setupPinDirection+0x192>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <GPIO_setupPinDirection+0x18e>
    103a:	80 95       	com	r24
    103c:	84 23       	and	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	14 c0       	rjmp	.+40     	; 0x106a <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
    1042:	a1 e3       	ldi	r26, 0x31	; 49
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e1 e3       	ldi	r30, 0x31	; 49
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <GPIO_setupPinDirection+0x1bc>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <GPIO_setupPinDirection+0x1b8>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    106a:	27 96       	adiw	r28, 0x07	; 7
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	f8 94       	cli
    1070:	de bf       	out	0x3e, r29	; 62
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	cd bf       	out	0x3d, r28	; 61
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <GPIO_setupPortDirection+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <GPIO_setupPortDirection+0x8>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	30 f5       	brcc	.+76     	; 0x10de <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3c 83       	std	Y+4, r19	; 0x04
    109a:	2b 83       	std	Y+3, r18	; 0x03
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	91 05       	cpc	r25, r1
    10a4:	71 f0       	breq	.+28     	; 0x10c2 <GPIO_setupPortDirection+0x46>
    10a6:	2b 81       	ldd	r18, Y+3	; 0x03
    10a8:	3c 81       	ldd	r19, Y+4	; 0x04
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f0       	breq	.+28     	; 0x10cc <GPIO_setupPortDirection+0x50>
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	79 f4       	brne	.+30     	; 0x10d6 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	80 83       	st	Z, r24
    10c0:	0e c0       	rjmp	.+28     	; 0x10de <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
    10c2:	e7 e3       	ldi	r30, 0x37	; 55
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	80 83       	st	Z, r24
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
    10cc:	e4 e3       	ldi	r30, 0x34	; 52
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	80 83       	st	Z, r24
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
    10d6:	e1 e3       	ldi	r30, 0x31	; 49
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	80 83       	st	Z, r24
			break;
		}
	}
}
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	27 97       	sbiw	r28, 0x07	; 7
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	6a 83       	std	Y+2, r22	; 0x02
    1104:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 30       	cpi	r24, 0x08	; 8
    110a:	08 f0       	brcs	.+2      	; 0x110e <GPIO_writePin+0x22>
    110c:	d9 c0       	rjmp	.+434    	; 0x12c0 <GPIO_writePin+0x1d4>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	21 f0       	breq	.+8      	; 0x111c <GPIO_writePin+0x30>
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 23       	and	r24, r24
    1118:	09 f0       	breq	.+2      	; 0x111c <GPIO_writePin+0x30>
    111a:	d2 c0       	rjmp	.+420    	; 0x12c0 <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	09 f0       	breq	.+2      	; 0x1124 <GPIO_writePin+0x38>
    1122:	63 c0       	rjmp	.+198    	; 0x11ea <GPIO_writePin+0xfe>
		{
			switch(port_num)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3f 83       	std	Y+7, r19	; 0x07
    112c:	2e 83       	std	Y+6, r18	; 0x06
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	e9 f0       	breq	.+58     	; 0x1172 <GPIO_writePin+0x86>
    1138:	2e 81       	ldd	r18, Y+6	; 0x06
    113a:	3f 81       	ldd	r19, Y+7	; 0x07
    113c:	22 30       	cpi	r18, 0x02	; 2
    113e:	31 05       	cpc	r19, r1
    1140:	61 f1       	breq	.+88     	; 0x119a <GPIO_writePin+0xae>
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	9f 81       	ldd	r25, Y+7	; 0x07
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	e1 f5       	brne	.+120    	; 0x11c2 <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
    114a:	ab e3       	ldi	r26, 0x3B	; 59
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	eb e3       	ldi	r30, 0x3B	; 59
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_writePin+0x7c>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_writePin+0x78>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	a7 c0       	rjmp	.+334    	; 0x12c0 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
    1172:	a8 e3       	ldi	r26, 0x38	; 56
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e3       	ldi	r30, 0x38	; 56
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_writePin+0xa4>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_writePin+0xa0>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	93 c0       	rjmp	.+294    	; 0x12c0 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
    119a:	a5 e3       	ldi	r26, 0x35	; 53
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_writePin+0xcc>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_writePin+0xc8>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	7f c0       	rjmp	.+254    	; 0x12c0 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
    11c2:	a2 e3       	ldi	r26, 0x32	; 50
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e2 e3       	ldi	r30, 0x32	; 50
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIO_writePin+0xf4>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIO_writePin+0xf0>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	6b c0       	rjmp	.+214    	; 0x12c0 <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 23       	and	r24, r24
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <GPIO_writePin+0x106>
    11f0:	67 c0       	rjmp	.+206    	; 0x12c0 <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3d 83       	std	Y+5, r19	; 0x05
    11fa:	2c 83       	std	Y+4, r18	; 0x04
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	91 05       	cpc	r25, r1
    1204:	f9 f0       	breq	.+62     	; 0x1244 <GPIO_writePin+0x158>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	79 f1       	breq	.+94     	; 0x126e <GPIO_writePin+0x182>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	09 f0       	breq	.+2      	; 0x121a <GPIO_writePin+0x12e>
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    121a:	ab e3       	ldi	r26, 0x3B	; 59
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	eb e3       	ldi	r30, 0x3B	; 59
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_writePin+0x14c>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_writePin+0x148>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	3e c0       	rjmp	.+124    	; 0x12c0 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    1244:	a8 e3       	ldi	r26, 0x38	; 56
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e8 e3       	ldi	r30, 0x38	; 56
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 2e       	mov	r0, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <GPIO_writePin+0x176>
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	0a 94       	dec	r0
    1264:	e2 f7       	brpl	.-8      	; 0x125e <GPIO_writePin+0x172>
    1266:	80 95       	com	r24
    1268:	84 23       	and	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	29 c0       	rjmp	.+82     	; 0x12c0 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    126e:	a5 e3       	ldi	r26, 0x35	; 53
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	48 2f       	mov	r20, r24
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 2e       	mov	r0, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <GPIO_writePin+0x1a0>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <GPIO_writePin+0x19c>
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8c 93       	st	X, r24
    1296:	14 c0       	rjmp	.+40     	; 0x12c0 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    1298:	a2 e3       	ldi	r26, 0x32	; 50
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e2 e3       	ldi	r30, 0x32	; 50
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <GPIO_writePin+0x1ca>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <GPIO_writePin+0x1c6>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    12c0:	27 96       	adiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,GPIO_PinDirectionType direction)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <GPIO_writePort+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <GPIO_writePort+0x8>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	30 f5       	brcc	.+76     	; 0x1334 <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3c 83       	std	Y+4, r19	; 0x04
    12f0:	2b 83       	std	Y+3, r18	; 0x03
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	91 05       	cpc	r25, r1
    12fa:	71 f0       	breq	.+28     	; 0x1318 <GPIO_writePort+0x46>
    12fc:	2b 81       	ldd	r18, Y+3	; 0x03
    12fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	71 f0       	breq	.+28     	; 0x1322 <GPIO_writePort+0x50>
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	79 f4       	brne	.+30     	; 0x132c <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    130e:	eb e3       	ldi	r30, 0x3B	; 59
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	0e c0       	rjmp	.+28     	; 0x1334 <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    1318:	e8 e3       	ldi	r30, 0x38	; 56
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
    1320:	09 c0       	rjmp	.+18     	; 0x1334 <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    1322:	e5 e3       	ldi	r30, 0x35	; 53
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	80 83       	st	Z, r24
    132a:	04 c0       	rjmp	.+8      	; 0x1334 <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    132c:	e2 e3       	ldi	r30, 0x32	; 50
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 83       	st	Z, r24
			break;
		}
	}
}
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <GPIO_readPin+0x6>
    1348:	00 d0       	rcall	.+0      	; 0x134a <GPIO_readPin+0x8>
    134a:	0f 92       	push	r0
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	88 30       	cpi	r24, 0x08	; 8
    1358:	10 f0       	brcs	.+4      	; 0x135e <GPIO_readPin+0x1c>
	{
		return 0;
    135a:	1d 82       	std	Y+5, r1	; 0x05
    135c:	5f c0       	rjmp	.+190    	; 0x141c <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	3c 83       	std	Y+4, r19	; 0x04
    1366:	2b 83       	std	Y+3, r18	; 0x03
    1368:	4b 81       	ldd	r20, Y+3	; 0x03
    136a:	5c 81       	ldd	r21, Y+4	; 0x04
    136c:	41 30       	cpi	r20, 0x01	; 1
    136e:	51 05       	cpc	r21, r1
    1370:	e9 f0       	breq	.+58     	; 0x13ac <GPIO_readPin+0x6a>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	91 05       	cpc	r25, r1
    137a:	59 f1       	breq	.+86     	; 0x13d2 <GPIO_readPin+0x90>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	21 15       	cp	r18, r1
    1382:	31 05       	cpc	r19, r1
    1384:	c9 f5       	brne	.+114    	; 0x13f8 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    1386:	e9 e3       	ldi	r30, 0x39	; 57
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <GPIO_readPin+0x5c>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <GPIO_readPin+0x58>
    13a2:	ca 01       	movw	r24, r20
    13a4:	58 2f       	mov	r21, r24
    13a6:	51 70       	andi	r21, 0x01	; 1
    13a8:	5d 83       	std	Y+5, r21	; 0x05
    13aa:	38 c0       	rjmp	.+112    	; 0x141c <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    13ac:	e6 e3       	ldi	r30, 0x36	; 54
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <GPIO_readPin+0x82>
    13c0:	55 95       	asr	r21
    13c2:	47 95       	ror	r20
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <GPIO_readPin+0x7e>
    13c8:	ca 01       	movw	r24, r20
    13ca:	58 2f       	mov	r21, r24
    13cc:	51 70       	andi	r21, 0x01	; 1
    13ce:	5d 83       	std	Y+5, r21	; 0x05
    13d0:	25 c0       	rjmp	.+74     	; 0x141c <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    13d2:	e3 e3       	ldi	r30, 0x33	; 51
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <GPIO_readPin+0xa8>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <GPIO_readPin+0xa4>
    13ee:	ca 01       	movw	r24, r20
    13f0:	58 2f       	mov	r21, r24
    13f2:	51 70       	andi	r21, 0x01	; 1
    13f4:	5d 83       	std	Y+5, r21	; 0x05
    13f6:	12 c0       	rjmp	.+36     	; 0x141c <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    13f8:	e0 e3       	ldi	r30, 0x30	; 48
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <GPIO_readPin+0xce>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <GPIO_readPin+0xca>
    1414:	ca 01       	movw	r24, r20
    1416:	58 2f       	mov	r21, r24
    1418:	51 70       	andi	r21, 0x01	; 1
    141a:	5d 83       	std	Y+5, r21	; 0x05
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GPIO_readPort+0x6>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <GPIO_readPort+0x8>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	10 f0       	brcs	.+4      	; 0x1446 <GPIO_readPort+0x18>
	{
		return 0;
    1442:	1c 82       	std	Y+4, r1	; 0x04
    1444:	26 c0       	rjmp	.+76     	; 0x1492 <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3b 83       	std	Y+3, r19	; 0x03
    144e:	2a 83       	std	Y+2, r18	; 0x02
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	9b 81       	ldd	r25, Y+3	; 0x03
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	91 05       	cpc	r25, r1
    1458:	71 f0       	breq	.+28     	; 0x1476 <GPIO_readPort+0x48>
    145a:	2a 81       	ldd	r18, Y+2	; 0x02
    145c:	3b 81       	ldd	r19, Y+3	; 0x03
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	71 f0       	breq	.+28     	; 0x1480 <GPIO_readPort+0x52>
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	9b 81       	ldd	r25, Y+3	; 0x03
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	79 f4       	brne	.+30     	; 0x148a <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    146c:	e9 e3       	ldi	r30, 0x39	; 57
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	90 81       	ld	r25, Z
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	0e c0       	rjmp	.+28     	; 0x1492 <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    1476:	e6 e3       	ldi	r30, 0x36	; 54
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	20 81       	ld	r18, Z
    147c:	2c 83       	std	Y+4, r18	; 0x04
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    1480:	e3 e3       	ldi	r30, 0x33	; 51
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	30 81       	ld	r19, Z
    1486:	3c 83       	std	Y+4, r19	; 0x04
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <GPIO_readPort+0x64>
		default:
			return PINC;
    148a:	e3 e3       	ldi	r30, 0x33	; 51
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8c 83       	std	Y+4, r24	; 0x04
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	6c 97       	sbiw	r28, 0x1c	; 28
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 52 07 	call	0xea4	; 0xea4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	41 e0       	ldi	r20, 0x01	; 1
    14c6:	0e 94 52 07 	call	0xea4	; 0xea4 <GPIO_setupPinDirection>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 ea       	ldi	r26, 0xA0	; 160
    14d0:	b1 e4       	ldi	r27, 0x41	; 65
    14d2:	89 8f       	std	Y+25, r24	; 0x19
    14d4:	9a 8f       	std	Y+26, r25	; 0x1a
    14d6:	ab 8f       	std	Y+27, r26	; 0x1b
    14d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	69 8d       	ldd	r22, Y+25	; 0x19
    14dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a e7       	ldi	r20, 0x7A	; 122
    14e8:	55 e4       	ldi	r21, 0x45	; 69
    14ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8d 8b       	std	Y+21, r24	; 0x15
    14f4:	9e 8b       	std	Y+22, r25	; 0x16
    14f6:	af 8b       	std	Y+23, r26	; 0x17
    14f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fa:	6d 89       	ldd	r22, Y+21	; 0x15
    14fc:	7e 89       	ldd	r23, Y+22	; 0x16
    14fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1500:	98 8d       	ldd	r25, Y+24	; 0x18
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <LCD_init+0x7a>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9c 8b       	std	Y+20, r25	; 0x14
    1518:	8b 8b       	std	Y+19, r24	; 0x13
    151a:	3f c0       	rjmp	.+126    	; 0x159a <LCD_init+0xf8>
	else if (__tmp > 65535)
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	69 8d       	ldd	r22, Y+25	; 0x19
    1536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9c 8b       	std	Y+20, r25	; 0x14
    155a:	8b 8b       	std	Y+19, r24	; 0x13
    155c:	0f c0       	rjmp	.+30     	; 0x157c <LCD_init+0xda>
    155e:	80 e9       	ldi	r24, 0x90	; 144
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	9a 8b       	std	Y+18, r25	; 0x12
    1564:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1566:	89 89       	ldd	r24, Y+17	; 0x11
    1568:	9a 89       	ldd	r25, Y+18	; 0x12
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <LCD_init+0xc8>
    156e:	9a 8b       	std	Y+18, r25	; 0x12
    1570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9c 8b       	std	Y+20, r25	; 0x14
    157a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8b 89       	ldd	r24, Y+19	; 0x13
    157e:	9c 89       	ldd	r25, Y+20	; 0x14
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <LCD_init+0xbc>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	7e 89       	ldd	r23, Y+22	; 0x16
    158a:	8f 89       	ldd	r24, Y+23	; 0x17
    158c:	98 8d       	ldd	r25, Y+24	; 0x18
    158e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	8b 89       	ldd	r24, Y+19	; 0x13
    159c:	9c 89       	ldd	r25, Y+20	; 0x14
    159e:	98 8b       	std	Y+16, r25	; 0x10
    15a0:	8f 87       	std	Y+15, r24	; 0x0f
    15a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a4:	98 89       	ldd	r25, Y+16	; 0x10
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <LCD_init+0x104>
    15aa:	98 8b       	std	Y+16, r25	; 0x10
    15ac:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_BIT_MODE == 4)

	/* 2 - Configure the data pins as output port */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,PIN_OUTPUT);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	63 e0       	ldi	r22, 0x03	; 3
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	0e 94 52 07 	call	0xea4	; 0xea4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,PIN_OUTPUT);
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	64 e0       	ldi	r22, 0x04	; 4
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	0e 94 52 07 	call	0xea4	; 0xea4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,PIN_OUTPUT);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	65 e0       	ldi	r22, 0x05	; 5
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 52 07 	call	0xea4	; 0xea4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,PIN_OUTPUT);
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	66 e0       	ldi	r22, 0x06	; 6
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	0e 94 52 07 	call	0xea4	; 0xea4 <GPIO_setupPinDirection>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 ea       	ldi	r26, 0xA0	; 160
    15dc:	b1 e4       	ldi	r27, 0x41	; 65
    15de:	8b 87       	std	Y+11, r24	; 0x0b
    15e0:	9c 87       	std	Y+12, r25	; 0x0c
    15e2:	ad 87       	std	Y+13, r26	; 0x0d
    15e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a e7       	ldi	r20, 0x7A	; 122
    15f4:	55 e4       	ldi	r21, 0x45	; 69
    15f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8f 83       	std	Y+7, r24	; 0x07
    1600:	98 87       	std	Y+8, r25	; 0x08
    1602:	a9 87       	std	Y+9, r26	; 0x09
    1604:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	2c f4       	brge	.+10     	; 0x1628 <LCD_init+0x186>
		__ticks = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <LCD_init+0x204>
	else if (__tmp > 65535)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f5       	brge	.+82     	; 0x1692 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	6b 85       	ldd	r22, Y+11	; 0x0b
    1642:	7c 85       	ldd	r23, Y+12	; 0x0c
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <LCD_init+0x1e6>
    166a:	80 e9       	ldi	r24, 0x90	; 144
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <LCD_init+0x1d4>
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f7       	brne	.-38     	; 0x166a <LCD_init+0x1c8>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <LCD_init+0x210>
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 3.2 - send commands 0x33 0x32 0x28 to init lcd*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    16ba:	83 e3       	ldi	r24, 0x33	; 51
    16bc:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    16c0:	82 e3       	ldi	r24, 0x32	; 50
    16c2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    16c6:	88 e2       	ldi	r24, 0x28	; 40
    16c8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    16cc:	8c e0       	ldi	r24, 0x0C	; 12
    16ce:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    16d8:	6c 96       	adiw	r28, 0x1c	; 28
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	c5 59       	subi	r28, 0x95	; 149
    16f8:	d0 40       	sbci	r29, 0x00	; 0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	fe 01       	movw	r30, r28
    1706:	eb 56       	subi	r30, 0x6B	; 107
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1716:	fe 01       	movw	r30, r28
    1718:	ef 56       	subi	r30, 0x6F	; 111
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e8       	ldi	r26, 0x80	; 128
    1722:	bf e3       	ldi	r27, 0x3F	; 63
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    172c:	8e 01       	movw	r16, r28
    172e:	03 57       	subi	r16, 0x73	; 115
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	fe 01       	movw	r30, r28
    1734:	ef 56       	subi	r30, 0x6F	; 111
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	2b ea       	ldi	r18, 0xAB	; 171
    1742:	3a ea       	ldi	r19, 0xAA	; 170
    1744:	4a ea       	ldi	r20, 0xAA	; 170
    1746:	50 e4       	ldi	r21, 0x40	; 64
    1748:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	f8 01       	movw	r30, r16
    1752:	80 83       	st	Z, r24
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	a2 83       	std	Z+2, r26	; 0x02
    1758:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    175a:	fe 01       	movw	r30, r28
    175c:	e3 57       	subi	r30, 0x73	; 115
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1774:	88 23       	and	r24, r24
    1776:	34 f4       	brge	.+12     	; 0x1784 <LCD_sendCommand+0x9a>
		__ticks = 1;
    1778:	fe 01       	movw	r30, r28
    177a:	e4 57       	subi	r30, 0x74	; 116
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 83       	st	Z, r24
    1782:	e0 c0       	rjmp	.+448    	; 0x1944 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    1784:	fe 01       	movw	r30, r28
    1786:	e3 57       	subi	r30, 0x73	; 115
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4f e7       	ldi	r20, 0x7F	; 127
    1798:	53 e4       	ldi	r21, 0x43	; 67
    179a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    179e:	18 16       	cp	r1, r24
    17a0:	0c f0       	brlt	.+2      	; 0x17a4 <LCD_sendCommand+0xba>
    17a2:	c0 c0       	rjmp	.+384    	; 0x1924 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    17a4:	fe 01       	movw	r30, r28
    17a6:	ef 56       	subi	r30, 0x6F	; 111
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a e7       	ldi	r20, 0x7A	; 122
    17b8:	54 e4       	ldi	r21, 0x44	; 68
    17ba:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	fe 01       	movw	r30, r28
    17c4:	e8 57       	subi	r30, 0x78	; 120
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 83       	st	Z, r24
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	8e 01       	movw	r16, r28
    17d2:	0c 57       	subi	r16, 0x7C	; 124
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	fe 01       	movw	r30, r28
    17d8:	e8 57       	subi	r30, 0x78	; 120
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a e7       	ldi	r20, 0x7A	; 122
    17ea:	55 e4       	ldi	r21, 0x45	; 69
    17ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	80 83       	st	Z, r24
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	a2 83       	std	Z+2, r26	; 0x02
    17fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17fe:	fe 01       	movw	r30, r28
    1800:	ec 57       	subi	r30, 0x7C	; 124
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	44 f4       	brge	.+16     	; 0x182c <LCD_sendCommand+0x142>
		__ticks = 1;
    181c:	fe 01       	movw	r30, r28
    181e:	ee 57       	subi	r30, 0x7E	; 126
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	64 c0       	rjmp	.+200    	; 0x18f4 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    182c:	fe 01       	movw	r30, r28
    182e:	ec 57       	subi	r30, 0x7C	; 124
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	0c f0       	brlt	.+2      	; 0x184c <LCD_sendCommand+0x162>
    184a:	43 c0       	rjmp	.+134    	; 0x18d2 <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184c:	fe 01       	movw	r30, r28
    184e:	e8 57       	subi	r30, 0x78	; 120
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	8e 01       	movw	r16, r28
    186c:	0e 57       	subi	r16, 0x7E	; 126
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	f8 01       	movw	r30, r16
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
    1882:	1f c0       	rjmp	.+62     	; 0x18c2 <LCD_sendCommand+0x1d8>
    1884:	fe 01       	movw	r30, r28
    1886:	e0 58       	subi	r30, 0x80	; 128
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 e9       	ldi	r24, 0x90	; 144
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	fe 01       	movw	r30, r28
    1894:	e0 58       	subi	r30, 0x80	; 128
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_sendCommand+0x1b2>
    18a0:	fe 01       	movw	r30, r28
    18a2:	e0 58       	subi	r30, 0x80	; 128
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	de 01       	movw	r26, r28
    18ac:	ae 57       	subi	r26, 0x7E	; 126
    18ae:	bf 4f       	sbci	r27, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	ee 57       	subi	r30, 0x7E	; 126
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	11 96       	adiw	r26, 0x01	; 1
    18be:	9c 93       	st	X, r25
    18c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c2:	fe 01       	movw	r30, r28
    18c4:	ee 57       	subi	r30, 0x7E	; 126
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	d1 f6       	brne	.-76     	; 0x1884 <LCD_sendCommand+0x19a>
    18d0:	4b c0       	rjmp	.+150    	; 0x1968 <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	8e 01       	movw	r16, r28
    18d4:	0e 57       	subi	r16, 0x7E	; 126
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	fe 01       	movw	r30, r28
    18da:	ec 57       	subi	r30, 0x7C	; 124
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	de 01       	movw	r26, r28
    18f6:	a2 58       	subi	r26, 0x82	; 130
    18f8:	bf 4f       	sbci	r27, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	ee 57       	subi	r30, 0x7E	; 126
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	11 96       	adiw	r26, 0x01	; 1
    1906:	9c 93       	st	X, r25
    1908:	8e 93       	st	-X, r24
    190a:	fe 01       	movw	r30, r28
    190c:	e2 58       	subi	r30, 0x82	; 130
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_sendCommand+0x22a>
    1918:	fe 01       	movw	r30, r28
    191a:	e2 58       	subi	r30, 0x82	; 130
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
    1922:	22 c0       	rjmp	.+68     	; 0x1968 <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1924:	8e 01       	movw	r16, r28
    1926:	04 57       	subi	r16, 0x74	; 116
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	fe 01       	movw	r30, r28
    192c:	e3 57       	subi	r30, 0x73	; 115
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	f8 01       	movw	r30, r16
    1942:	80 83       	st	Z, r24
    1944:	de 01       	movw	r26, r28
    1946:	a3 58       	subi	r26, 0x83	; 131
    1948:	bf 4f       	sbci	r27, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	e4 57       	subi	r30, 0x74	; 116
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1954:	fe 01       	movw	r30, r28
    1956:	e3 58       	subi	r30, 0x83	; 131
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	8a 95       	dec	r24
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_sendCommand+0x272>
    1960:	fe 01       	movw	r30, r28
    1962:	e3 58       	subi	r30, 0x83	; 131
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1972:	fe 01       	movw	r30, r28
    1974:	e7 58       	subi	r30, 0x87	; 135
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e8       	ldi	r26, 0x80	; 128
    197e:	bf e3       	ldi	r27, 0x3F	; 63
    1980:	80 83       	st	Z, r24
    1982:	91 83       	std	Z+1, r25	; 0x01
    1984:	a2 83       	std	Z+2, r26	; 0x02
    1986:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1988:	8e 01       	movw	r16, r28
    198a:	0b 58       	subi	r16, 0x8B	; 139
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	fe 01       	movw	r30, r28
    1990:	e7 58       	subi	r30, 0x87	; 135
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	2b ea       	ldi	r18, 0xAB	; 171
    199e:	3a ea       	ldi	r19, 0xAA	; 170
    19a0:	4a ea       	ldi	r20, 0xAA	; 170
    19a2:	50 e4       	ldi	r21, 0x40	; 64
    19a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	f8 01       	movw	r30, r16
    19ae:	80 83       	st	Z, r24
    19b0:	91 83       	std	Z+1, r25	; 0x01
    19b2:	a2 83       	std	Z+2, r26	; 0x02
    19b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b6:	fe 01       	movw	r30, r28
    19b8:	eb 58       	subi	r30, 0x8B	; 139
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	34 f4       	brge	.+12     	; 0x19e0 <LCD_sendCommand+0x2f6>
		__ticks = 1;
    19d4:	fe 01       	movw	r30, r28
    19d6:	ec 58       	subi	r30, 0x8C	; 140
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 83       	st	Z, r24
    19de:	e0 c0       	rjmp	.+448    	; 0x1ba0 <LCD_sendCommand+0x4b6>
	else if (__tmp > 255)
    19e0:	fe 01       	movw	r30, r28
    19e2:	eb 58       	subi	r30, 0x8B	; 139
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	53 e4       	ldi	r21, 0x43	; 67
    19f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <LCD_sendCommand+0x316>
    19fe:	c0 c0       	rjmp	.+384    	; 0x1b80 <LCD_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 58       	subi	r30, 0x87	; 135
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a e7       	ldi	r20, 0x7A	; 122
    1a14:	54 e4       	ldi	r21, 0x44	; 68
    1a16:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e0 59       	subi	r30, 0x90	; 144
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 83       	st	Z, r24
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	a2 83       	std	Z+2, r26	; 0x02
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	8e 01       	movw	r16, r28
    1a2e:	04 59       	subi	r16, 0x94	; 148
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	fe 01       	movw	r30, r28
    1a34:	e0 59       	subi	r30, 0x90	; 144
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a e7       	ldi	r20, 0x7A	; 122
    1a46:	55 e4       	ldi	r21, 0x45	; 69
    1a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	80 83       	st	Z, r24
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	a2 83       	std	Z+2, r26	; 0x02
    1a58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e4 59       	subi	r30, 0x94	; 148
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	44 f4       	brge	.+16     	; 0x1a88 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1a78:	fe 01       	movw	r30, r28
    1a7a:	e6 59       	subi	r30, 0x96	; 150
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
    1a86:	64 c0       	rjmp	.+200    	; 0x1b50 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e4 59       	subi	r30, 0x94	; 148
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	57 e4       	ldi	r21, 0x47	; 71
    1a9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	0c f0       	brlt	.+2      	; 0x1aa8 <LCD_sendCommand+0x3be>
    1aa6:	43 c0       	rjmp	.+134    	; 0x1b2e <LCD_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e0 59       	subi	r30, 0x90	; 144
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8e 01       	movw	r16, r28
    1ac8:	06 59       	subi	r16, 0x96	; 150
    1aca:	1f 4f       	sbci	r17, 0xFF	; 255
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	f8 01       	movw	r30, r16
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24
    1ade:	1f c0       	rjmp	.+62     	; 0x1b1e <LCD_sendCommand+0x434>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e8 59       	subi	r30, 0x98	; 152
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 e9       	ldi	r24, 0x90	; 144
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aee:	fe 01       	movw	r30, r28
    1af0:	e8 59       	subi	r30, 0x98	; 152
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_sendCommand+0x40e>
    1afc:	fe 01       	movw	r30, r28
    1afe:	e8 59       	subi	r30, 0x98	; 152
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	de 01       	movw	r26, r28
    1b08:	a6 59       	subi	r26, 0x96	; 150
    1b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e6 59       	subi	r30, 0x96	; 150
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	11 96       	adiw	r26, 0x01	; 1
    1b1a:	9c 93       	st	X, r25
    1b1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e6 59       	subi	r30, 0x96	; 150
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	d1 f6       	brne	.-76     	; 0x1ae0 <LCD_sendCommand+0x3f6>
    1b2c:	4b c0       	rjmp	.+150    	; 0x1bc4 <LCD_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	8e 01       	movw	r16, r28
    1b30:	06 59       	subi	r16, 0x96	; 150
    1b32:	1f 4f       	sbci	r17, 0xFF	; 255
    1b34:	fe 01       	movw	r30, r28
    1b36:	e4 59       	subi	r30, 0x94	; 148
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	60 81       	ld	r22, Z
    1b3c:	71 81       	ldd	r23, Z+1	; 0x01
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	de 01       	movw	r26, r28
    1b52:	aa 59       	subi	r26, 0x9A	; 154
    1b54:	bf 4f       	sbci	r27, 0xFF	; 255
    1b56:	fe 01       	movw	r30, r28
    1b58:	e6 59       	subi	r30, 0x96	; 150
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	11 96       	adiw	r26, 0x01	; 1
    1b62:	9c 93       	st	X, r25
    1b64:	8e 93       	st	-X, r24
    1b66:	fe 01       	movw	r30, r28
    1b68:	ea 59       	subi	r30, 0x9A	; 154
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_sendCommand+0x486>
    1b74:	fe 01       	movw	r30, r28
    1b76:	ea 59       	subi	r30, 0x9A	; 154
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	22 c0       	rjmp	.+68     	; 0x1bc4 <LCD_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b80:	8e 01       	movw	r16, r28
    1b82:	0c 58       	subi	r16, 0x8C	; 140
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	eb 58       	subi	r30, 0x8B	; 139
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	80 83       	st	Z, r24
    1ba0:	de 01       	movw	r26, r28
    1ba2:	ab 59       	subi	r26, 0x9B	; 155
    1ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	ec 58       	subi	r30, 0x8C	; 140
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 81       	ld	r24, Z
    1bae:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	eb 59       	subi	r30, 0x9B	; 155
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8a 95       	dec	r24
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_sendCommand+0x4ce>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	eb 59       	subi	r30, 0x9B	; 155
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 83       	st	Z, r24
	_delay_us(1);

	#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,4));
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	eb 56       	subi	r30, 0x6B	; 107
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	82 95       	swap	r24
    1bce:	8f 70       	andi	r24, 0x0F	; 15
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	91 70       	andi	r25, 0x01	; 1
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	63 e0       	ldi	r22, 0x03	; 3
    1bd8:	49 2f       	mov	r20, r25
    1bda:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,5));
    1bde:	fe 01       	movw	r30, r28
    1be0:	eb 56       	subi	r30, 0x6B	; 107
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	82 95       	swap	r24
    1be8:	86 95       	lsr	r24
    1bea:	87 70       	andi	r24, 0x07	; 7
    1bec:	98 2f       	mov	r25, r24
    1bee:	91 70       	andi	r25, 0x01	; 1
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	64 e0       	ldi	r22, 0x04	; 4
    1bf4:	49 2f       	mov	r20, r25
    1bf6:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,6));
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	eb 56       	subi	r30, 0x6B	; 107
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 81       	ld	r24, Z
    1c02:	82 95       	swap	r24
    1c04:	86 95       	lsr	r24
    1c06:	86 95       	lsr	r24
    1c08:	83 70       	andi	r24, 0x03	; 3
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	91 70       	andi	r25, 0x01	; 1
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	65 e0       	ldi	r22, 0x05	; 5
    1c12:	49 2f       	mov	r20, r25
    1c14:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,7));
    1c18:	fe 01       	movw	r30, r28
    1c1a:	eb 56       	subi	r30, 0x6B	; 107
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	98 2f       	mov	r25, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	99 27       	eor	r25, r25
    1c26:	99 1f       	adc	r25, r25
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	66 e0       	ldi	r22, 0x06	; 6
    1c2c:	49 2f       	mov	r20, r25
    1c2e:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1c32:	fe 01       	movw	r30, r28
    1c34:	ef 59       	subi	r30, 0x9F	; 159
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 e8       	ldi	r26, 0x80	; 128
    1c3e:	bf e3       	ldi	r27, 0x3F	; 63
    1c40:	80 83       	st	Z, r24
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	a2 83       	std	Z+2, r26	; 0x02
    1c46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	8e 01       	movw	r16, r28
    1c4a:	03 5a       	subi	r16, 0xA3	; 163
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ef 59       	subi	r30, 0x9F	; 159
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	60 81       	ld	r22, Z
    1c56:	71 81       	ldd	r23, Z+1	; 0x01
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a e7       	ldi	r20, 0x7A	; 122
    1c62:	55 e4       	ldi	r21, 0x45	; 69
    1c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	80 83       	st	Z, r24
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	a2 83       	std	Z+2, r26	; 0x02
    1c74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c76:	fe 01       	movw	r30, r28
    1c78:	e3 5a       	subi	r30, 0xA3	; 163
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	60 81       	ld	r22, Z
    1c7e:	71 81       	ldd	r23, Z+1	; 0x01
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	93 81       	ldd	r25, Z+3	; 0x03
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	44 f4       	brge	.+16     	; 0x1ca4 <LCD_sendCommand+0x5ba>
		__ticks = 1;
    1c94:	fe 01       	movw	r30, r28
    1c96:	e5 5a       	subi	r30, 0xA5	; 165
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
    1ca2:	64 c0       	rjmp	.+200    	; 0x1d6c <LCD_sendCommand+0x682>
	else if (__tmp > 65535)
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e3 5a       	subi	r30, 0xA3	; 163
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	82 81       	ldd	r24, Z+2	; 0x02
    1cb0:	93 81       	ldd	r25, Z+3	; 0x03
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	3f ef       	ldi	r19, 0xFF	; 255
    1cb6:	4f e7       	ldi	r20, 0x7F	; 127
    1cb8:	57 e4       	ldi	r21, 0x47	; 71
    1cba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	0c f0       	brlt	.+2      	; 0x1cc4 <LCD_sendCommand+0x5da>
    1cc2:	43 c0       	rjmp	.+134    	; 0x1d4a <LCD_sendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ef 59       	subi	r30, 0x9F	; 159
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e2       	ldi	r20, 0x20	; 32
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8e 01       	movw	r16, r28
    1ce4:	05 5a       	subi	r16, 0xA5	; 165
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	80 83       	st	Z, r24
    1cfa:	1f c0       	rjmp	.+62     	; 0x1d3a <LCD_sendCommand+0x650>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e7 5a       	subi	r30, 0xA7	; 167
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 e9       	ldi	r24, 0x90	; 144
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e7 5a       	subi	r30, 0xA7	; 167
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_sendCommand+0x62a>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e7 5a       	subi	r30, 0xA7	; 167
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	de 01       	movw	r26, r28
    1d24:	a5 5a       	subi	r26, 0xA5	; 165
    1d26:	bf 4f       	sbci	r27, 0xFF	; 255
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e5 5a       	subi	r30, 0xA5	; 165
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	11 96       	adiw	r26, 0x01	; 1
    1d36:	9c 93       	st	X, r25
    1d38:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e5 5a       	subi	r30, 0xA5	; 165
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	d1 f6       	brne	.-76     	; 0x1cfc <LCD_sendCommand+0x612>
    1d48:	27 c0       	rjmp	.+78     	; 0x1d98 <LCD_sendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	05 5a       	subi	r16, 0xA5	; 165
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	fe 01       	movw	r30, r28
    1d52:	e3 5a       	subi	r30, 0xA3	; 163
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	f8 01       	movw	r30, r16
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	de 01       	movw	r26, r28
    1d6e:	a9 5a       	subi	r26, 0xA9	; 169
    1d70:	bf 4f       	sbci	r27, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
    1d74:	e5 5a       	subi	r30, 0xA5	; 165
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	8d 93       	st	X+, r24
    1d7e:	9c 93       	st	X, r25
    1d80:	fe 01       	movw	r30, r28
    1d82:	e9 5a       	subi	r30, 0xA9	; 169
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_sendCommand+0x6a0>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e9 5a       	subi	r30, 0xA9	; 169
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	62 e0       	ldi	r22, 0x02	; 2
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1da2:	fe 01       	movw	r30, r28
    1da4:	ed 5a       	subi	r30, 0xAD	; 173
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e8       	ldi	r26, 0x80	; 128
    1dae:	bf e3       	ldi	r27, 0x3F	; 63
    1db0:	80 83       	st	Z, r24
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	a2 83       	std	Z+2, r26	; 0x02
    1db6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1db8:	8e 01       	movw	r16, r28
    1dba:	01 5b       	subi	r16, 0xB1	; 177
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	ed 5a       	subi	r30, 0xAD	; 173
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	2b ea       	ldi	r18, 0xAB	; 171
    1dce:	3a ea       	ldi	r19, 0xAA	; 170
    1dd0:	4a ea       	ldi	r20, 0xAA	; 170
    1dd2:	50 e4       	ldi	r21, 0x40	; 64
    1dd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 83       	st	Z, r24
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	a2 83       	std	Z+2, r26	; 0x02
    1de4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de6:	fe 01       	movw	r30, r28
    1de8:	e1 5b       	subi	r30, 0xB1	; 177
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	34 f4       	brge	.+12     	; 0x1e10 <LCD_sendCommand+0x726>
		__ticks = 1;
    1e04:	fe 01       	movw	r30, r28
    1e06:	e2 5b       	subi	r30, 0xB2	; 178
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	80 83       	st	Z, r24
    1e0e:	e0 c0       	rjmp	.+448    	; 0x1fd0 <LCD_sendCommand+0x8e6>
	else if (__tmp > 255)
    1e10:	fe 01       	movw	r30, r28
    1e12:	e1 5b       	subi	r30, 0xB1	; 177
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	53 e4       	ldi	r21, 0x43	; 67
    1e26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	0c f0       	brlt	.+2      	; 0x1e30 <LCD_sendCommand+0x746>
    1e2e:	c0 c0       	rjmp	.+384    	; 0x1fb0 <LCD_sendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    1e30:	fe 01       	movw	r30, r28
    1e32:	ed 5a       	subi	r30, 0xAD	; 173
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a e7       	ldi	r20, 0x7A	; 122
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e6 5b       	subi	r30, 0xB6	; 182
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 83       	st	Z, r24
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	a2 83       	std	Z+2, r26	; 0x02
    1e5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	0a 5b       	subi	r16, 0xBA	; 186
    1e60:	1f 4f       	sbci	r17, 0xFF	; 255
    1e62:	fe 01       	movw	r30, r28
    1e64:	e6 5b       	subi	r30, 0xB6	; 182
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a e7       	ldi	r20, 0x7A	; 122
    1e76:	55 e4       	ldi	r21, 0x45	; 69
    1e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	f8 01       	movw	r30, r16
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	a2 83       	std	Z+2, r26	; 0x02
    1e88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	ea 5b       	subi	r30, 0xBA	; 186
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	44 f4       	brge	.+16     	; 0x1eb8 <LCD_sendCommand+0x7ce>
		__ticks = 1;
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	ec 5b       	subi	r30, 0xBC	; 188
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
    1eb6:	64 c0       	rjmp	.+200    	; 0x1f80 <LCD_sendCommand+0x896>
	else if (__tmp > 65535)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ea 5b       	subi	r30, 0xBA	; 186
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <LCD_sendCommand+0x7ee>
    1ed6:	43 c0       	rjmp	.+134    	; 0x1f5e <LCD_sendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e6 5b       	subi	r30, 0xB6	; 182
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	0c 5b       	subi	r16, 0xBC	; 188
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
    1f0e:	1f c0       	rjmp	.+62     	; 0x1f4e <LCD_sendCommand+0x864>
    1f10:	fe 01       	movw	r30, r28
    1f12:	ee 5b       	subi	r30, 0xBE	; 190
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 e9       	ldi	r24, 0x90	; 144
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ee 5b       	subi	r30, 0xBE	; 190
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <LCD_sendCommand+0x83e>
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ee 5b       	subi	r30, 0xBE	; 190
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	de 01       	movw	r26, r28
    1f38:	ac 5b       	subi	r26, 0xBC	; 188
    1f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ec 5b       	subi	r30, 0xBC	; 188
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4e:	fe 01       	movw	r30, r28
    1f50:	ec 5b       	subi	r30, 0xBC	; 188
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	d1 f6       	brne	.-76     	; 0x1f10 <LCD_sendCommand+0x826>
    1f5c:	42 c0       	rjmp	.+132    	; 0x1fe2 <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	8e 01       	movw	r16, r28
    1f60:	0c 5b       	subi	r16, 0xBC	; 188
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	ea 5b       	subi	r30, 0xBA	; 186
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	f8 01       	movw	r30, r16
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	80 83       	st	Z, r24
    1f80:	de 01       	movw	r26, r28
    1f82:	a0 5c       	subi	r26, 0xC0	; 192
    1f84:	bf 4f       	sbci	r27, 0xFF	; 255
    1f86:	fe 01       	movw	r30, r28
    1f88:	ec 5b       	subi	r30, 0xBC	; 188
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
    1f96:	fe 01       	movw	r30, r28
    1f98:	e0 5c       	subi	r30, 0xC0	; 192
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_sendCommand+0x8b6>
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e0 5c       	subi	r30, 0xC0	; 192
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	19 c0       	rjmp	.+50     	; 0x1fe2 <LCD_sendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	02 5b       	subi	r16, 0xB2	; 178
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e1 5b       	subi	r30, 0xB1	; 177
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	f8 01       	movw	r30, r16
    1fce:	80 83       	st	Z, r24
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e2 5b       	subi	r30, 0xB2	; 178
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fda:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fdc:	8a 95       	dec	r24
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_sendCommand+0x8f2>
    1fe0:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	62 e0       	ldi	r22, 0x02	; 2
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a0 e8       	ldi	r26, 0x80	; 128
    1ff2:	bf e3       	ldi	r27, 0x3F	; 63
    1ff4:	8b af       	std	Y+59, r24	; 0x3b
    1ff6:	9c af       	std	Y+60, r25	; 0x3c
    1ff8:	ad af       	std	Y+61, r26	; 0x3d
    1ffa:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ffc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ffe:	7c ad       	ldd	r23, Y+60	; 0x3c
    2000:	8d ad       	ldd	r24, Y+61	; 0x3d
    2002:	9e ad       	ldd	r25, Y+62	; 0x3e
    2004:	2b ea       	ldi	r18, 0xAB	; 171
    2006:	3a ea       	ldi	r19, 0xAA	; 170
    2008:	4a ea       	ldi	r20, 0xAA	; 170
    200a:	50 e4       	ldi	r21, 0x40	; 64
    200c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8f ab       	std	Y+55, r24	; 0x37
    2016:	98 af       	std	Y+56, r25	; 0x38
    2018:	a9 af       	std	Y+57, r26	; 0x39
    201a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    201c:	6f a9       	ldd	r22, Y+55	; 0x37
    201e:	78 ad       	ldd	r23, Y+56	; 0x38
    2020:	89 ad       	ldd	r24, Y+57	; 0x39
    2022:	9a ad       	ldd	r25, Y+58	; 0x3a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2030:	88 23       	and	r24, r24
    2032:	1c f4       	brge	.+6      	; 0x203a <LCD_sendCommand+0x950>
		__ticks = 1;
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	8e ab       	std	Y+54, r24	; 0x36
    2038:	91 c0       	rjmp	.+290    	; 0x215c <LCD_sendCommand+0xa72>
	else if (__tmp > 255)
    203a:	6f a9       	ldd	r22, Y+55	; 0x37
    203c:	78 ad       	ldd	r23, Y+56	; 0x38
    203e:	89 ad       	ldd	r24, Y+57	; 0x39
    2040:	9a ad       	ldd	r25, Y+58	; 0x3a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	53 e4       	ldi	r21, 0x43	; 67
    204a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	0c f0       	brlt	.+2      	; 0x2054 <LCD_sendCommand+0x96a>
    2052:	7b c0       	rjmp	.+246    	; 0x214a <LCD_sendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    2054:	6b ad       	ldd	r22, Y+59	; 0x3b
    2056:	7c ad       	ldd	r23, Y+60	; 0x3c
    2058:	8d ad       	ldd	r24, Y+61	; 0x3d
    205a:	9e ad       	ldd	r25, Y+62	; 0x3e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a e7       	ldi	r20, 0x7A	; 122
    2062:	54 e4       	ldi	r21, 0x44	; 68
    2064:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8a ab       	std	Y+50, r24	; 0x32
    206e:	9b ab       	std	Y+51, r25	; 0x33
    2070:	ac ab       	std	Y+52, r26	; 0x34
    2072:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2074:	6a a9       	ldd	r22, Y+50	; 0x32
    2076:	7b a9       	ldd	r23, Y+51	; 0x33
    2078:	8c a9       	ldd	r24, Y+52	; 0x34
    207a:	9d a9       	ldd	r25, Y+53	; 0x35
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	4a e7       	ldi	r20, 0x7A	; 122
    2082:	55 e4       	ldi	r21, 0x45	; 69
    2084:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	8e a7       	std	Y+46, r24	; 0x2e
    208e:	9f a7       	std	Y+47, r25	; 0x2f
    2090:	a8 ab       	std	Y+48, r26	; 0x30
    2092:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2094:	6e a5       	ldd	r22, Y+46	; 0x2e
    2096:	7f a5       	ldd	r23, Y+47	; 0x2f
    2098:	88 a9       	ldd	r24, Y+48	; 0x30
    209a:	99 a9       	ldd	r25, Y+49	; 0x31
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e8       	ldi	r20, 0x80	; 128
    20a2:	5f e3       	ldi	r21, 0x3F	; 63
    20a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <LCD_sendCommand+0x9cc>
		__ticks = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	9d a7       	std	Y+45, r25	; 0x2d
    20b2:	8c a7       	std	Y+44, r24	; 0x2c
    20b4:	3f c0       	rjmp	.+126    	; 0x2134 <LCD_sendCommand+0xa4a>
	else if (__tmp > 65535)
    20b6:	6e a5       	ldd	r22, Y+46	; 0x2e
    20b8:	7f a5       	ldd	r23, Y+47	; 0x2f
    20ba:	88 a9       	ldd	r24, Y+48	; 0x30
    20bc:	99 a9       	ldd	r25, Y+49	; 0x31
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	3f ef       	ldi	r19, 0xFF	; 255
    20c2:	4f e7       	ldi	r20, 0x7F	; 127
    20c4:	57 e4       	ldi	r21, 0x47	; 71
    20c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20ca:	18 16       	cp	r1, r24
    20cc:	4c f5       	brge	.+82     	; 0x2120 <LCD_sendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ce:	6a a9       	ldd	r22, Y+50	; 0x32
    20d0:	7b a9       	ldd	r23, Y+51	; 0x33
    20d2:	8c a9       	ldd	r24, Y+52	; 0x34
    20d4:	9d a9       	ldd	r25, Y+53	; 0x35
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e2       	ldi	r20, 0x20	; 32
    20dc:	51 e4       	ldi	r21, 0x41	; 65
    20de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9d a7       	std	Y+45, r25	; 0x2d
    20f4:	8c a7       	std	Y+44, r24	; 0x2c
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <LCD_sendCommand+0xa2c>
    20f8:	80 e9       	ldi	r24, 0x90	; 144
    20fa:	91 e0       	ldi	r25, 0x01	; 1
    20fc:	9b a7       	std	Y+43, r25	; 0x2b
    20fe:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2100:	8a a5       	ldd	r24, Y+42	; 0x2a
    2102:	9b a5       	ldd	r25, Y+43	; 0x2b
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_sendCommand+0xa1a>
    2108:	9b a7       	std	Y+43, r25	; 0x2b
    210a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210c:	8c a5       	ldd	r24, Y+44	; 0x2c
    210e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	9d a7       	std	Y+45, r25	; 0x2d
    2114:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2116:	8c a5       	ldd	r24, Y+44	; 0x2c
    2118:	9d a5       	ldd	r25, Y+45	; 0x2d
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	69 f7       	brne	.-38     	; 0x20f8 <LCD_sendCommand+0xa0e>
    211e:	24 c0       	rjmp	.+72     	; 0x2168 <LCD_sendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2120:	6e a5       	ldd	r22, Y+46	; 0x2e
    2122:	7f a5       	ldd	r23, Y+47	; 0x2f
    2124:	88 a9       	ldd	r24, Y+48	; 0x30
    2126:	99 a9       	ldd	r25, Y+49	; 0x31
    2128:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9d a7       	std	Y+45, r25	; 0x2d
    2132:	8c a7       	std	Y+44, r24	; 0x2c
    2134:	8c a5       	ldd	r24, Y+44	; 0x2c
    2136:	9d a5       	ldd	r25, Y+45	; 0x2d
    2138:	99 a7       	std	Y+41, r25	; 0x29
    213a:	88 a7       	std	Y+40, r24	; 0x28
    213c:	88 a5       	ldd	r24, Y+40	; 0x28
    213e:	99 a5       	ldd	r25, Y+41	; 0x29
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_sendCommand+0xa56>
    2144:	99 a7       	std	Y+41, r25	; 0x29
    2146:	88 a7       	std	Y+40, r24	; 0x28
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <LCD_sendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    214a:	6f a9       	ldd	r22, Y+55	; 0x37
    214c:	78 ad       	ldd	r23, Y+56	; 0x38
    214e:	89 ad       	ldd	r24, Y+57	; 0x39
    2150:	9a ad       	ldd	r25, Y+58	; 0x3a
    2152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8e ab       	std	Y+54, r24	; 0x36
    215c:	8e a9       	ldd	r24, Y+54	; 0x36
    215e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2160:	8f a1       	ldd	r24, Y+39	; 0x27
    2162:	8a 95       	dec	r24
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_sendCommand+0xa78>
    2166:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,0));
    2168:	fe 01       	movw	r30, r28
    216a:	eb 56       	subi	r30, 0x6B	; 107
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 81       	ld	r24, Z
    2170:	98 2f       	mov	r25, r24
    2172:	91 70       	andi	r25, 0x01	; 1
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	63 e0       	ldi	r22, 0x03	; 3
    2178:	49 2f       	mov	r20, r25
    217a:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,1));
    217e:	fe 01       	movw	r30, r28
    2180:	eb 56       	subi	r30, 0x6B	; 107
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	86 95       	lsr	r24
    2188:	98 2f       	mov	r25, r24
    218a:	91 70       	andi	r25, 0x01	; 1
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	64 e0       	ldi	r22, 0x04	; 4
    2190:	49 2f       	mov	r20, r25
    2192:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,2));
    2196:	fe 01       	movw	r30, r28
    2198:	eb 56       	subi	r30, 0x6B	; 107
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	86 95       	lsr	r24
    21a0:	86 95       	lsr	r24
    21a2:	98 2f       	mov	r25, r24
    21a4:	91 70       	andi	r25, 0x01	; 1
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	65 e0       	ldi	r22, 0x05	; 5
    21aa:	49 2f       	mov	r20, r25
    21ac:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,3));
    21b0:	fe 01       	movw	r30, r28
    21b2:	eb 56       	subi	r30, 0x6B	; 107
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	86 95       	lsr	r24
    21ba:	86 95       	lsr	r24
    21bc:	86 95       	lsr	r24
    21be:	98 2f       	mov	r25, r24
    21c0:	91 70       	andi	r25, 0x01	; 1
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	66 e0       	ldi	r22, 0x06	; 6
    21c6:	49 2f       	mov	r20, r25
    21c8:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	8b a3       	std	Y+35, r24	; 0x23
    21d6:	9c a3       	std	Y+36, r25	; 0x24
    21d8:	ad a3       	std	Y+37, r26	; 0x25
    21da:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6b a1       	ldd	r22, Y+35	; 0x23
    21de:	7c a1       	ldd	r23, Y+36	; 0x24
    21e0:	8d a1       	ldd	r24, Y+37	; 0x25
    21e2:	9e a1       	ldd	r25, Y+38	; 0x26
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a e7       	ldi	r20, 0x7A	; 122
    21ea:	55 e4       	ldi	r21, 0x45	; 69
    21ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8f 8f       	std	Y+31, r24	; 0x1f
    21f6:	98 a3       	std	Y+32, r25	; 0x20
    21f8:	a9 a3       	std	Y+33, r26	; 0x21
    21fa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    21fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21fe:	78 a1       	ldd	r23, Y+32	; 0x20
    2200:	89 a1       	ldd	r24, Y+33	; 0x21
    2202:	9a a1       	ldd	r25, Y+34	; 0x22
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <LCD_sendCommand+0xb34>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9e 8f       	std	Y+30, r25	; 0x1e
    221a:	8d 8f       	std	Y+29, r24	; 0x1d
    221c:	3f c0       	rjmp	.+126    	; 0x229c <LCD_sendCommand+0xbb2>
	else if (__tmp > 65535)
    221e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2220:	78 a1       	ldd	r23, Y+32	; 0x20
    2222:	89 a1       	ldd	r24, Y+33	; 0x21
    2224:	9a a1       	ldd	r25, Y+34	; 0x22
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <LCD_sendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6b a1       	ldd	r22, Y+35	; 0x23
    2238:	7c a1       	ldd	r23, Y+36	; 0x24
    223a:	8d a1       	ldd	r24, Y+37	; 0x25
    223c:	9e a1       	ldd	r25, Y+38	; 0x26
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 8f       	std	Y+30, r25	; 0x1e
    225c:	8d 8f       	std	Y+29, r24	; 0x1d
    225e:	0f c0       	rjmp	.+30     	; 0x227e <LCD_sendCommand+0xb94>
    2260:	80 e9       	ldi	r24, 0x90	; 144
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	9c 8f       	std	Y+28, r25	; 0x1c
    2266:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2268:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_sendCommand+0xb82>
    2270:	9c 8f       	std	Y+28, r25	; 0x1c
    2272:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2276:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9e 8f       	std	Y+30, r25	; 0x1e
    227c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2280:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <LCD_sendCommand+0xb76>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <LCD_sendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6f 8d       	ldd	r22, Y+31	; 0x1f
    228a:	78 a1       	ldd	r23, Y+32	; 0x20
    228c:	89 a1       	ldd	r24, Y+33	; 0x21
    228e:	9a a1       	ldd	r25, Y+34	; 0x22
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9e 8f       	std	Y+30, r25	; 0x1e
    229a:	8d 8f       	std	Y+29, r24	; 0x1d
    229c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22a0:	9a 8f       	std	Y+26, r25	; 0x1a
    22a2:	89 8f       	std	Y+25, r24	; 0x19
    22a4:	89 8d       	ldd	r24, Y+25	; 0x19
    22a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_sendCommand+0xbbe>
    22ac:	9a 8f       	std	Y+26, r25	; 0x1a
    22ae:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e8       	ldi	r26, 0x80	; 128
    22c0:	bf e3       	ldi	r27, 0x3F	; 63
    22c2:	8d 8b       	std	Y+21, r24	; 0x15
    22c4:	9e 8b       	std	Y+22, r25	; 0x16
    22c6:	af 8b       	std	Y+23, r26	; 0x17
    22c8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22ca:	6d 89       	ldd	r22, Y+21	; 0x15
    22cc:	7e 89       	ldd	r23, Y+22	; 0x16
    22ce:	8f 89       	ldd	r24, Y+23	; 0x17
    22d0:	98 8d       	ldd	r25, Y+24	; 0x18
    22d2:	2b ea       	ldi	r18, 0xAB	; 171
    22d4:	3a ea       	ldi	r19, 0xAA	; 170
    22d6:	4a ea       	ldi	r20, 0xAA	; 170
    22d8:	50 e4       	ldi	r21, 0x40	; 64
    22da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	89 8b       	std	Y+17, r24	; 0x11
    22e4:	9a 8b       	std	Y+18, r25	; 0x12
    22e6:	ab 8b       	std	Y+19, r26	; 0x13
    22e8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22ea:	69 89       	ldd	r22, Y+17	; 0x11
    22ec:	7a 89       	ldd	r23, Y+18	; 0x12
    22ee:	8b 89       	ldd	r24, Y+19	; 0x13
    22f0:	9c 89       	ldd	r25, Y+20	; 0x14
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	1c f4       	brge	.+6      	; 0x2308 <LCD_sendCommand+0xc1e>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	88 8b       	std	Y+16, r24	; 0x10
    2306:	91 c0       	rjmp	.+290    	; 0x242a <LCD_sendCommand+0xd40>
	else if (__tmp > 255)
    2308:	69 89       	ldd	r22, Y+17	; 0x11
    230a:	7a 89       	ldd	r23, Y+18	; 0x12
    230c:	8b 89       	ldd	r24, Y+19	; 0x13
    230e:	9c 89       	ldd	r25, Y+20	; 0x14
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	53 e4       	ldi	r21, 0x43	; 67
    2318:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	0c f0       	brlt	.+2      	; 0x2322 <LCD_sendCommand+0xc38>
    2320:	7b c0       	rjmp	.+246    	; 0x2418 <LCD_sendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    2322:	6d 89       	ldd	r22, Y+21	; 0x15
    2324:	7e 89       	ldd	r23, Y+22	; 0x16
    2326:	8f 89       	ldd	r24, Y+23	; 0x17
    2328:	98 8d       	ldd	r25, Y+24	; 0x18
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a e7       	ldi	r20, 0x7A	; 122
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8c 87       	std	Y+12, r24	; 0x0c
    233c:	9d 87       	std	Y+13, r25	; 0x0d
    233e:	ae 87       	std	Y+14, r26	; 0x0e
    2340:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2342:	6c 85       	ldd	r22, Y+12	; 0x0c
    2344:	7d 85       	ldd	r23, Y+13	; 0x0d
    2346:	8e 85       	ldd	r24, Y+14	; 0x0e
    2348:	9f 85       	ldd	r25, Y+15	; 0x0f
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	4a e7       	ldi	r20, 0x7A	; 122
    2350:	55 e4       	ldi	r21, 0x45	; 69
    2352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	88 87       	std	Y+8, r24	; 0x08
    235c:	99 87       	std	Y+9, r25	; 0x09
    235e:	aa 87       	std	Y+10, r26	; 0x0a
    2360:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2362:	68 85       	ldd	r22, Y+8	; 0x08
    2364:	79 85       	ldd	r23, Y+9	; 0x09
    2366:	8a 85       	ldd	r24, Y+10	; 0x0a
    2368:	9b 85       	ldd	r25, Y+11	; 0x0b
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2376:	88 23       	and	r24, r24
    2378:	2c f4       	brge	.+10     	; 0x2384 <LCD_sendCommand+0xc9a>
		__ticks = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9f 83       	std	Y+7, r25	; 0x07
    2380:	8e 83       	std	Y+6, r24	; 0x06
    2382:	3f c0       	rjmp	.+126    	; 0x2402 <LCD_sendCommand+0xd18>
	else if (__tmp > 65535)
    2384:	68 85       	ldd	r22, Y+8	; 0x08
    2386:	79 85       	ldd	r23, Y+9	; 0x09
    2388:	8a 85       	ldd	r24, Y+10	; 0x0a
    238a:	9b 85       	ldd	r25, Y+11	; 0x0b
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	4f e7       	ldi	r20, 0x7F	; 127
    2392:	57 e4       	ldi	r21, 0x47	; 71
    2394:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2398:	18 16       	cp	r1, r24
    239a:	4c f5       	brge	.+82     	; 0x23ee <LCD_sendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239c:	6c 85       	ldd	r22, Y+12	; 0x0c
    239e:	7d 85       	ldd	r23, Y+13	; 0x0d
    23a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e2       	ldi	r20, 0x20	; 32
    23aa:	51 e4       	ldi	r21, 0x41	; 65
    23ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9f 83       	std	Y+7, r25	; 0x07
    23c2:	8e 83       	std	Y+6, r24	; 0x06
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_sendCommand+0xcfa>
    23c6:	80 e9       	ldi	r24, 0x90	; 144
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	9d 83       	std	Y+5, r25	; 0x05
    23cc:	8c 83       	std	Y+4, r24	; 0x04
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_sendCommand+0xce8>
    23d6:	9d 83       	std	Y+5, r25	; 0x05
    23d8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	9f 83       	std	Y+7, r25	; 0x07
    23e2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e4:	8e 81       	ldd	r24, Y+6	; 0x06
    23e6:	9f 81       	ldd	r25, Y+7	; 0x07
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	69 f7       	brne	.-38     	; 0x23c6 <LCD_sendCommand+0xcdc>
    23ec:	24 c0       	rjmp	.+72     	; 0x2436 <LCD_sendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ee:	68 85       	ldd	r22, Y+8	; 0x08
    23f0:	79 85       	ldd	r23, Y+9	; 0x09
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9f 83       	std	Y+7, r25	; 0x07
    2400:	8e 83       	std	Y+6, r24	; 0x06
    2402:	8e 81       	ldd	r24, Y+6	; 0x06
    2404:	9f 81       	ldd	r25, Y+7	; 0x07
    2406:	9b 83       	std	Y+3, r25	; 0x03
    2408:	8a 83       	std	Y+2, r24	; 0x02
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_sendCommand+0xd24>
    2412:	9b 83       	std	Y+3, r25	; 0x03
    2414:	8a 83       	std	Y+2, r24	; 0x02
    2416:	0f c0       	rjmp	.+30     	; 0x2436 <LCD_sendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2418:	69 89       	ldd	r22, Y+17	; 0x11
    241a:	7a 89       	ldd	r23, Y+18	; 0x12
    241c:	8b 89       	ldd	r24, Y+19	; 0x13
    241e:	9c 89       	ldd	r25, Y+20	; 0x14
    2420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	88 8b       	std	Y+16, r24	; 0x10
    242a:	88 89       	ldd	r24, Y+16	; 0x10
    242c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	8a 95       	dec	r24
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_sendCommand+0xd46>
    2434:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2436:	cb 56       	subi	r28, 0x6B	; 107
    2438:	df 4f       	sbci	r29, 0xFF	; 255
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	08 95       	ret

0000244e <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	c1 58       	subi	r28, 0x81	; 129
    245c:	d0 40       	sbci	r29, 0x00	; 0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	fe 01       	movw	r30, r28
    246a:	ef 57       	subi	r30, 0x7F	; 127
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    247a:	fe 01       	movw	r30, r28
    247c:	e3 58       	subi	r30, 0x83	; 131
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e8       	ldi	r26, 0x80	; 128
    2486:	bf e3       	ldi	r27, 0x3F	; 63
    2488:	80 83       	st	Z, r24
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	a2 83       	std	Z+2, r26	; 0x02
    248e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	8e 01       	movw	r16, r28
    2492:	07 58       	subi	r16, 0x87	; 135
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	fe 01       	movw	r30, r28
    2498:	e3 58       	subi	r30, 0x83	; 131
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	4a e7       	ldi	r20, 0x7A	; 122
    24aa:	55 e4       	ldi	r21, 0x45	; 69
    24ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	80 83       	st	Z, r24
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	a2 83       	std	Z+2, r26	; 0x02
    24bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24be:	fe 01       	movw	r30, r28
    24c0:	e7 58       	subi	r30, 0x87	; 135
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	44 f4       	brge	.+16     	; 0x24ec <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24dc:	fe 01       	movw	r30, r28
    24de:	e9 58       	subi	r30, 0x89	; 137
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
    24ea:	64 c0       	rjmp	.+200    	; 0x25b4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    24ec:	fe 01       	movw	r30, r28
    24ee:	e7 58       	subi	r30, 0x87	; 135
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	3f ef       	ldi	r19, 0xFF	; 255
    24fe:	4f e7       	ldi	r20, 0x7F	; 127
    2500:	57 e4       	ldi	r21, 0x47	; 71
    2502:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2506:	18 16       	cp	r1, r24
    2508:	0c f0       	brlt	.+2      	; 0x250c <LCD_displayCharacter+0xbe>
    250a:	43 c0       	rjmp	.+134    	; 0x2592 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	fe 01       	movw	r30, r28
    250e:	e3 58       	subi	r30, 0x83	; 131
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8e 01       	movw	r16, r28
    252c:	09 58       	subi	r16, 0x89	; 137
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
    2542:	1f c0       	rjmp	.+62     	; 0x2582 <LCD_displayCharacter+0x134>
    2544:	fe 01       	movw	r30, r28
    2546:	eb 58       	subi	r30, 0x8B	; 139
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 e9       	ldi	r24, 0x90	; 144
    254c:	91 e0       	ldi	r25, 0x01	; 1
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2552:	fe 01       	movw	r30, r28
    2554:	eb 58       	subi	r30, 0x8B	; 139
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_displayCharacter+0x10e>
    2560:	fe 01       	movw	r30, r28
    2562:	eb 58       	subi	r30, 0x8B	; 139
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256a:	de 01       	movw	r26, r28
    256c:	a9 58       	subi	r26, 0x89	; 137
    256e:	bf 4f       	sbci	r27, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	e9 58       	subi	r30, 0x89	; 137
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	9c 93       	st	X, r25
    2580:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	fe 01       	movw	r30, r28
    2584:	e9 58       	subi	r30, 0x89	; 137
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	d1 f6       	brne	.-76     	; 0x2544 <LCD_displayCharacter+0xf6>
    2590:	27 c0       	rjmp	.+78     	; 0x25e0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	8e 01       	movw	r16, r28
    2594:	09 58       	subi	r16, 0x89	; 137
    2596:	1f 4f       	sbci	r17, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e7 58       	subi	r30, 0x87	; 135
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	f8 01       	movw	r30, r16
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    25b4:	de 01       	movw	r26, r28
    25b6:	ad 58       	subi	r26, 0x8D	; 141
    25b8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ba:	fe 01       	movw	r30, r28
    25bc:	e9 58       	subi	r30, 0x89	; 137
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	8d 93       	st	X+, r24
    25c6:	9c 93       	st	X, r25
    25c8:	fe 01       	movw	r30, r28
    25ca:	ed 58       	subi	r30, 0x8D	; 141
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_displayCharacter+0x184>
    25d6:	fe 01       	movw	r30, r28
    25d8:	ed 58       	subi	r30, 0x8D	; 141
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	62 e0       	ldi	r22, 0x02	; 2
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    25ea:	fe 01       	movw	r30, r28
    25ec:	e1 59       	subi	r30, 0x91	; 145
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e8       	ldi	r26, 0x80	; 128
    25f6:	bf e3       	ldi	r27, 0x3F	; 63
    25f8:	80 83       	st	Z, r24
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	a2 83       	std	Z+2, r26	; 0x02
    25fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2600:	8e 01       	movw	r16, r28
    2602:	05 59       	subi	r16, 0x95	; 149
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	e1 59       	subi	r30, 0x91	; 145
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	4a e7       	ldi	r20, 0x7A	; 122
    261a:	55 e4       	ldi	r21, 0x45	; 69
    261c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	f8 01       	movw	r30, r16
    2626:	80 83       	st	Z, r24
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	a2 83       	std	Z+2, r26	; 0x02
    262c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    262e:	fe 01       	movw	r30, r28
    2630:	e5 59       	subi	r30, 0x95	; 149
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	44 f4       	brge	.+16     	; 0x265c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    264c:	fe 01       	movw	r30, r28
    264e:	e7 59       	subi	r30, 0x97	; 151
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	80 83       	st	Z, r24
    265a:	64 c0       	rjmp	.+200    	; 0x2724 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    265c:	fe 01       	movw	r30, r28
    265e:	e5 59       	subi	r30, 0x95	; 149
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	0c f0       	brlt	.+2      	; 0x267c <LCD_displayCharacter+0x22e>
    267a:	43 c0       	rjmp	.+134    	; 0x2702 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	fe 01       	movw	r30, r28
    267e:	e1 59       	subi	r30, 0x91	; 145
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e2       	ldi	r20, 0x20	; 32
    2690:	51 e4       	ldi	r21, 0x41	; 65
    2692:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	8e 01       	movw	r16, r28
    269c:	07 59       	subi	r16, 0x97	; 151
    269e:	1f 4f       	sbci	r17, 0xFF	; 255
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	f8 01       	movw	r30, r16
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    26b2:	1f c0       	rjmp	.+62     	; 0x26f2 <LCD_displayCharacter+0x2a4>
    26b4:	fe 01       	movw	r30, r28
    26b6:	e9 59       	subi	r30, 0x99	; 153
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 e9       	ldi	r24, 0x90	; 144
    26bc:	91 e0       	ldi	r25, 0x01	; 1
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	fe 01       	movw	r30, r28
    26c4:	e9 59       	subi	r30, 0x99	; 153
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	80 81       	ld	r24, Z
    26ca:	91 81       	ldd	r25, Z+1	; 0x01
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_displayCharacter+0x27e>
    26d0:	fe 01       	movw	r30, r28
    26d2:	e9 59       	subi	r30, 0x99	; 153
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26da:	de 01       	movw	r26, r28
    26dc:	a7 59       	subi	r26, 0x97	; 151
    26de:	bf 4f       	sbci	r27, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	e7 59       	subi	r30, 0x97	; 151
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	91 81       	ldd	r25, Z+1	; 0x01
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	11 96       	adiw	r26, 0x01	; 1
    26ee:	9c 93       	st	X, r25
    26f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f2:	fe 01       	movw	r30, r28
    26f4:	e7 59       	subi	r30, 0x97	; 151
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	d1 f6       	brne	.-76     	; 0x26b4 <LCD_displayCharacter+0x266>
    2700:	27 c0       	rjmp	.+78     	; 0x2750 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	8e 01       	movw	r16, r28
    2704:	07 59       	subi	r16, 0x97	; 151
    2706:	1f 4f       	sbci	r17, 0xFF	; 255
    2708:	fe 01       	movw	r30, r28
    270a:	e5 59       	subi	r30, 0x95	; 149
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	f8 01       	movw	r30, r16
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	de 01       	movw	r26, r28
    2726:	ab 59       	subi	r26, 0x9B	; 155
    2728:	bf 4f       	sbci	r27, 0xFF	; 255
    272a:	fe 01       	movw	r30, r28
    272c:	e7 59       	subi	r30, 0x97	; 151
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	91 81       	ldd	r25, Z+1	; 0x01
    2734:	8d 93       	st	X+, r24
    2736:	9c 93       	st	X, r25
    2738:	fe 01       	movw	r30, r28
    273a:	eb 59       	subi	r30, 0x9B	; 155
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_displayCharacter+0x2f4>
    2746:	fe 01       	movw	r30, r28
    2748:	eb 59       	subi	r30, 0x9B	; 155
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	80 83       	st	Z, r24
	_delay_us(1);

#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,4));
    2750:	fe 01       	movw	r30, r28
    2752:	ef 57       	subi	r30, 0x7F	; 127
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	82 95       	swap	r24
    275a:	8f 70       	andi	r24, 0x0F	; 15
    275c:	98 2f       	mov	r25, r24
    275e:	91 70       	andi	r25, 0x01	; 1
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	63 e0       	ldi	r22, 0x03	; 3
    2764:	49 2f       	mov	r20, r25
    2766:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,5));
    276a:	fe 01       	movw	r30, r28
    276c:	ef 57       	subi	r30, 0x7F	; 127
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	82 95       	swap	r24
    2774:	86 95       	lsr	r24
    2776:	87 70       	andi	r24, 0x07	; 7
    2778:	98 2f       	mov	r25, r24
    277a:	91 70       	andi	r25, 0x01	; 1
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	64 e0       	ldi	r22, 0x04	; 4
    2780:	49 2f       	mov	r20, r25
    2782:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,6));
    2786:	fe 01       	movw	r30, r28
    2788:	ef 57       	subi	r30, 0x7F	; 127
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	82 95       	swap	r24
    2790:	86 95       	lsr	r24
    2792:	86 95       	lsr	r24
    2794:	83 70       	andi	r24, 0x03	; 3
    2796:	98 2f       	mov	r25, r24
    2798:	91 70       	andi	r25, 0x01	; 1
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	65 e0       	ldi	r22, 0x05	; 5
    279e:	49 2f       	mov	r20, r25
    27a0:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,7));
    27a4:	fe 01       	movw	r30, r28
    27a6:	ef 57       	subi	r30, 0x7F	; 127
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	98 2f       	mov	r25, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	99 27       	eor	r25, r25
    27b2:	99 1f       	adc	r25, r25
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	66 e0       	ldi	r22, 0x06	; 6
    27b8:	49 2f       	mov	r20, r25
    27ba:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    27be:	fe 01       	movw	r30, r28
    27c0:	ef 59       	subi	r30, 0x9F	; 159
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a0 e8       	ldi	r26, 0x80	; 128
    27ca:	bf e3       	ldi	r27, 0x3F	; 63
    27cc:	80 83       	st	Z, r24
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	a2 83       	std	Z+2, r26	; 0x02
    27d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d4:	8e 01       	movw	r16, r28
    27d6:	03 5a       	subi	r16, 0xA3	; 163
    27d8:	1f 4f       	sbci	r17, 0xFF	; 255
    27da:	fe 01       	movw	r30, r28
    27dc:	ef 59       	subi	r30, 0x9F	; 159
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	60 81       	ld	r22, Z
    27e2:	71 81       	ldd	r23, Z+1	; 0x01
    27e4:	82 81       	ldd	r24, Z+2	; 0x02
    27e6:	93 81       	ldd	r25, Z+3	; 0x03
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	4a e7       	ldi	r20, 0x7A	; 122
    27ee:	55 e4       	ldi	r21, 0x45	; 69
    27f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	a2 83       	std	Z+2, r26	; 0x02
    2800:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2802:	fe 01       	movw	r30, r28
    2804:	e3 5a       	subi	r30, 0xA3	; 163
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	60 81       	ld	r22, Z
    280a:	71 81       	ldd	r23, Z+1	; 0x01
    280c:	82 81       	ldd	r24, Z+2	; 0x02
    280e:	93 81       	ldd	r25, Z+3	; 0x03
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	44 f4       	brge	.+16     	; 0x2830 <LCD_displayCharacter+0x3e2>
		__ticks = 1;
    2820:	fe 01       	movw	r30, r28
    2822:	e5 5a       	subi	r30, 0xA5	; 165
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
    282e:	64 c0       	rjmp	.+200    	; 0x28f8 <LCD_displayCharacter+0x4aa>
	else if (__tmp > 65535)
    2830:	fe 01       	movw	r30, r28
    2832:	e3 5a       	subi	r30, 0xA3	; 163
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	0c f0       	brlt	.+2      	; 0x2850 <LCD_displayCharacter+0x402>
    284e:	43 c0       	rjmp	.+134    	; 0x28d6 <LCD_displayCharacter+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2850:	fe 01       	movw	r30, r28
    2852:	ef 59       	subi	r30, 0x9F	; 159
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	8e 01       	movw	r16, r28
    2870:	05 5a       	subi	r16, 0xA5	; 165
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	f8 01       	movw	r30, r16
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	1f c0       	rjmp	.+62     	; 0x28c6 <LCD_displayCharacter+0x478>
    2888:	fe 01       	movw	r30, r28
    288a:	e7 5a       	subi	r30, 0xA7	; 167
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 e9       	ldi	r24, 0x90	; 144
    2890:	91 e0       	ldi	r25, 0x01	; 1
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
    2896:	fe 01       	movw	r30, r28
    2898:	e7 5a       	subi	r30, 0xA7	; 167
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_displayCharacter+0x452>
    28a4:	fe 01       	movw	r30, r28
    28a6:	e7 5a       	subi	r30, 0xA7	; 167
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	de 01       	movw	r26, r28
    28b0:	a5 5a       	subi	r26, 0xA5	; 165
    28b2:	bf 4f       	sbci	r27, 0xFF	; 255
    28b4:	fe 01       	movw	r30, r28
    28b6:	e5 5a       	subi	r30, 0xA5	; 165
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	11 96       	adiw	r26, 0x01	; 1
    28c2:	9c 93       	st	X, r25
    28c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	fe 01       	movw	r30, r28
    28c8:	e5 5a       	subi	r30, 0xA5	; 165
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	d1 f6       	brne	.-76     	; 0x2888 <LCD_displayCharacter+0x43a>
    28d4:	27 c0       	rjmp	.+78     	; 0x2924 <LCD_displayCharacter+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d6:	8e 01       	movw	r16, r28
    28d8:	05 5a       	subi	r16, 0xA5	; 165
    28da:	1f 4f       	sbci	r17, 0xFF	; 255
    28dc:	fe 01       	movw	r30, r28
    28de:	e3 5a       	subi	r30, 0xA3	; 163
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	f8 01       	movw	r30, r16
    28f4:	91 83       	std	Z+1, r25	; 0x01
    28f6:	80 83       	st	Z, r24
    28f8:	de 01       	movw	r26, r28
    28fa:	a9 5a       	subi	r26, 0xA9	; 169
    28fc:	bf 4f       	sbci	r27, 0xFF	; 255
    28fe:	fe 01       	movw	r30, r28
    2900:	e5 5a       	subi	r30, 0xA5	; 165
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	80 81       	ld	r24, Z
    2906:	91 81       	ldd	r25, Z+1	; 0x01
    2908:	8d 93       	st	X+, r24
    290a:	9c 93       	st	X, r25
    290c:	fe 01       	movw	r30, r28
    290e:	e9 5a       	subi	r30, 0xA9	; 169
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_displayCharacter+0x4c8>
    291a:	fe 01       	movw	r30, r28
    291c:	e9 5a       	subi	r30, 0xA9	; 169
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	62 e0       	ldi	r22, 0x02	; 2
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    292e:	fe 01       	movw	r30, r28
    2930:	ed 5a       	subi	r30, 0xAD	; 173
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 e8       	ldi	r26, 0x80	; 128
    293a:	bf e3       	ldi	r27, 0x3F	; 63
    293c:	80 83       	st	Z, r24
    293e:	91 83       	std	Z+1, r25	; 0x01
    2940:	a2 83       	std	Z+2, r26	; 0x02
    2942:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2944:	8e 01       	movw	r16, r28
    2946:	01 5b       	subi	r16, 0xB1	; 177
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	ed 5a       	subi	r30, 0xAD	; 173
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	2b ea       	ldi	r18, 0xAB	; 171
    295a:	3a ea       	ldi	r19, 0xAA	; 170
    295c:	4a ea       	ldi	r20, 0xAA	; 170
    295e:	50 e4       	ldi	r21, 0x40	; 64
    2960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	f8 01       	movw	r30, r16
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2972:	fe 01       	movw	r30, r28
    2974:	e1 5b       	subi	r30, 0xB1	; 177
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e8       	ldi	r20, 0x80	; 128
    2986:	5f e3       	ldi	r21, 0x3F	; 63
    2988:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    298c:	88 23       	and	r24, r24
    298e:	34 f4       	brge	.+12     	; 0x299c <LCD_displayCharacter+0x54e>
		__ticks = 1;
    2990:	fe 01       	movw	r30, r28
    2992:	e2 5b       	subi	r30, 0xB2	; 178
    2994:	ff 4f       	sbci	r31, 0xFF	; 255
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	80 83       	st	Z, r24
    299a:	e0 c0       	rjmp	.+448    	; 0x2b5c <LCD_displayCharacter+0x70e>
	else if (__tmp > 255)
    299c:	fe 01       	movw	r30, r28
    299e:	e1 5b       	subi	r30, 0xB1	; 177
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	60 81       	ld	r22, Z
    29a4:	71 81       	ldd	r23, Z+1	; 0x01
    29a6:	82 81       	ldd	r24, Z+2	; 0x02
    29a8:	93 81       	ldd	r25, Z+3	; 0x03
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	53 e4       	ldi	r21, 0x43	; 67
    29b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <LCD_displayCharacter+0x56e>
    29ba:	c0 c0       	rjmp	.+384    	; 0x2b3c <LCD_displayCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    29bc:	fe 01       	movw	r30, r28
    29be:	ed 5a       	subi	r30, 0xAD	; 173
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a e7       	ldi	r20, 0x7A	; 122
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	fe 01       	movw	r30, r28
    29dc:	e6 5b       	subi	r30, 0xB6	; 182
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 83       	st	Z, r24
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	a2 83       	std	Z+2, r26	; 0x02
    29e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e8:	8e 01       	movw	r16, r28
    29ea:	0a 5b       	subi	r16, 0xBA	; 186
    29ec:	1f 4f       	sbci	r17, 0xFF	; 255
    29ee:	fe 01       	movw	r30, r28
    29f0:	e6 5b       	subi	r30, 0xB6	; 182
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	60 81       	ld	r22, Z
    29f6:	71 81       	ldd	r23, Z+1	; 0x01
    29f8:	82 81       	ldd	r24, Z+2	; 0x02
    29fa:	93 81       	ldd	r25, Z+3	; 0x03
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	4a e7       	ldi	r20, 0x7A	; 122
    2a02:	55 e4       	ldi	r21, 0x45	; 69
    2a04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	80 83       	st	Z, r24
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	a2 83       	std	Z+2, r26	; 0x02
    2a14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a16:	fe 01       	movw	r30, r28
    2a18:	ea 5b       	subi	r30, 0xBA	; 186
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e8       	ldi	r20, 0x80	; 128
    2a2a:	5f e3       	ldi	r21, 0x3F	; 63
    2a2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	44 f4       	brge	.+16     	; 0x2a44 <LCD_displayCharacter+0x5f6>
		__ticks = 1;
    2a34:	fe 01       	movw	r30, r28
    2a36:	ec 5b       	subi	r30, 0xBC	; 188
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	91 83       	std	Z+1, r25	; 0x01
    2a40:	80 83       	st	Z, r24
    2a42:	64 c0       	rjmp	.+200    	; 0x2b0c <LCD_displayCharacter+0x6be>
	else if (__tmp > 65535)
    2a44:	fe 01       	movw	r30, r28
    2a46:	ea 5b       	subi	r30, 0xBA	; 186
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	60 81       	ld	r22, Z
    2a4c:	71 81       	ldd	r23, Z+1	; 0x01
    2a4e:	82 81       	ldd	r24, Z+2	; 0x02
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	3f ef       	ldi	r19, 0xFF	; 255
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	0c f0       	brlt	.+2      	; 0x2a64 <LCD_displayCharacter+0x616>
    2a62:	43 c0       	rjmp	.+134    	; 0x2aea <LCD_displayCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a64:	fe 01       	movw	r30, r28
    2a66:	e6 5b       	subi	r30, 0xB6	; 182
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	60 81       	ld	r22, Z
    2a6c:	71 81       	ldd	r23, Z+1	; 0x01
    2a6e:	82 81       	ldd	r24, Z+2	; 0x02
    2a70:	93 81       	ldd	r25, Z+3	; 0x03
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8e 01       	movw	r16, r28
    2a84:	0c 5b       	subi	r16, 0xBC	; 188
    2a86:	1f 4f       	sbci	r17, 0xFF	; 255
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	f8 01       	movw	r30, r16
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
    2a9a:	1f c0       	rjmp	.+62     	; 0x2ada <LCD_displayCharacter+0x68c>
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ee 5b       	subi	r30, 0xBE	; 190
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 e9       	ldi	r24, 0x90	; 144
    2aa4:	91 e0       	ldi	r25, 0x01	; 1
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	80 83       	st	Z, r24
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ee 5b       	subi	r30, 0xBE	; 190
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_displayCharacter+0x666>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ee 5b       	subi	r30, 0xBE	; 190
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac2:	de 01       	movw	r26, r28
    2ac4:	ac 5b       	subi	r26, 0xBC	; 188
    2ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac8:	fe 01       	movw	r30, r28
    2aca:	ec 5b       	subi	r30, 0xBC	; 188
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	91 81       	ldd	r25, Z+1	; 0x01
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	11 96       	adiw	r26, 0x01	; 1
    2ad6:	9c 93       	st	X, r25
    2ad8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ada:	fe 01       	movw	r30, r28
    2adc:	ec 5b       	subi	r30, 0xBC	; 188
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	d1 f6       	brne	.-76     	; 0x2a9c <LCD_displayCharacter+0x64e>
    2ae8:	42 c0       	rjmp	.+132    	; 0x2b6e <LCD_displayCharacter+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aea:	8e 01       	movw	r16, r28
    2aec:	0c 5b       	subi	r16, 0xBC	; 188
    2aee:	1f 4f       	sbci	r17, 0xFF	; 255
    2af0:	fe 01       	movw	r30, r28
    2af2:	ea 5b       	subi	r30, 0xBA	; 186
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	60 81       	ld	r22, Z
    2af8:	71 81       	ldd	r23, Z+1	; 0x01
    2afa:	82 81       	ldd	r24, Z+2	; 0x02
    2afc:	93 81       	ldd	r25, Z+3	; 0x03
    2afe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	f8 01       	movw	r30, r16
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
    2b0c:	de 01       	movw	r26, r28
    2b0e:	a0 5c       	subi	r26, 0xC0	; 192
    2b10:	bf 4f       	sbci	r27, 0xFF	; 255
    2b12:	fe 01       	movw	r30, r28
    2b14:	ec 5b       	subi	r30, 0xBC	; 188
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	91 81       	ldd	r25, Z+1	; 0x01
    2b1c:	11 96       	adiw	r26, 0x01	; 1
    2b1e:	9c 93       	st	X, r25
    2b20:	8e 93       	st	-X, r24
    2b22:	fe 01       	movw	r30, r28
    2b24:	e0 5c       	subi	r30, 0xC0	; 192
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	80 81       	ld	r24, Z
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_displayCharacter+0x6de>
    2b30:	fe 01       	movw	r30, r28
    2b32:	e0 5c       	subi	r30, 0xC0	; 192
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
    2b3a:	19 c0       	rjmp	.+50     	; 0x2b6e <LCD_displayCharacter+0x720>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b3c:	8e 01       	movw	r16, r28
    2b3e:	02 5b       	subi	r16, 0xB2	; 178
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
    2b42:	fe 01       	movw	r30, r28
    2b44:	e1 5b       	subi	r30, 0xB1	; 177
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	f8 01       	movw	r30, r16
    2b5a:	80 83       	st	Z, r24
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e2 5b       	subi	r30, 0xB2	; 178
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 81       	ld	r24, Z
    2b64:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b66:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b68:	8a 95       	dec	r24
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_displayCharacter+0x71a>
    2b6c:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	62 e0       	ldi	r22, 0x02	; 2
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e8       	ldi	r26, 0x80	; 128
    2b7e:	bf e3       	ldi	r27, 0x3F	; 63
    2b80:	8b af       	std	Y+59, r24	; 0x3b
    2b82:	9c af       	std	Y+60, r25	; 0x3c
    2b84:	ad af       	std	Y+61, r26	; 0x3d
    2b86:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b88:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b8a:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b90:	2b ea       	ldi	r18, 0xAB	; 171
    2b92:	3a ea       	ldi	r19, 0xAA	; 170
    2b94:	4a ea       	ldi	r20, 0xAA	; 170
    2b96:	50 e4       	ldi	r21, 0x40	; 64
    2b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8f ab       	std	Y+55, r24	; 0x37
    2ba2:	98 af       	std	Y+56, r25	; 0x38
    2ba4:	a9 af       	std	Y+57, r26	; 0x39
    2ba6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2ba8:	6f a9       	ldd	r22, Y+55	; 0x37
    2baa:	78 ad       	ldd	r23, Y+56	; 0x38
    2bac:	89 ad       	ldd	r24, Y+57	; 0x39
    2bae:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	1c f4       	brge	.+6      	; 0x2bc6 <LCD_displayCharacter+0x778>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	8e ab       	std	Y+54, r24	; 0x36
    2bc4:	91 c0       	rjmp	.+290    	; 0x2ce8 <LCD_displayCharacter+0x89a>
	else if (__tmp > 255)
    2bc6:	6f a9       	ldd	r22, Y+55	; 0x37
    2bc8:	78 ad       	ldd	r23, Y+56	; 0x38
    2bca:	89 ad       	ldd	r24, Y+57	; 0x39
    2bcc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	53 e4       	ldi	r21, 0x43	; 67
    2bd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	0c f0       	brlt	.+2      	; 0x2be0 <LCD_displayCharacter+0x792>
    2bde:	7b c0       	rjmp	.+246    	; 0x2cd6 <LCD_displayCharacter+0x888>
	{
		_delay_ms(__us / 1000.0);
    2be0:	6b ad       	ldd	r22, Y+59	; 0x3b
    2be2:	7c ad       	ldd	r23, Y+60	; 0x3c
    2be4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2be6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	4a e7       	ldi	r20, 0x7A	; 122
    2bee:	54 e4       	ldi	r21, 0x44	; 68
    2bf0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8a ab       	std	Y+50, r24	; 0x32
    2bfa:	9b ab       	std	Y+51, r25	; 0x33
    2bfc:	ac ab       	std	Y+52, r26	; 0x34
    2bfe:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6a a9       	ldd	r22, Y+50	; 0x32
    2c02:	7b a9       	ldd	r23, Y+51	; 0x33
    2c04:	8c a9       	ldd	r24, Y+52	; 0x34
    2c06:	9d a9       	ldd	r25, Y+53	; 0x35
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a e7       	ldi	r20, 0x7A	; 122
    2c0e:	55 e4       	ldi	r21, 0x45	; 69
    2c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8e a7       	std	Y+46, r24	; 0x2e
    2c1a:	9f a7       	std	Y+47, r25	; 0x2f
    2c1c:	a8 ab       	std	Y+48, r26	; 0x30
    2c1e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2c20:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c22:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c24:	88 a9       	ldd	r24, Y+48	; 0x30
    2c26:	99 a9       	ldd	r25, Y+49	; 0x31
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <LCD_displayCharacter+0x7f4>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9d a7       	std	Y+45, r25	; 0x2d
    2c3e:	8c a7       	std	Y+44, r24	; 0x2c
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <LCD_displayCharacter+0x872>
	else if (__tmp > 65535)
    2c42:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c44:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c46:	88 a9       	ldd	r24, Y+48	; 0x30
    2c48:	99 a9       	ldd	r25, Y+49	; 0x31
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <LCD_displayCharacter+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6a a9       	ldd	r22, Y+50	; 0x32
    2c5c:	7b a9       	ldd	r23, Y+51	; 0x33
    2c5e:	8c a9       	ldd	r24, Y+52	; 0x34
    2c60:	9d a9       	ldd	r25, Y+53	; 0x35
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9d a7       	std	Y+45, r25	; 0x2d
    2c80:	8c a7       	std	Y+44, r24	; 0x2c
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <LCD_displayCharacter+0x854>
    2c84:	80 e9       	ldi	r24, 0x90	; 144
    2c86:	91 e0       	ldi	r25, 0x01	; 1
    2c88:	9b a7       	std	Y+43, r25	; 0x2b
    2c8a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c8c:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c8e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <LCD_displayCharacter+0x842>
    2c94:	9b a7       	std	Y+43, r25	; 0x2b
    2c96:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c9a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9d a7       	std	Y+45, r25	; 0x2d
    2ca0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ca4:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <LCD_displayCharacter+0x836>
    2caa:	24 c0       	rjmp	.+72     	; 0x2cf4 <LCD_displayCharacter+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6e a5       	ldd	r22, Y+46	; 0x2e
    2cae:	7f a5       	ldd	r23, Y+47	; 0x2f
    2cb0:	88 a9       	ldd	r24, Y+48	; 0x30
    2cb2:	99 a9       	ldd	r25, Y+49	; 0x31
    2cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9d a7       	std	Y+45, r25	; 0x2d
    2cbe:	8c a7       	std	Y+44, r24	; 0x2c
    2cc0:	8c a5       	ldd	r24, Y+44	; 0x2c
    2cc2:	9d a5       	ldd	r25, Y+45	; 0x2d
    2cc4:	99 a7       	std	Y+41, r25	; 0x29
    2cc6:	88 a7       	std	Y+40, r24	; 0x28
    2cc8:	88 a5       	ldd	r24, Y+40	; 0x28
    2cca:	99 a5       	ldd	r25, Y+41	; 0x29
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <LCD_displayCharacter+0x87e>
    2cd0:	99 a7       	std	Y+41, r25	; 0x29
    2cd2:	88 a7       	std	Y+40, r24	; 0x28
    2cd4:	0f c0       	rjmp	.+30     	; 0x2cf4 <LCD_displayCharacter+0x8a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cd6:	6f a9       	ldd	r22, Y+55	; 0x37
    2cd8:	78 ad       	ldd	r23, Y+56	; 0x38
    2cda:	89 ad       	ldd	r24, Y+57	; 0x39
    2cdc:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	8e ab       	std	Y+54, r24	; 0x36
    2ce8:	8e a9       	ldd	r24, Y+54	; 0x36
    2cea:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cec:	8f a1       	ldd	r24, Y+39	; 0x27
    2cee:	8a 95       	dec	r24
    2cf0:	f1 f7       	brne	.-4      	; 0x2cee <LCD_displayCharacter+0x8a0>
    2cf2:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,0));
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	ef 57       	subi	r30, 0x7F	; 127
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	98 2f       	mov	r25, r24
    2cfe:	91 70       	andi	r25, 0x01	; 1
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	63 e0       	ldi	r22, 0x03	; 3
    2d04:	49 2f       	mov	r20, r25
    2d06:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,1));
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ef 57       	subi	r30, 0x7F	; 127
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	86 95       	lsr	r24
    2d14:	98 2f       	mov	r25, r24
    2d16:	91 70       	andi	r25, 0x01	; 1
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	64 e0       	ldi	r22, 0x04	; 4
    2d1c:	49 2f       	mov	r20, r25
    2d1e:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,2));
    2d22:	fe 01       	movw	r30, r28
    2d24:	ef 57       	subi	r30, 0x7F	; 127
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	86 95       	lsr	r24
    2d2c:	86 95       	lsr	r24
    2d2e:	98 2f       	mov	r25, r24
    2d30:	91 70       	andi	r25, 0x01	; 1
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	65 e0       	ldi	r22, 0x05	; 5
    2d36:	49 2f       	mov	r20, r25
    2d38:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,3));
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ef 57       	subi	r30, 0x7F	; 127
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	86 95       	lsr	r24
    2d46:	86 95       	lsr	r24
    2d48:	86 95       	lsr	r24
    2d4a:	98 2f       	mov	r25, r24
    2d4c:	91 70       	andi	r25, 0x01	; 1
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	66 e0       	ldi	r22, 0x06	; 6
    2d52:	49 2f       	mov	r20, r25
    2d54:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	a0 e8       	ldi	r26, 0x80	; 128
    2d5e:	bf e3       	ldi	r27, 0x3F	; 63
    2d60:	8b a3       	std	Y+35, r24	; 0x23
    2d62:	9c a3       	std	Y+36, r25	; 0x24
    2d64:	ad a3       	std	Y+37, r26	; 0x25
    2d66:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d68:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	4a e7       	ldi	r20, 0x7A	; 122
    2d76:	55 e4       	ldi	r21, 0x45	; 69
    2d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	8f 8f       	std	Y+31, r24	; 0x1f
    2d82:	98 a3       	std	Y+32, r25	; 0x20
    2d84:	a9 a3       	std	Y+33, r26	; 0x21
    2d86:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2d88:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d8a:	78 a1       	ldd	r23, Y+32	; 0x20
    2d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e8       	ldi	r20, 0x80	; 128
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d9c:	88 23       	and	r24, r24
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <LCD_displayCharacter+0x95c>
		__ticks = 1;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9e 8f       	std	Y+30, r25	; 0x1e
    2da6:	8d 8f       	std	Y+29, r24	; 0x1d
    2da8:	3f c0       	rjmp	.+126    	; 0x2e28 <LCD_displayCharacter+0x9da>
	else if (__tmp > 65535)
    2daa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2dac:	78 a1       	ldd	r23, Y+32	; 0x20
    2dae:	89 a1       	ldd	r24, Y+33	; 0x21
    2db0:	9a a1       	ldd	r25, Y+34	; 0x22
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	3f ef       	ldi	r19, 0xFF	; 255
    2db6:	4f e7       	ldi	r20, 0x7F	; 127
    2db8:	57 e4       	ldi	r21, 0x47	; 71
    2dba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2dbe:	18 16       	cp	r1, r24
    2dc0:	4c f5       	brge	.+82     	; 0x2e14 <LCD_displayCharacter+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	9e 8f       	std	Y+30, r25	; 0x1e
    2de8:	8d 8f       	std	Y+29, r24	; 0x1d
    2dea:	0f c0       	rjmp	.+30     	; 0x2e0a <LCD_displayCharacter+0x9bc>
    2dec:	80 e9       	ldi	r24, 0x90	; 144
    2dee:	91 e0       	ldi	r25, 0x01	; 1
    2df0:	9c 8f       	std	Y+28, r25	; 0x1c
    2df2:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2df4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <LCD_displayCharacter+0x9aa>
    2dfc:	9c 8f       	std	Y+28, r25	; 0x1c
    2dfe:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	9e 8f       	std	Y+30, r25	; 0x1e
    2e08:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	69 f7       	brne	.-38     	; 0x2dec <LCD_displayCharacter+0x99e>
    2e12:	14 c0       	rjmp	.+40     	; 0x2e3c <LCD_displayCharacter+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e16:	78 a1       	ldd	r23, Y+32	; 0x20
    2e18:	89 a1       	ldd	r24, Y+33	; 0x21
    2e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e 8f       	std	Y+30, r25	; 0x1e
    2e26:	8d 8f       	std	Y+29, r24	; 0x1d
    2e28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e2e:	89 8f       	std	Y+25, r24	; 0x19
    2e30:	89 8d       	ldd	r24, Y+25	; 0x19
    2e32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LCD_displayCharacter+0x9e6>
    2e38:	9a 8f       	std	Y+26, r25	; 0x1a
    2e3a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	62 e0       	ldi	r22, 0x02	; 2
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	0e 94 76 08 	call	0x10ec	; 0x10ec <GPIO_writePin>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a0 e8       	ldi	r26, 0x80	; 128
    2e4c:	bf e3       	ldi	r27, 0x3F	; 63
    2e4e:	8d 8b       	std	Y+21, r24	; 0x15
    2e50:	9e 8b       	std	Y+22, r25	; 0x16
    2e52:	af 8b       	std	Y+23, r26	; 0x17
    2e54:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e56:	6d 89       	ldd	r22, Y+21	; 0x15
    2e58:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e5e:	2b ea       	ldi	r18, 0xAB	; 171
    2e60:	3a ea       	ldi	r19, 0xAA	; 170
    2e62:	4a ea       	ldi	r20, 0xAA	; 170
    2e64:	50 e4       	ldi	r21, 0x40	; 64
    2e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	89 8b       	std	Y+17, r24	; 0x11
    2e70:	9a 8b       	std	Y+18, r25	; 0x12
    2e72:	ab 8b       	std	Y+19, r26	; 0x13
    2e74:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e76:	69 89       	ldd	r22, Y+17	; 0x11
    2e78:	7a 89       	ldd	r23, Y+18	; 0x12
    2e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	1c f4       	brge	.+6      	; 0x2e94 <LCD_displayCharacter+0xa46>
		__ticks = 1;
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	88 8b       	std	Y+16, r24	; 0x10
    2e92:	91 c0       	rjmp	.+290    	; 0x2fb6 <LCD_displayCharacter+0xb68>
	else if (__tmp > 255)
    2e94:	69 89       	ldd	r22, Y+17	; 0x11
    2e96:	7a 89       	ldd	r23, Y+18	; 0x12
    2e98:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	4f e7       	ldi	r20, 0x7F	; 127
    2ea2:	53 e4       	ldi	r21, 0x43	; 67
    2ea4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ea8:	18 16       	cp	r1, r24
    2eaa:	0c f0       	brlt	.+2      	; 0x2eae <LCD_displayCharacter+0xa60>
    2eac:	7b c0       	rjmp	.+246    	; 0x2fa4 <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2eae:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	4a e7       	ldi	r20, 0x7A	; 122
    2ebc:	54 e4       	ldi	r21, 0x44	; 68
    2ebe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	8c 87       	std	Y+12, r24	; 0x0c
    2ec8:	9d 87       	std	Y+13, r25	; 0x0d
    2eca:	ae 87       	std	Y+14, r26	; 0x0e
    2ecc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ece:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ed0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ed4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	4a e7       	ldi	r20, 0x7A	; 122
    2edc:	55 e4       	ldi	r21, 0x45	; 69
    2ede:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	88 87       	std	Y+8, r24	; 0x08
    2ee8:	99 87       	std	Y+9, r25	; 0x09
    2eea:	aa 87       	std	Y+10, r26	; 0x0a
    2eec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2eee:	68 85       	ldd	r22, Y+8	; 0x08
    2ef0:	79 85       	ldd	r23, Y+9	; 0x09
    2ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ef4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e8       	ldi	r20, 0x80	; 128
    2efc:	5f e3       	ldi	r21, 0x3F	; 63
    2efe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f02:	88 23       	and	r24, r24
    2f04:	2c f4       	brge	.+10     	; 0x2f10 <LCD_displayCharacter+0xac2>
		__ticks = 1;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9f 83       	std	Y+7, r25	; 0x07
    2f0c:	8e 83       	std	Y+6, r24	; 0x06
    2f0e:	3f c0       	rjmp	.+126    	; 0x2f8e <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    2f10:	68 85       	ldd	r22, Y+8	; 0x08
    2f12:	79 85       	ldd	r23, Y+9	; 0x09
    2f14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f16:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	3f ef       	ldi	r19, 0xFF	; 255
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	57 e4       	ldi	r21, 0x47	; 71
    2f20:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	4c f5       	brge	.+82     	; 0x2f7a <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f28:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	40 e2       	ldi	r20, 0x20	; 32
    2f36:	51 e4       	ldi	r21, 0x41	; 65
    2f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	9f 83       	std	Y+7, r25	; 0x07
    2f4e:	8e 83       	std	Y+6, r24	; 0x06
    2f50:	0f c0       	rjmp	.+30     	; 0x2f70 <LCD_displayCharacter+0xb22>
    2f52:	80 e9       	ldi	r24, 0x90	; 144
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	9d 83       	std	Y+5, r25	; 0x05
    2f58:	8c 83       	std	Y+4, r24	; 0x04
    2f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	f1 f7       	brne	.-4      	; 0x2f5e <LCD_displayCharacter+0xb10>
    2f62:	9d 83       	std	Y+5, r25	; 0x05
    2f64:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f66:	8e 81       	ldd	r24, Y+6	; 0x06
    2f68:	9f 81       	ldd	r25, Y+7	; 0x07
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	9f 83       	std	Y+7, r25	; 0x07
    2f6e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f70:	8e 81       	ldd	r24, Y+6	; 0x06
    2f72:	9f 81       	ldd	r25, Y+7	; 0x07
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	69 f7       	brne	.-38     	; 0x2f52 <LCD_displayCharacter+0xb04>
    2f78:	24 c0       	rjmp	.+72     	; 0x2fc2 <LCD_displayCharacter+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7a:	68 85       	ldd	r22, Y+8	; 0x08
    2f7c:	79 85       	ldd	r23, Y+9	; 0x09
    2f7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	9f 83       	std	Y+7, r25	; 0x07
    2f8c:	8e 83       	std	Y+6, r24	; 0x06
    2f8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f90:	9f 81       	ldd	r25, Y+7	; 0x07
    2f92:	9b 83       	std	Y+3, r25	; 0x03
    2f94:	8a 83       	std	Y+2, r24	; 0x02
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <LCD_displayCharacter+0xb4c>
    2f9e:	9b 83       	std	Y+3, r25	; 0x03
    2fa0:	8a 83       	std	Y+2, r24	; 0x02
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <LCD_displayCharacter+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2fa4:	69 89       	ldd	r22, Y+17	; 0x11
    2fa6:	7a 89       	ldd	r23, Y+18	; 0x12
    2fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    2faa:	9c 89       	ldd	r25, Y+20	; 0x14
    2fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	88 8b       	std	Y+16, r24	; 0x10
    2fb6:	88 89       	ldd	r24, Y+16	; 0x10
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	8a 95       	dec	r24
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <LCD_displayCharacter+0xb6e>
    2fc0:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2fc2:	cf 57       	subi	r28, 0x7F	; 127
    2fc4:	df 4f       	sbci	r29, 0xFF	; 255
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	1f 91       	pop	r17
    2fd6:	0f 91       	pop	r16
    2fd8:	08 95       	ret

00002fda <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <LCD_displayString+0x6>
    2fe0:	0f 92       	push	r0
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	9b 83       	std	Y+3, r25	; 0x03
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    2fea:	19 82       	std	Y+1, r1	; 0x01
    2fec:	0e c0       	rjmp	.+28     	; 0x300a <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	e2 0f       	add	r30, r18
    2ffc:	f3 1f       	adc	r31, r19
    2ffe:	80 81       	ld	r24, Z
    3000:	0e 94 27 12 	call	0x244e	; 0x244e <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	89 83       	std	Y+1, r24	; 0x01
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	9b 81       	ldd	r25, Y+3	; 0x03
    3014:	fc 01       	movw	r30, r24
    3016:	e2 0f       	add	r30, r18
    3018:	f3 1f       	adc	r31, r19
    301a:	80 81       	ld	r24, Z
    301c:	88 23       	and	r24, r24
    301e:	39 f7       	brne	.-50     	; 0x2fee <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	62 97       	sbiw	r28, 0x12	; 18
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	9a 8b       	std	Y+18, r25	; 0x12
    3042:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    3044:	89 89       	ldd	r24, Y+17	; 0x11
    3046:	9a 89       	ldd	r25, Y+18	; 0x12
    3048:	9e 01       	movw	r18, r28
    304a:	2f 5f       	subi	r18, 0xFF	; 255
    304c:	3f 4f       	sbci	r19, 0xFF	; 255
    304e:	b9 01       	movw	r22, r18
    3050:	4a e0       	ldi	r20, 0x0A	; 10
    3052:	50 e0       	ldi	r21, 0x00	; 0
    3054:	0e 94 54 19 	call	0x32a8	; 0x32a8 <itoa>

   LCD_displayString(arr);
    3058:	ce 01       	movw	r24, r28
    305a:	01 96       	adiw	r24, 0x01	; 1
    305c:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_displayString>
}
    3060:	62 96       	adiw	r28, 0x12	; 18
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	08 95       	ret

00003072 <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	00 d0       	rcall	.+0      	; 0x3078 <LCD_moveCursor+0x6>
    3078:	00 d0       	rcall	.+0      	; 0x307a <LCD_moveCursor+0x8>
    307a:	0f 92       	push	r0
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	8a 83       	std	Y+2, r24	; 0x02
    3082:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	28 2f       	mov	r18, r24
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	3d 83       	std	Y+5, r19	; 0x05
    308c:	2c 83       	std	Y+4, r18	; 0x04
    308e:	8c 81       	ldd	r24, Y+4	; 0x04
    3090:	9d 81       	ldd	r25, Y+5	; 0x05
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	91 05       	cpc	r25, r1
    3096:	c1 f0       	breq	.+48     	; 0x30c8 <LCD_moveCursor+0x56>
    3098:	2c 81       	ldd	r18, Y+4	; 0x04
    309a:	3d 81       	ldd	r19, Y+5	; 0x05
    309c:	22 30       	cpi	r18, 0x02	; 2
    309e:	31 05       	cpc	r19, r1
    30a0:	2c f4       	brge	.+10     	; 0x30ac <LCD_moveCursor+0x3a>
    30a2:	8c 81       	ldd	r24, Y+4	; 0x04
    30a4:	9d 81       	ldd	r25, Y+5	; 0x05
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	61 f0       	breq	.+24     	; 0x30c2 <LCD_moveCursor+0x50>
    30aa:	19 c0       	rjmp	.+50     	; 0x30de <LCD_moveCursor+0x6c>
    30ac:	2c 81       	ldd	r18, Y+4	; 0x04
    30ae:	3d 81       	ldd	r19, Y+5	; 0x05
    30b0:	22 30       	cpi	r18, 0x02	; 2
    30b2:	31 05       	cpc	r19, r1
    30b4:	69 f0       	breq	.+26     	; 0x30d0 <LCD_moveCursor+0x5e>
    30b6:	8c 81       	ldd	r24, Y+4	; 0x04
    30b8:	9d 81       	ldd	r25, Y+5	; 0x05
    30ba:	83 30       	cpi	r24, 0x03	; 3
    30bc:	91 05       	cpc	r25, r1
    30be:	61 f0       	breq	.+24     	; 0x30d8 <LCD_moveCursor+0x66>
    30c0:	0e c0       	rjmp	.+28     	; 0x30de <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	89 83       	std	Y+1, r24	; 0x01
    30c6:	0b c0       	rjmp	.+22     	; 0x30de <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	80 5c       	subi	r24, 0xC0	; 192
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	07 c0       	rjmp	.+14     	; 0x30de <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	80 5f       	subi	r24, 0xF0	; 240
    30d4:	89 83       	std	Y+1, r24	; 0x01
    30d6:	03 c0       	rjmp	.+6      	; 0x30de <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    30d8:	8b 81       	ldd	r24, Y+3	; 0x03
    30da:	80 5c       	subi	r24, 0xC0	; 192
    30dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	80 68       	ori	r24, 0x80	; 128
    30e2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <LCD_displayStringRowColumn+0x6>
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <LCD_displayStringRowColumn+0x8>
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	6a 83       	std	Y+2, r22	; 0x02
    3106:	5c 83       	std	Y+4, r21	; 0x04
    3108:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	6a 81       	ldd	r22, Y+2	; 0x02
    310e:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	9c 81       	ldd	r25, Y+4	; 0x04
    3116:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_displayString>
}
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	cf 91       	pop	r28
    3124:	df 91       	pop	r29
    3126:	08 95       	ret

00003128 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <LM35_getTemperature>:
/* Description :
 * A Function that read the digital value read from the sensor by ADC
 * and return the temperature value
 */
uint8 LM35_getTemperature(void)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <LM35_getTemperature+0x6>
    3142:	0f 92       	push	r0
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature=0;
    3148:	1b 82       	std	Y+3, r1	; 0x03
	uint16 digitalValue=0;
    314a:	1a 82       	std	Y+2, r1	; 0x02
    314c:	19 82       	std	Y+1, r1	; 0x01

	/*get the digital value from ADC*/
	digitalValue = ADC_readChannel(LM35_OUTPUT_PIN);
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	0e 94 25 07 	call	0xe4a	; 0xe4a <ADC_readChannel>
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01

	/*calculate the temperature */
	temperature=(uint8)(((uint32)digitalValue*LM35_MAX_TEMPERATURE*ADC_Vref)/(ADC_MAX_DIGITAL_VALUE*LM35_MAX_VOLT));
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	9a 81       	ldd	r25, Y+2	; 0x02
    315c:	cc 01       	movw	r24, r24
    315e:	a0 e0       	ldi	r26, 0x00	; 0
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	2e ee       	ldi	r18, 0xEE	; 238
    3164:	32 e0       	ldi	r19, 0x02	; 2
    3166:	40 e0       	ldi	r20, 0x00	; 0
    3168:	50 e0       	ldi	r21, 0x00	; 0
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__mulsi3>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	bc 01       	movw	r22, r24
    3178:	cd 01       	movw	r24, r26
    317a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 ed       	ldi	r19, 0xD0	; 208
    318a:	4f eb       	ldi	r20, 0xBF	; 191
    318c:	54 e4       	ldi	r21, 0x44	; 68
    318e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	bc 01       	movw	r22, r24
    3198:	cd 01       	movw	r24, r26
    319a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	8b 83       	std	Y+3, r24	; 0x03

	/*return the temperature*/
	return temperature;
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <main>:

#include"lm35_sensor.h"
#include"lcd.h"

int main(void)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    31ba:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <LCD_init>
	ADC_init();
    31be:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>

	LCD_displayString("Temp =    C");
    31c2:	80 e6       	ldi	r24, 0x60	; 96
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	0e 94 ed 17 	call	0x2fda	; 0x2fda <LCD_displayString>

	while(1)
	{
		LCD_moveCursor(0,7);
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	67 e0       	ldi	r22, 0x07	; 7
    31ce:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_moveCursor>
		if(LM35_getTemperature()<=99){
    31d2:	0e 94 9e 18 	call	0x313c	; 0x313c <LM35_getTemperature>
    31d6:	84 36       	cpi	r24, 0x64	; 100
    31d8:	50 f4       	brcc	.+20     	; 0x31ee <main+0x3c>
			LCD_integerToString(LM35_getTemperature());
    31da:	0e 94 9e 18 	call	0x313c	; 0x313c <LM35_getTemperature>
    31de:	88 2f       	mov	r24, r24
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0e 94 16 18 	call	0x302c	; 0x302c <LCD_integerToString>
			LCD_displayCharacter(' ');
    31e6:	80 e2       	ldi	r24, 0x20	; 32
    31e8:	0e 94 27 12 	call	0x244e	; 0x244e <LCD_displayCharacter>
    31ec:	ee cf       	rjmp	.-36     	; 0x31ca <main+0x18>
		}
		else
			LCD_integerToString(LM35_getTemperature());
    31ee:	0e 94 9e 18 	call	0x313c	; 0x313c <LM35_getTemperature>
    31f2:	88 2f       	mov	r24, r24
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 16 18 	call	0x302c	; 0x302c <LCD_integerToString>
    31fa:	e7 cf       	rjmp	.-50     	; 0x31ca <main+0x18>

000031fc <__mulsi3>:
    31fc:	62 9f       	mul	r22, r18
    31fe:	d0 01       	movw	r26, r0
    3200:	73 9f       	mul	r23, r19
    3202:	f0 01       	movw	r30, r0
    3204:	82 9f       	mul	r24, r18
    3206:	e0 0d       	add	r30, r0
    3208:	f1 1d       	adc	r31, r1
    320a:	64 9f       	mul	r22, r20
    320c:	e0 0d       	add	r30, r0
    320e:	f1 1d       	adc	r31, r1
    3210:	92 9f       	mul	r25, r18
    3212:	f0 0d       	add	r31, r0
    3214:	83 9f       	mul	r24, r19
    3216:	f0 0d       	add	r31, r0
    3218:	74 9f       	mul	r23, r20
    321a:	f0 0d       	add	r31, r0
    321c:	65 9f       	mul	r22, r21
    321e:	f0 0d       	add	r31, r0
    3220:	99 27       	eor	r25, r25
    3222:	72 9f       	mul	r23, r18
    3224:	b0 0d       	add	r27, r0
    3226:	e1 1d       	adc	r30, r1
    3228:	f9 1f       	adc	r31, r25
    322a:	63 9f       	mul	r22, r19
    322c:	b0 0d       	add	r27, r0
    322e:	e1 1d       	adc	r30, r1
    3230:	f9 1f       	adc	r31, r25
    3232:	bd 01       	movw	r22, r26
    3234:	cf 01       	movw	r24, r30
    3236:	11 24       	eor	r1, r1
    3238:	08 95       	ret

0000323a <__prologue_saves__>:
    323a:	2f 92       	push	r2
    323c:	3f 92       	push	r3
    323e:	4f 92       	push	r4
    3240:	5f 92       	push	r5
    3242:	6f 92       	push	r6
    3244:	7f 92       	push	r7
    3246:	8f 92       	push	r8
    3248:	9f 92       	push	r9
    324a:	af 92       	push	r10
    324c:	bf 92       	push	r11
    324e:	cf 92       	push	r12
    3250:	df 92       	push	r13
    3252:	ef 92       	push	r14
    3254:	ff 92       	push	r15
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	ca 1b       	sub	r28, r26
    3264:	db 0b       	sbc	r29, r27
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	f8 94       	cli
    326a:	de bf       	out	0x3e, r29	; 62
    326c:	0f be       	out	0x3f, r0	; 63
    326e:	cd bf       	out	0x3d, r28	; 61
    3270:	09 94       	ijmp

00003272 <__epilogue_restores__>:
    3272:	2a 88       	ldd	r2, Y+18	; 0x12
    3274:	39 88       	ldd	r3, Y+17	; 0x11
    3276:	48 88       	ldd	r4, Y+16	; 0x10
    3278:	5f 84       	ldd	r5, Y+15	; 0x0f
    327a:	6e 84       	ldd	r6, Y+14	; 0x0e
    327c:	7d 84       	ldd	r7, Y+13	; 0x0d
    327e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3280:	9b 84       	ldd	r9, Y+11	; 0x0b
    3282:	aa 84       	ldd	r10, Y+10	; 0x0a
    3284:	b9 84       	ldd	r11, Y+9	; 0x09
    3286:	c8 84       	ldd	r12, Y+8	; 0x08
    3288:	df 80       	ldd	r13, Y+7	; 0x07
    328a:	ee 80       	ldd	r14, Y+6	; 0x06
    328c:	fd 80       	ldd	r15, Y+5	; 0x05
    328e:	0c 81       	ldd	r16, Y+4	; 0x04
    3290:	1b 81       	ldd	r17, Y+3	; 0x03
    3292:	aa 81       	ldd	r26, Y+2	; 0x02
    3294:	b9 81       	ldd	r27, Y+1	; 0x01
    3296:	ce 0f       	add	r28, r30
    3298:	d1 1d       	adc	r29, r1
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	f8 94       	cli
    329e:	de bf       	out	0x3e, r29	; 62
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	cd bf       	out	0x3d, r28	; 61
    32a4:	ed 01       	movw	r28, r26
    32a6:	08 95       	ret

000032a8 <itoa>:
    32a8:	fb 01       	movw	r30, r22
    32aa:	9f 01       	movw	r18, r30
    32ac:	e8 94       	clt
    32ae:	42 30       	cpi	r20, 0x02	; 2
    32b0:	c4 f0       	brlt	.+48     	; 0x32e2 <itoa+0x3a>
    32b2:	45 32       	cpi	r20, 0x25	; 37
    32b4:	b4 f4       	brge	.+44     	; 0x32e2 <itoa+0x3a>
    32b6:	4a 30       	cpi	r20, 0x0A	; 10
    32b8:	29 f4       	brne	.+10     	; 0x32c4 <itoa+0x1c>
    32ba:	97 fb       	bst	r25, 7
    32bc:	1e f4       	brtc	.+6      	; 0x32c4 <itoa+0x1c>
    32be:	90 95       	com	r25
    32c0:	81 95       	neg	r24
    32c2:	9f 4f       	sbci	r25, 0xFF	; 255
    32c4:	64 2f       	mov	r22, r20
    32c6:	77 27       	eor	r23, r23
    32c8:	0e 94 85 19 	call	0x330a	; 0x330a <__udivmodhi4>
    32cc:	80 5d       	subi	r24, 0xD0	; 208
    32ce:	8a 33       	cpi	r24, 0x3A	; 58
    32d0:	0c f0       	brlt	.+2      	; 0x32d4 <itoa+0x2c>
    32d2:	89 5d       	subi	r24, 0xD9	; 217
    32d4:	81 93       	st	Z+, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	00 97       	sbiw	r24, 0x00	; 0
    32da:	a1 f7       	brne	.-24     	; 0x32c4 <itoa+0x1c>
    32dc:	16 f4       	brtc	.+4      	; 0x32e2 <itoa+0x3a>
    32de:	5d e2       	ldi	r21, 0x2D	; 45
    32e0:	51 93       	st	Z+, r21
    32e2:	10 82       	st	Z, r1
    32e4:	c9 01       	movw	r24, r18
    32e6:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <strrev>

000032ea <strrev>:
    32ea:	dc 01       	movw	r26, r24
    32ec:	fc 01       	movw	r30, r24
    32ee:	67 2f       	mov	r22, r23
    32f0:	71 91       	ld	r23, Z+
    32f2:	77 23       	and	r23, r23
    32f4:	e1 f7       	brne	.-8      	; 0x32ee <strrev+0x4>
    32f6:	32 97       	sbiw	r30, 0x02	; 2
    32f8:	04 c0       	rjmp	.+8      	; 0x3302 <strrev+0x18>
    32fa:	7c 91       	ld	r23, X
    32fc:	6d 93       	st	X+, r22
    32fe:	70 83       	st	Z, r23
    3300:	62 91       	ld	r22, -Z
    3302:	ae 17       	cp	r26, r30
    3304:	bf 07       	cpc	r27, r31
    3306:	c8 f3       	brcs	.-14     	; 0x32fa <strrev+0x10>
    3308:	08 95       	ret

0000330a <__udivmodhi4>:
    330a:	aa 1b       	sub	r26, r26
    330c:	bb 1b       	sub	r27, r27
    330e:	51 e1       	ldi	r21, 0x11	; 17
    3310:	07 c0       	rjmp	.+14     	; 0x3320 <__udivmodhi4_ep>

00003312 <__udivmodhi4_loop>:
    3312:	aa 1f       	adc	r26, r26
    3314:	bb 1f       	adc	r27, r27
    3316:	a6 17       	cp	r26, r22
    3318:	b7 07       	cpc	r27, r23
    331a:	10 f0       	brcs	.+4      	; 0x3320 <__udivmodhi4_ep>
    331c:	a6 1b       	sub	r26, r22
    331e:	b7 0b       	sbc	r27, r23

00003320 <__udivmodhi4_ep>:
    3320:	88 1f       	adc	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	5a 95       	dec	r21
    3326:	a9 f7       	brne	.-22     	; 0x3312 <__udivmodhi4_loop>
    3328:	80 95       	com	r24
    332a:	90 95       	com	r25
    332c:	bc 01       	movw	r22, r24
    332e:	cd 01       	movw	r24, r26
    3330:	08 95       	ret

00003332 <_exit>:
    3332:	f8 94       	cli

00003334 <__stop_program>:
    3334:	ff cf       	rjmp	.-2      	; 0x3334 <__stop_program>
