
KEYPAD_TESTED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003144  000031b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fb0  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c74  00000000  00000000  00005188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000060eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009231  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a1b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e7       	ldi	r26, 0x76	; 118
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e7       	ldi	r24, 0x76	; 118
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e7       	ldi	r22, 0x76	; 118
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
 *      Author: ezzat
 */
#include"lcd.h"
#include"keypad.h"
int main(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	uint8 pressed_key;

	LCD_init();
     c98:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LCD_init>
	LCD_displayString("Challenge 2 :-");
     c9c:	80 e6       	ldi	r24, 0x60	; 96
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_displayString>
	LCD_moveCursor(1,0);
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <LCD_moveCursor>
	LCD_displayString("btn :-");
     cac:	8f e6       	ldi	r24, 0x6F	; 111
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_displayString>

	while(1)
	{
		pressed_key=KEYPAD_getPressedKey();
     cb4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <KEYPAD_getPressedKey>
     cb8:	89 83       	std	Y+1, r24	; 0x01
			LCD_integerToString(pressed_key);
		else
			LCD_displayCharacter(pressed_key);

		#else
		LCD_integerToString(pressed_key);
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <LCD_integerToString>

		#endif/*STANDARD_KEYPAD*/

		while(pressed_key==KEYPAD_getPressedKey());
     cc4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <KEYPAD_getPressedKey>
     cc8:	98 2f       	mov	r25, r24
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	98 17       	cp	r25, r24
     cce:	d1 f3       	breq	.-12     	; 0xcc4 <main+0x36>
     cd0:	f1 cf       	rjmp	.-30     	; 0xcb4 <main+0x26>

00000cd2 <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	27 97       	sbiw	r28, 0x07	; 7
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	6a 83       	std	Y+2, r22	; 0x02
     cea:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <GPIO_setupPinDirection+0x22>
     cf2:	d2 c0       	rjmp	.+420    	; 0xe98 <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	09 f0       	breq	.+2      	; 0xcfc <GPIO_setupPinDirection+0x2a>
     cfa:	63 c0       	rjmp	.+198    	; 0xdc2 <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3f 83       	std	Y+7, r19	; 0x07
     d04:	2e 83       	std	Y+6, r18	; 0x06
     d06:	8e 81       	ldd	r24, Y+6	; 0x06
     d08:	9f 81       	ldd	r25, Y+7	; 0x07
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	e9 f0       	breq	.+58     	; 0xd4a <GPIO_setupPinDirection+0x78>
     d10:	2e 81       	ldd	r18, Y+6	; 0x06
     d12:	3f 81       	ldd	r19, Y+7	; 0x07
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	61 f1       	breq	.+88     	; 0xd72 <GPIO_setupPinDirection+0xa0>
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	9f 81       	ldd	r25, Y+7	; 0x07
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	e1 f5       	brne	.+120    	; 0xd9a <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
     d22:	aa e3       	ldi	r26, 0x3A	; 58
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <GPIO_setupPinDirection+0x6e>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <GPIO_setupPinDirection+0x6a>
     d44:	84 2b       	or	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	a7 c0       	rjmp	.+334    	; 0xe98 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <GPIO_setupPinDirection+0x96>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <GPIO_setupPinDirection+0x92>
     d6c:	84 2b       	or	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	93 c0       	rjmp	.+294    	; 0xe98 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
     d72:	a4 e3       	ldi	r26, 0x34	; 52
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e4 e3       	ldi	r30, 0x34	; 52
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <GPIO_setupPinDirection+0xbe>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <GPIO_setupPinDirection+0xba>
     d94:	84 2b       	or	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	7f c0       	rjmp	.+254    	; 0xe98 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
     d9a:	a1 e3       	ldi	r26, 0x31	; 49
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e1 e3       	ldi	r30, 0x31	; 49
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <GPIO_setupPinDirection+0xe6>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <GPIO_setupPinDirection+0xe2>
     dbc:	84 2b       	or	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	6b c0       	rjmp	.+214    	; 0xe98 <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	88 23       	and	r24, r24
     dc6:	09 f0       	breq	.+2      	; 0xdca <GPIO_setupPinDirection+0xf8>
     dc8:	67 c0       	rjmp	.+206    	; 0xe98 <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3d 83       	std	Y+5, r19	; 0x05
     dd2:	2c 83       	std	Y+4, r18	; 0x04
     dd4:	8c 81       	ldd	r24, Y+4	; 0x04
     dd6:	9d 81       	ldd	r25, Y+5	; 0x05
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	f9 f0       	breq	.+62     	; 0xe1c <GPIO_setupPinDirection+0x14a>
     dde:	2c 81       	ldd	r18, Y+4	; 0x04
     de0:	3d 81       	ldd	r19, Y+5	; 0x05
     de2:	22 30       	cpi	r18, 0x02	; 2
     de4:	31 05       	cpc	r19, r1
     de6:	79 f1       	breq	.+94     	; 0xe46 <GPIO_setupPinDirection+0x174>
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	09 f0       	breq	.+2      	; 0xdf2 <GPIO_setupPinDirection+0x120>
     df0:	3f c0       	rjmp	.+126    	; 0xe70 <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
     df2:	aa e3       	ldi	r26, 0x3A	; 58
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	ea e3       	ldi	r30, 0x3A	; 58
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <GPIO_setupPinDirection+0x13e>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <GPIO_setupPinDirection+0x13a>
     e14:	80 95       	com	r24
     e16:	84 23       	and	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	3e c0       	rjmp	.+124    	; 0xe98 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
     e1c:	a7 e3       	ldi	r26, 0x37	; 55
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e3       	ldi	r30, 0x37	; 55
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <GPIO_setupPinDirection+0x168>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <GPIO_setupPinDirection+0x164>
     e3e:	80 95       	com	r24
     e40:	84 23       	and	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	29 c0       	rjmp	.+82     	; 0xe98 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
     e46:	a4 e3       	ldi	r26, 0x34	; 52
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e4 e3       	ldi	r30, 0x34	; 52
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_setupPinDirection+0x192>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_setupPinDirection+0x18e>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
     e70:	a1 e3       	ldi	r26, 0x31	; 49
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e1 e3       	ldi	r30, 0x31	; 49
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <GPIO_setupPinDirection+0x1bc>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <GPIO_setupPinDirection+0x1b8>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
     e98:	27 96       	adiw	r28, 0x07	; 7
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <GPIO_setupPortDirection+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <GPIO_setupPortDirection+0x8>
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	30 f5       	brcc	.+76     	; 0xf0c <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3c 83       	std	Y+4, r19	; 0x04
     ec8:	2b 83       	std	Y+3, r18	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	91 05       	cpc	r25, r1
     ed2:	71 f0       	breq	.+28     	; 0xef0 <GPIO_setupPortDirection+0x46>
     ed4:	2b 81       	ldd	r18, Y+3	; 0x03
     ed6:	3c 81       	ldd	r19, Y+4	; 0x04
     ed8:	22 30       	cpi	r18, 0x02	; 2
     eda:	31 05       	cpc	r19, r1
     edc:	71 f0       	breq	.+28     	; 0xefa <GPIO_setupPortDirection+0x50>
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	79 f4       	brne	.+30     	; 0xf04 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
     ee6:	ea e3       	ldi	r30, 0x3A	; 58
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24
     eee:	0e c0       	rjmp	.+28     	; 0xf0c <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	80 83       	st	Z, r24
     ef8:	09 c0       	rjmp	.+18     	; 0xf0c <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
     efa:	e4 e3       	ldi	r30, 0x34	; 52
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	80 83       	st	Z, r24
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	80 83       	st	Z, r24
			break;
		}
	}
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 direction)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	27 97       	sbiw	r28, 0x07	; 7
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	6a 83       	std	Y+2, r22	; 0x02
     f32:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	88 30       	cpi	r24, 0x08	; 8
     f38:	08 f0       	brcs	.+2      	; 0xf3c <GPIO_writePin+0x22>
     f3a:	d9 c0       	rjmp	.+434    	; 0x10ee <GPIO_writePin+0x1d4>
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	21 f0       	breq	.+8      	; 0xf4a <GPIO_writePin+0x30>
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 23       	and	r24, r24
     f46:	09 f0       	breq	.+2      	; 0xf4a <GPIO_writePin+0x30>
     f48:	d2 c0       	rjmp	.+420    	; 0x10ee <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	09 f0       	breq	.+2      	; 0xf52 <GPIO_writePin+0x38>
     f50:	63 c0       	rjmp	.+198    	; 0x1018 <GPIO_writePin+0xfe>
		{
			switch(port_num)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3f 83       	std	Y+7, r19	; 0x07
     f5a:	2e 83       	std	Y+6, r18	; 0x06
     f5c:	8e 81       	ldd	r24, Y+6	; 0x06
     f5e:	9f 81       	ldd	r25, Y+7	; 0x07
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	e9 f0       	breq	.+58     	; 0xfa0 <GPIO_writePin+0x86>
     f66:	2e 81       	ldd	r18, Y+6	; 0x06
     f68:	3f 81       	ldd	r19, Y+7	; 0x07
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	61 f1       	breq	.+88     	; 0xfc8 <GPIO_writePin+0xae>
     f70:	8e 81       	ldd	r24, Y+6	; 0x06
     f72:	9f 81       	ldd	r25, Y+7	; 0x07
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	e1 f5       	brne	.+120    	; 0xff0 <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
     f78:	ab e3       	ldi	r26, 0x3B	; 59
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e3       	ldi	r30, 0x3B	; 59
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <GPIO_writePin+0x7c>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <GPIO_writePin+0x78>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	a7 c0       	rjmp	.+334    	; 0x10ee <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <GPIO_writePin+0xa4>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <GPIO_writePin+0xa0>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	93 c0       	rjmp	.+294    	; 0x10ee <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
     fc8:	a5 e3       	ldi	r26, 0x35	; 53
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e3       	ldi	r30, 0x35	; 53
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_writePin+0xcc>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_writePin+0xc8>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	7f c0       	rjmp	.+254    	; 0x10ee <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
     ff0:	a2 e3       	ldi	r26, 0x32	; 50
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e2 e3       	ldi	r30, 0x32	; 50
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_writePin+0xf4>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_writePin+0xf0>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	6b c0       	rjmp	.+214    	; 0x10ee <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	88 23       	and	r24, r24
    101c:	09 f0       	breq	.+2      	; 0x1020 <GPIO_writePin+0x106>
    101e:	67 c0       	rjmp	.+206    	; 0x10ee <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3d 83       	std	Y+5, r19	; 0x05
    1028:	2c 83       	std	Y+4, r18	; 0x04
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	f9 f0       	breq	.+62     	; 0x1072 <GPIO_writePin+0x158>
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	79 f1       	breq	.+94     	; 0x109c <GPIO_writePin+0x182>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	09 f0       	breq	.+2      	; 0x1048 <GPIO_writePin+0x12e>
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    1048:	ab e3       	ldi	r26, 0x3B	; 59
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	eb e3       	ldi	r30, 0x3B	; 59
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_writePin+0x14c>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_writePin+0x148>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	3e c0       	rjmp	.+124    	; 0x10ee <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    1072:	a8 e3       	ldi	r26, 0x38	; 56
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e8 e3       	ldi	r30, 0x38	; 56
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_writePin+0x176>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_writePin+0x172>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	29 c0       	rjmp	.+82     	; 0x10ee <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    109c:	a5 e3       	ldi	r26, 0x35	; 53
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e5 e3       	ldi	r30, 0x35	; 53
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <GPIO_writePin+0x1a0>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <GPIO_writePin+0x19c>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	14 c0       	rjmp	.+40     	; 0x10ee <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    10c6:	a2 e3       	ldi	r26, 0x32	; 50
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e2 e3       	ldi	r30, 0x32	; 50
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_writePin+0x1ca>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_writePin+0x1c6>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    10ee:	27 96       	adiw	r28, 0x07	; 7
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	08 95       	ret

00001100 <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,uint8 direction)
{
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <GPIO_writePort+0x6>
    1106:	00 d0       	rcall	.+0      	; 0x1108 <GPIO_writePort+0x8>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	30 f5       	brcc	.+76     	; 0x1162 <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3c 83       	std	Y+4, r19	; 0x04
    111e:	2b 83       	std	Y+3, r18	; 0x03
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	71 f0       	breq	.+28     	; 0x1146 <GPIO_writePort+0x46>
    112a:	2b 81       	ldd	r18, Y+3	; 0x03
    112c:	3c 81       	ldd	r19, Y+4	; 0x04
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	71 f0       	breq	.+28     	; 0x1150 <GPIO_writePort+0x50>
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	79 f4       	brne	.+30     	; 0x115a <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    113c:	eb e3       	ldi	r30, 0x3B	; 59
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24
    1144:	0e c0       	rjmp	.+28     	; 0x1162 <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    1146:	e8 e3       	ldi	r30, 0x38	; 56
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	80 83       	st	Z, r24
    114e:	09 c0       	rjmp	.+18     	; 0x1162 <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    1150:	e5 e3       	ldi	r30, 0x35	; 53
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	80 83       	st	Z, r24
    1158:	04 c0       	rjmp	.+8      	; 0x1162 <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    115a:	e2 e3       	ldi	r30, 0x32	; 50
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
			break;
		}
	}
}
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_readPin+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <GPIO_readPin+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	10 f0       	brcs	.+4      	; 0x118c <GPIO_readPin+0x1c>
	{
		return 0;
    1188:	1d 82       	std	Y+5, r1	; 0x05
    118a:	5f c0       	rjmp	.+190    	; 0x124a <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3c 83       	std	Y+4, r19	; 0x04
    1194:	2b 83       	std	Y+3, r18	; 0x03
    1196:	4b 81       	ldd	r20, Y+3	; 0x03
    1198:	5c 81       	ldd	r21, Y+4	; 0x04
    119a:	41 30       	cpi	r20, 0x01	; 1
    119c:	51 05       	cpc	r21, r1
    119e:	e9 f0       	breq	.+58     	; 0x11da <GPIO_readPin+0x6a>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	91 05       	cpc	r25, r1
    11a8:	59 f1       	breq	.+86     	; 0x1200 <GPIO_readPin+0x90>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	21 15       	cp	r18, r1
    11b0:	31 05       	cpc	r19, r1
    11b2:	c9 f5       	brne	.+114    	; 0x1226 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    11b4:	e9 e3       	ldi	r30, 0x39	; 57
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a9 01       	movw	r20, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_readPin+0x5c>
    11c8:	55 95       	asr	r21
    11ca:	47 95       	ror	r20
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_readPin+0x58>
    11d0:	ca 01       	movw	r24, r20
    11d2:	58 2f       	mov	r21, r24
    11d4:	51 70       	andi	r21, 0x01	; 1
    11d6:	5d 83       	std	Y+5, r21	; 0x05
    11d8:	38 c0       	rjmp	.+112    	; 0x124a <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    11da:	e6 e3       	ldi	r30, 0x36	; 54
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_readPin+0x82>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_readPin+0x7e>
    11f6:	ca 01       	movw	r24, r20
    11f8:	58 2f       	mov	r21, r24
    11fa:	51 70       	andi	r21, 0x01	; 1
    11fc:	5d 83       	std	Y+5, r21	; 0x05
    11fe:	25 c0       	rjmp	.+74     	; 0x124a <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    1200:	e3 e3       	ldi	r30, 0x33	; 51
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_readPin+0xa8>
    1214:	55 95       	asr	r21
    1216:	47 95       	ror	r20
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_readPin+0xa4>
    121c:	ca 01       	movw	r24, r20
    121e:	58 2f       	mov	r21, r24
    1220:	51 70       	andi	r21, 0x01	; 1
    1222:	5d 83       	std	Y+5, r21	; 0x05
    1224:	12 c0       	rjmp	.+36     	; 0x124a <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    1226:	e0 e3       	ldi	r30, 0x30	; 48
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	a9 01       	movw	r20, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_readPin+0xce>
    123a:	55 95       	asr	r21
    123c:	47 95       	ror	r20
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_readPin+0xca>
    1242:	ca 01       	movw	r24, r20
    1244:	58 2f       	mov	r21, r24
    1246:	51 70       	andi	r21, 0x01	; 1
    1248:	5d 83       	std	Y+5, r21	; 0x05
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <GPIO_readPort+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <GPIO_readPort+0x8>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	10 f0       	brcs	.+4      	; 0x1274 <GPIO_readPort+0x18>
	{
		return 0;
    1270:	1c 82       	std	Y+4, r1	; 0x04
    1272:	26 c0       	rjmp	.+76     	; 0x12c0 <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	3b 83       	std	Y+3, r19	; 0x03
    127c:	2a 83       	std	Y+2, r18	; 0x02
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	9b 81       	ldd	r25, Y+3	; 0x03
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	91 05       	cpc	r25, r1
    1286:	71 f0       	breq	.+28     	; 0x12a4 <GPIO_readPort+0x48>
    1288:	2a 81       	ldd	r18, Y+2	; 0x02
    128a:	3b 81       	ldd	r19, Y+3	; 0x03
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	71 f0       	breq	.+28     	; 0x12ae <GPIO_readPort+0x52>
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	79 f4       	brne	.+30     	; 0x12b8 <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    129a:	e9 e3       	ldi	r30, 0x39	; 57
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	90 81       	ld	r25, Z
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	0e c0       	rjmp	.+28     	; 0x12c0 <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    12a4:	e6 e3       	ldi	r30, 0x36	; 54
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	20 81       	ld	r18, Z
    12aa:	2c 83       	std	Y+4, r18	; 0x04
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    12ae:	e3 e3       	ldi	r30, 0x33	; 51
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	30 81       	ld	r19, Z
    12b4:	3c 83       	std	Y+4, r19	; 0x04
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <GPIO_readPort+0x64>
		default:
			return PINC;
    12b8:	e3 e3       	ldi	r30, 0x33	; 51
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8c 83       	std	Y+4, r24	; 0x04
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
uint8 KEYPAD_getPressedKey(void)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <KEYPAD_getPressedKey+0x6>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	64 e0       	ldi	r22, 0x04	; 4
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	65 e0       	ldi	r22, 0x05	; 5
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	66 e0       	ldi	r22, 0x06	; 6
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	67 e0       	ldi	r22, 0x07	; 7
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	62 e0       	ldi	r22, 0x02	; 2
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	64 e0       	ldi	r22, 0x04	; 4
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
#if (KEYPAD_NUM_COLS==4)
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	65 e0       	ldi	r22, 0x05	; 5
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    132a:	1a 82       	std	Y+2, r1	; 0x02
    132c:	3c c0       	rjmp	.+120    	; 0x13a6 <KEYPAD_getPressedKey+0xd6>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	98 2f       	mov	r25, r24
    1332:	9c 5f       	subi	r25, 0xFC	; 252
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	69 2f       	mov	r22, r25
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	98 2f       	mov	r25, r24
    1342:	9c 5f       	subi	r25, 0xFC	; 252
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	69 2f       	mov	r22, r25
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	1c c0       	rjmp	.+56     	; 0x138a <KEYPAD_getPressedKey+0xba>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	98 2f       	mov	r25, r24
    1356:	9e 5f       	subi	r25, 0xFE	; 254
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	69 2f       	mov	r22, r25
    135c:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_readPin>
    1360:	88 23       	and	r24, r24
    1362:	81 f4       	brne	.+32     	; 0x1384 <KEYPAD_getPressedKey+0xb4>
					#endif

					#elif (KEYPAD_NUM_COLS == 4)

					#ifdef STANDARD_KEYPAD
						return ((row*KEYPAD_NUM_COLS)+col+1);
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	98 2f       	mov	r25, r24
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	89 0f       	add	r24, r25
    1378:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	8f 5f       	subi	r24, 0xFF	; 255
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	08 f3       	brcs	.-62     	; 0x1352 <KEYPAD_getPressedKey+0x82>
					#endif
					#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	98 2f       	mov	r25, r24
    1394:	9c 5f       	subi	r25, 0xFC	; 252
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	69 2f       	mov	r22, r25
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	08 f2       	brcs	.-126    	; 0x132e <KEYPAD_getPressedKey+0x5e>
    13ac:	be cf       	rjmp	.-132    	; 0x132a <KEYPAD_getPressedKey+0x5a>

000013ae <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	6c 97       	sbiw	r28, 0x1c	; 28
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	62 e0       	ldi	r22, 0x02	; 2
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	a0 ea       	ldi	r26, 0xA0	; 160
    13dc:	b1 e4       	ldi	r27, 0x41	; 65
    13de:	89 8f       	std	Y+25, r24	; 0x19
    13e0:	9a 8f       	std	Y+26, r25	; 0x1a
    13e2:	ab 8f       	std	Y+27, r26	; 0x1b
    13e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e6:	69 8d       	ldd	r22, Y+25	; 0x19
    13e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	4a e7       	ldi	r20, 0x7A	; 122
    13f4:	55 e4       	ldi	r21, 0x45	; 69
    13f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	8d 8b       	std	Y+21, r24	; 0x15
    1400:	9e 8b       	std	Y+22, r25	; 0x16
    1402:	af 8b       	std	Y+23, r26	; 0x17
    1404:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1406:	6d 89       	ldd	r22, Y+21	; 0x15
    1408:	7e 89       	ldd	r23, Y+22	; 0x16
    140a:	8f 89       	ldd	r24, Y+23	; 0x17
    140c:	98 8d       	ldd	r25, Y+24	; 0x18
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e8       	ldi	r20, 0x80	; 128
    1414:	5f e3       	ldi	r21, 0x3F	; 63
    1416:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    141a:	88 23       	and	r24, r24
    141c:	2c f4       	brge	.+10     	; 0x1428 <LCD_init+0x7a>
		__ticks = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	3f c0       	rjmp	.+126    	; 0x14a6 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1428:	6d 89       	ldd	r22, Y+21	; 0x15
    142a:	7e 89       	ldd	r23, Y+22	; 0x16
    142c:	8f 89       	ldd	r24, Y+23	; 0x17
    142e:	98 8d       	ldd	r25, Y+24	; 0x18
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	3f ef       	ldi	r19, 0xFF	; 255
    1434:	4f e7       	ldi	r20, 0x7F	; 127
    1436:	57 e4       	ldi	r21, 0x47	; 71
    1438:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    143c:	18 16       	cp	r1, r24
    143e:	4c f5       	brge	.+82     	; 0x1492 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1440:	69 8d       	ldd	r22, Y+25	; 0x19
    1442:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1446:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e2       	ldi	r20, 0x20	; 32
    144e:	51 e4       	ldi	r21, 0x41	; 65
    1450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9c 8b       	std	Y+20, r25	; 0x14
    1466:	8b 8b       	std	Y+19, r24	; 0x13
    1468:	0f c0       	rjmp	.+30     	; 0x1488 <LCD_init+0xda>
    146a:	80 e9       	ldi	r24, 0x90	; 144
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	9a 8b       	std	Y+18, r25	; 0x12
    1470:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	9a 89       	ldd	r25, Y+18	; 0x12
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <LCD_init+0xc8>
    147a:	9a 8b       	std	Y+18, r25	; 0x12
    147c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147e:	8b 89       	ldd	r24, Y+19	; 0x13
    1480:	9c 89       	ldd	r25, Y+20	; 0x14
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	9c 8b       	std	Y+20, r25	; 0x14
    1486:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1488:	8b 89       	ldd	r24, Y+19	; 0x13
    148a:	9c 89       	ldd	r25, Y+20	; 0x14
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	69 f7       	brne	.-38     	; 0x146a <LCD_init+0xbc>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1492:	6d 89       	ldd	r22, Y+21	; 0x15
    1494:	7e 89       	ldd	r23, Y+22	; 0x16
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	9c 8b       	std	Y+20, r25	; 0x14
    14a4:	8b 8b       	std	Y+19, r24	; 0x13
    14a6:	8b 89       	ldd	r24, Y+19	; 0x13
    14a8:	9c 89       	ldd	r25, Y+20	; 0x14
    14aa:	98 8b       	std	Y+16, r25	; 0x10
    14ac:	8f 87       	std	Y+15, r24	; 0x0f
    14ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b0:	98 89       	ldd	r25, Y+16	; 0x10
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <LCD_init+0x104>
    14b6:	98 8b       	std	Y+16, r25	; 0x10
    14b8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_BIT_MODE == 4)

	/* 2 - Configure the data pins as output port */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,PIN_OUTPUT);
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	63 e0       	ldi	r22, 0x03	; 3
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,PIN_OUTPUT);
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	64 e0       	ldi	r22, 0x04	; 4
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,PIN_OUTPUT);
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	65 e0       	ldi	r22, 0x05	; 5
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,PIN_OUTPUT);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	66 e0       	ldi	r22, 0x06	; 6
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	0e 94 69 06 	call	0xcd2	; 0xcd2 <GPIO_setupPinDirection>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a0 ea       	ldi	r26, 0xA0	; 160
    14e8:	b1 e4       	ldi	r27, 0x41	; 65
    14ea:	8b 87       	std	Y+11, r24	; 0x0b
    14ec:	9c 87       	std	Y+12, r25	; 0x0c
    14ee:	ad 87       	std	Y+13, r26	; 0x0d
    14f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a e7       	ldi	r20, 0x7A	; 122
    1500:	55 e4       	ldi	r21, 0x45	; 69
    1502:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8f 83       	std	Y+7, r24	; 0x07
    150c:	98 87       	std	Y+8, r25	; 0x08
    150e:	a9 87       	std	Y+9, r26	; 0x09
    1510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1512:	6f 81       	ldd	r22, Y+7	; 0x07
    1514:	78 85       	ldd	r23, Y+8	; 0x08
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	2c f4       	brge	.+10     	; 0x1534 <LCD_init+0x186>
		__ticks = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	3f c0       	rjmp	.+126    	; 0x15b2 <LCD_init+0x204>
	else if (__tmp > 65535)
    1534:	6f 81       	ldd	r22, Y+7	; 0x07
    1536:	78 85       	ldd	r23, Y+8	; 0x08
    1538:	89 85       	ldd	r24, Y+9	; 0x09
    153a:	9a 85       	ldd	r25, Y+10	; 0x0a
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	4c f5       	brge	.+82     	; 0x159e <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	6b 85       	ldd	r22, Y+11	; 0x0b
    154e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <LCD_init+0x1e6>
    1576:	80 e9       	ldi	r24, 0x90	; 144
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	9c 83       	std	Y+4, r25	; 0x04
    157c:	8b 83       	std	Y+3, r24	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <LCD_init+0x1d4>
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f7       	brne	.-38     	; 0x1576 <LCD_init+0x1c8>
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159e:	6f 81       	ldd	r22, Y+7	; 0x07
    15a0:	78 85       	ldd	r23, Y+8	; 0x08
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <LCD_init+0x210>
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 3.2 - send commands 0x33 0x32 0x28 to init lcd*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    15c6:	83 e3       	ldi	r24, 0x33	; 51
    15c8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    15cc:	82 e3       	ldi	r24, 0x32	; 50
    15ce:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    15d2:	88 e2       	ldi	r24, 0x28	; 40
    15d4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    15d8:	8c e0       	ldi	r24, 0x0C	; 12
    15da:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    15e4:	6c 96       	adiw	r28, 0x1c	; 28
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	c5 59       	subi	r28, 0x95	; 149
    1604:	d0 40       	sbci	r29, 0x00	; 0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	fe 01       	movw	r30, r28
    1612:	eb 56       	subi	r30, 0x6B	; 107
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    1622:	fe 01       	movw	r30, r28
    1624:	ef 56       	subi	r30, 0x6F	; 111
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a0 e8       	ldi	r26, 0x80	; 128
    162e:	bf e3       	ldi	r27, 0x3F	; 63
    1630:	80 83       	st	Z, r24
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	a2 83       	std	Z+2, r26	; 0x02
    1636:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1638:	8e 01       	movw	r16, r28
    163a:	03 57       	subi	r16, 0x73	; 115
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	fe 01       	movw	r30, r28
    1640:	ef 56       	subi	r30, 0x6F	; 111
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	60 81       	ld	r22, Z
    1646:	71 81       	ldd	r23, Z+1	; 0x01
    1648:	82 81       	ldd	r24, Z+2	; 0x02
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	2b ea       	ldi	r18, 0xAB	; 171
    164e:	3a ea       	ldi	r19, 0xAA	; 170
    1650:	4a ea       	ldi	r20, 0xAA	; 170
    1652:	50 e4       	ldi	r21, 0x40	; 64
    1654:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	80 83       	st	Z, r24
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	a2 83       	std	Z+2, r26	; 0x02
    1664:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1666:	fe 01       	movw	r30, r28
    1668:	e3 57       	subi	r30, 0x73	; 115
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	34 f4       	brge	.+12     	; 0x1690 <LCD_sendCommand+0x9a>
		__ticks = 1;
    1684:	fe 01       	movw	r30, r28
    1686:	e4 57       	subi	r30, 0x74	; 116
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 83       	st	Z, r24
    168e:	e0 c0       	rjmp	.+448    	; 0x1850 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    1690:	fe 01       	movw	r30, r28
    1692:	e3 57       	subi	r30, 0x73	; 115
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	53 e4       	ldi	r21, 0x43	; 67
    16a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	0c f0       	brlt	.+2      	; 0x16b0 <LCD_sendCommand+0xba>
    16ae:	c0 c0       	rjmp	.+384    	; 0x1830 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    16b0:	fe 01       	movw	r30, r28
    16b2:	ef 56       	subi	r30, 0x6F	; 111
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a e7       	ldi	r20, 0x7A	; 122
    16c4:	54 e4       	ldi	r21, 0x44	; 68
    16c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	fe 01       	movw	r30, r28
    16d0:	e8 57       	subi	r30, 0x78	; 120
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 83       	st	Z, r24
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	a2 83       	std	Z+2, r26	; 0x02
    16da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	8e 01       	movw	r16, r28
    16de:	0c 57       	subi	r16, 0x7C	; 124
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	fe 01       	movw	r30, r28
    16e4:	e8 57       	subi	r30, 0x78	; 120
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a e7       	ldi	r20, 0x7A	; 122
    16f6:	55 e4       	ldi	r21, 0x45	; 69
    16f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	f8 01       	movw	r30, r16
    1702:	80 83       	st	Z, r24
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	a2 83       	std	Z+2, r26	; 0x02
    1708:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    170a:	fe 01       	movw	r30, r28
    170c:	ec 57       	subi	r30, 0x7C	; 124
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e8       	ldi	r20, 0x80	; 128
    171e:	5f e3       	ldi	r21, 0x3F	; 63
    1720:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1724:	88 23       	and	r24, r24
    1726:	44 f4       	brge	.+16     	; 0x1738 <LCD_sendCommand+0x142>
		__ticks = 1;
    1728:	fe 01       	movw	r30, r28
    172a:	ee 57       	subi	r30, 0x7E	; 126
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
    1736:	64 c0       	rjmp	.+200    	; 0x1800 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    1738:	fe 01       	movw	r30, r28
    173a:	ec 57       	subi	r30, 0x7C	; 124
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	3f ef       	ldi	r19, 0xFF	; 255
    174a:	4f e7       	ldi	r20, 0x7F	; 127
    174c:	57 e4       	ldi	r21, 0x47	; 71
    174e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1752:	18 16       	cp	r1, r24
    1754:	0c f0       	brlt	.+2      	; 0x1758 <LCD_sendCommand+0x162>
    1756:	43 c0       	rjmp	.+134    	; 0x17de <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1758:	fe 01       	movw	r30, r28
    175a:	e8 57       	subi	r30, 0x78	; 120
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	60 81       	ld	r22, Z
    1760:	71 81       	ldd	r23, Z+1	; 0x01
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e2       	ldi	r20, 0x20	; 32
    176c:	51 e4       	ldi	r21, 0x41	; 65
    176e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8e 01       	movw	r16, r28
    1778:	0e 57       	subi	r16, 0x7E	; 126
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	f8 01       	movw	r30, r16
    178a:	91 83       	std	Z+1, r25	; 0x01
    178c:	80 83       	st	Z, r24
    178e:	1f c0       	rjmp	.+62     	; 0x17ce <LCD_sendCommand+0x1d8>
    1790:	fe 01       	movw	r30, r28
    1792:	e0 58       	subi	r30, 0x80	; 128
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 e9       	ldi	r24, 0x90	; 144
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
    179e:	fe 01       	movw	r30, r28
    17a0:	e0 58       	subi	r30, 0x80	; 128
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_sendCommand+0x1b2>
    17ac:	fe 01       	movw	r30, r28
    17ae:	e0 58       	subi	r30, 0x80	; 128
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	91 83       	std	Z+1, r25	; 0x01
    17b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	de 01       	movw	r26, r28
    17b8:	ae 57       	subi	r26, 0x7E	; 126
    17ba:	bf 4f       	sbci	r27, 0xFF	; 255
    17bc:	fe 01       	movw	r30, r28
    17be:	ee 57       	subi	r30, 0x7E	; 126
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 81       	ld	r24, Z
    17c4:	91 81       	ldd	r25, Z+1	; 0x01
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	11 96       	adiw	r26, 0x01	; 1
    17ca:	9c 93       	st	X, r25
    17cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	fe 01       	movw	r30, r28
    17d0:	ee 57       	subi	r30, 0x7E	; 126
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	d1 f6       	brne	.-76     	; 0x1790 <LCD_sendCommand+0x19a>
    17dc:	4b c0       	rjmp	.+150    	; 0x1874 <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	8e 01       	movw	r16, r28
    17e0:	0e 57       	subi	r16, 0x7E	; 126
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	fe 01       	movw	r30, r28
    17e6:	ec 57       	subi	r30, 0x7C	; 124
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	f8 01       	movw	r30, r16
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	de 01       	movw	r26, r28
    1802:	a2 58       	subi	r26, 0x82	; 130
    1804:	bf 4f       	sbci	r27, 0xFF	; 255
    1806:	fe 01       	movw	r30, r28
    1808:	ee 57       	subi	r30, 0x7E	; 126
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	9c 93       	st	X, r25
    1814:	8e 93       	st	-X, r24
    1816:	fe 01       	movw	r30, r28
    1818:	e2 58       	subi	r30, 0x82	; 130
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <LCD_sendCommand+0x22a>
    1824:	fe 01       	movw	r30, r28
    1826:	e2 58       	subi	r30, 0x82	; 130
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	22 c0       	rjmp	.+68     	; 0x1874 <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1830:	8e 01       	movw	r16, r28
    1832:	04 57       	subi	r16, 0x74	; 116
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	fe 01       	movw	r30, r28
    1838:	e3 57       	subi	r30, 0x73	; 115
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	60 81       	ld	r22, Z
    183e:	71 81       	ldd	r23, Z+1	; 0x01
    1840:	82 81       	ldd	r24, Z+2	; 0x02
    1842:	93 81       	ldd	r25, Z+3	; 0x03
    1844:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	f8 01       	movw	r30, r16
    184e:	80 83       	st	Z, r24
    1850:	de 01       	movw	r26, r28
    1852:	a3 58       	subi	r26, 0x83	; 131
    1854:	bf 4f       	sbci	r27, 0xFF	; 255
    1856:	fe 01       	movw	r30, r28
    1858:	e4 57       	subi	r30, 0x74	; 116
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1860:	fe 01       	movw	r30, r28
    1862:	e3 58       	subi	r30, 0x83	; 131
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 81       	ld	r24, Z
    1868:	8a 95       	dec	r24
    186a:	f1 f7       	brne	.-4      	; 0x1868 <LCD_sendCommand+0x272>
    186c:	fe 01       	movw	r30, r28
    186e:	e3 58       	subi	r30, 0x83	; 131
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	62 e0       	ldi	r22, 0x02	; 2
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    187e:	fe 01       	movw	r30, r28
    1880:	e7 58       	subi	r30, 0x87	; 135
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e8       	ldi	r26, 0x80	; 128
    188a:	bf e3       	ldi	r27, 0x3F	; 63
    188c:	80 83       	st	Z, r24
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	a2 83       	std	Z+2, r26	; 0x02
    1892:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1894:	8e 01       	movw	r16, r28
    1896:	0b 58       	subi	r16, 0x8B	; 139
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	fe 01       	movw	r30, r28
    189c:	e7 58       	subi	r30, 0x87	; 135
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	2b ea       	ldi	r18, 0xAB	; 171
    18aa:	3a ea       	ldi	r19, 0xAA	; 170
    18ac:	4a ea       	ldi	r20, 0xAA	; 170
    18ae:	50 e4       	ldi	r21, 0x40	; 64
    18b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	f8 01       	movw	r30, r16
    18ba:	80 83       	st	Z, r24
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	a2 83       	std	Z+2, r26	; 0x02
    18c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c2:	fe 01       	movw	r30, r28
    18c4:	eb 58       	subi	r30, 0x8B	; 139
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	60 81       	ld	r22, Z
    18ca:	71 81       	ldd	r23, Z+1	; 0x01
    18cc:	82 81       	ldd	r24, Z+2	; 0x02
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	34 f4       	brge	.+12     	; 0x18ec <LCD_sendCommand+0x2f6>
		__ticks = 1;
    18e0:	fe 01       	movw	r30, r28
    18e2:	ec 58       	subi	r30, 0x8C	; 140
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 83       	st	Z, r24
    18ea:	e0 c0       	rjmp	.+448    	; 0x1aac <LCD_sendCommand+0x4b6>
	else if (__tmp > 255)
    18ec:	fe 01       	movw	r30, r28
    18ee:	eb 58       	subi	r30, 0x8B	; 139
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	53 e4       	ldi	r21, 0x43	; 67
    1902:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	0c f0       	brlt	.+2      	; 0x190c <LCD_sendCommand+0x316>
    190a:	c0 c0       	rjmp	.+384    	; 0x1a8c <LCD_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    190c:	fe 01       	movw	r30, r28
    190e:	e7 58       	subi	r30, 0x87	; 135
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	60 81       	ld	r22, Z
    1914:	71 81       	ldd	r23, Z+1	; 0x01
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4a e7       	ldi	r20, 0x7A	; 122
    1920:	54 e4       	ldi	r21, 0x44	; 68
    1922:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	fe 01       	movw	r30, r28
    192c:	e0 59       	subi	r30, 0x90	; 144
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 83       	st	Z, r24
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	a2 83       	std	Z+2, r26	; 0x02
    1936:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1938:	8e 01       	movw	r16, r28
    193a:	04 59       	subi	r16, 0x94	; 148
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	fe 01       	movw	r30, r28
    1940:	e0 59       	subi	r30, 0x90	; 144
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a e7       	ldi	r20, 0x7A	; 122
    1952:	55 e4       	ldi	r21, 0x45	; 69
    1954:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	f8 01       	movw	r30, r16
    195e:	80 83       	st	Z, r24
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	a2 83       	std	Z+2, r26	; 0x02
    1964:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1966:	fe 01       	movw	r30, r28
    1968:	e4 59       	subi	r30, 0x94	; 148
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	44 f4       	brge	.+16     	; 0x1994 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1984:	fe 01       	movw	r30, r28
    1986:	e6 59       	subi	r30, 0x96	; 150
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	64 c0       	rjmp	.+200    	; 0x1a5c <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1994:	fe 01       	movw	r30, r28
    1996:	e4 59       	subi	r30, 0x94	; 148
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	82 81       	ldd	r24, Z+2	; 0x02
    19a0:	93 81       	ldd	r25, Z+3	; 0x03
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	3f ef       	ldi	r19, 0xFF	; 255
    19a6:	4f e7       	ldi	r20, 0x7F	; 127
    19a8:	57 e4       	ldi	r21, 0x47	; 71
    19aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ae:	18 16       	cp	r1, r24
    19b0:	0c f0       	brlt	.+2      	; 0x19b4 <LCD_sendCommand+0x3be>
    19b2:	43 c0       	rjmp	.+134    	; 0x1a3a <LCD_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	fe 01       	movw	r30, r28
    19b6:	e0 59       	subi	r30, 0x90	; 144
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8e 01       	movw	r16, r28
    19d4:	06 59       	subi	r16, 0x96	; 150
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	f8 01       	movw	r30, r16
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
    19ea:	1f c0       	rjmp	.+62     	; 0x1a2a <LCD_sendCommand+0x434>
    19ec:	fe 01       	movw	r30, r28
    19ee:	e8 59       	subi	r30, 0x98	; 152
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 e9       	ldi	r24, 0x90	; 144
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19fa:	fe 01       	movw	r30, r28
    19fc:	e8 59       	subi	r30, 0x98	; 152
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_sendCommand+0x40e>
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e8 59       	subi	r30, 0x98	; 152
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	de 01       	movw	r26, r28
    1a14:	a6 59       	subi	r26, 0x96	; 150
    1a16:	bf 4f       	sbci	r27, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e6 59       	subi	r30, 0x96	; 150
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	11 96       	adiw	r26, 0x01	; 1
    1a26:	9c 93       	st	X, r25
    1a28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e6 59       	subi	r30, 0x96	; 150
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	80 81       	ld	r24, Z
    1a32:	91 81       	ldd	r25, Z+1	; 0x01
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	d1 f6       	brne	.-76     	; 0x19ec <LCD_sendCommand+0x3f6>
    1a38:	4b c0       	rjmp	.+150    	; 0x1ad0 <LCD_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	8e 01       	movw	r16, r28
    1a3c:	06 59       	subi	r16, 0x96	; 150
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	fe 01       	movw	r30, r28
    1a42:	e4 59       	subi	r30, 0x94	; 148
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	f8 01       	movw	r30, r16
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
    1a5c:	de 01       	movw	r26, r28
    1a5e:	aa 59       	subi	r26, 0x9A	; 154
    1a60:	bf 4f       	sbci	r27, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	e6 59       	subi	r30, 0x96	; 150
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	11 96       	adiw	r26, 0x01	; 1
    1a6e:	9c 93       	st	X, r25
    1a70:	8e 93       	st	-X, r24
    1a72:	fe 01       	movw	r30, r28
    1a74:	ea 59       	subi	r30, 0x9A	; 154
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 81       	ld	r24, Z
    1a7a:	91 81       	ldd	r25, Z+1	; 0x01
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_sendCommand+0x486>
    1a80:	fe 01       	movw	r30, r28
    1a82:	ea 59       	subi	r30, 0x9A	; 154
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24
    1a8a:	22 c0       	rjmp	.+68     	; 0x1ad0 <LCD_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	0c 58       	subi	r16, 0x8C	; 140
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	fe 01       	movw	r30, r28
    1a94:	eb 58       	subi	r30, 0x8B	; 139
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	80 83       	st	Z, r24
    1aac:	de 01       	movw	r26, r28
    1aae:	ab 59       	subi	r26, 0x9B	; 155
    1ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ec 58       	subi	r30, 0x8C	; 140
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1abc:	fe 01       	movw	r30, r28
    1abe:	eb 59       	subi	r30, 0x9B	; 155
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8a 95       	dec	r24
    1ac6:	f1 f7       	brne	.-4      	; 0x1ac4 <LCD_sendCommand+0x4ce>
    1ac8:	fe 01       	movw	r30, r28
    1aca:	eb 59       	subi	r30, 0x9B	; 155
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 83       	st	Z, r24
	_delay_us(1);

	#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,4));
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	eb 56       	subi	r30, 0x6B	; 107
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	82 95       	swap	r24
    1ada:	8f 70       	andi	r24, 0x0F	; 15
    1adc:	98 2f       	mov	r25, r24
    1ade:	91 70       	andi	r25, 0x01	; 1
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	63 e0       	ldi	r22, 0x03	; 3
    1ae4:	49 2f       	mov	r20, r25
    1ae6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,5));
    1aea:	fe 01       	movw	r30, r28
    1aec:	eb 56       	subi	r30, 0x6B	; 107
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 81       	ld	r24, Z
    1af2:	82 95       	swap	r24
    1af4:	86 95       	lsr	r24
    1af6:	87 70       	andi	r24, 0x07	; 7
    1af8:	98 2f       	mov	r25, r24
    1afa:	91 70       	andi	r25, 0x01	; 1
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	64 e0       	ldi	r22, 0x04	; 4
    1b00:	49 2f       	mov	r20, r25
    1b02:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,6));
    1b06:	fe 01       	movw	r30, r28
    1b08:	eb 56       	subi	r30, 0x6B	; 107
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	80 81       	ld	r24, Z
    1b0e:	82 95       	swap	r24
    1b10:	86 95       	lsr	r24
    1b12:	86 95       	lsr	r24
    1b14:	83 70       	andi	r24, 0x03	; 3
    1b16:	98 2f       	mov	r25, r24
    1b18:	91 70       	andi	r25, 0x01	; 1
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	65 e0       	ldi	r22, 0x05	; 5
    1b1e:	49 2f       	mov	r20, r25
    1b20:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,7));
    1b24:	fe 01       	movw	r30, r28
    1b26:	eb 56       	subi	r30, 0x6B	; 107
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	99 27       	eor	r25, r25
    1b32:	99 1f       	adc	r25, r25
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	66 e0       	ldi	r22, 0x06	; 6
    1b38:	49 2f       	mov	r20, r25
    1b3a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    1b3e:	fe 01       	movw	r30, r28
    1b40:	ef 59       	subi	r30, 0x9F	; 159
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	bf e3       	ldi	r27, 0x3F	; 63
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	a2 83       	std	Z+2, r26	; 0x02
    1b52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	8e 01       	movw	r16, r28
    1b56:	03 5a       	subi	r16, 0xA3	; 163
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	ef 59       	subi	r30, 0x9F	; 159
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a e7       	ldi	r20, 0x7A	; 122
    1b6e:	55 e4       	ldi	r21, 0x45	; 69
    1b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	f8 01       	movw	r30, r16
    1b7a:	80 83       	st	Z, r24
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	a2 83       	std	Z+2, r26	; 0x02
    1b80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b82:	fe 01       	movw	r30, r28
    1b84:	e3 5a       	subi	r30, 0xA3	; 163
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	5f e3       	ldi	r21, 0x3F	; 63
    1b98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b9c:	88 23       	and	r24, r24
    1b9e:	44 f4       	brge	.+16     	; 0x1bb0 <LCD_sendCommand+0x5ba>
		__ticks = 1;
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e5 5a       	subi	r30, 0xA5	; 165
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
    1bae:	64 c0       	rjmp	.+200    	; 0x1c78 <LCD_sendCommand+0x682>
	else if (__tmp > 65535)
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e3 5a       	subi	r30, 0xA3	; 163
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	0c f0       	brlt	.+2      	; 0x1bd0 <LCD_sendCommand+0x5da>
    1bce:	43 c0       	rjmp	.+134    	; 0x1c56 <LCD_sendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ef 59       	subi	r30, 0x9F	; 159
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	8e 01       	movw	r16, r28
    1bf0:	05 5a       	subi	r16, 0xA5	; 165
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	f8 01       	movw	r30, r16
    1c02:	91 83       	std	Z+1, r25	; 0x01
    1c04:	80 83       	st	Z, r24
    1c06:	1f c0       	rjmp	.+62     	; 0x1c46 <LCD_sendCommand+0x650>
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e7 5a       	subi	r30, 0xA7	; 167
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 e9       	ldi	r24, 0x90	; 144
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c16:	fe 01       	movw	r30, r28
    1c18:	e7 5a       	subi	r30, 0xA7	; 167
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 81       	ld	r24, Z
    1c1e:	91 81       	ldd	r25, Z+1	; 0x01
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_sendCommand+0x62a>
    1c24:	fe 01       	movw	r30, r28
    1c26:	e7 5a       	subi	r30, 0xA7	; 167
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	de 01       	movw	r26, r28
    1c30:	a5 5a       	subi	r26, 0xA5	; 165
    1c32:	bf 4f       	sbci	r27, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e5 5a       	subi	r30, 0xA5	; 165
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	9c 93       	st	X, r25
    1c44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	fe 01       	movw	r30, r28
    1c48:	e5 5a       	subi	r30, 0xA5	; 165
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 81       	ld	r24, Z
    1c4e:	91 81       	ldd	r25, Z+1	; 0x01
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	d1 f6       	brne	.-76     	; 0x1c08 <LCD_sendCommand+0x612>
    1c54:	27 c0       	rjmp	.+78     	; 0x1ca4 <LCD_sendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c56:	8e 01       	movw	r16, r28
    1c58:	05 5a       	subi	r16, 0xA5	; 165
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e3 5a       	subi	r30, 0xA3	; 163
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	f8 01       	movw	r30, r16
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	de 01       	movw	r26, r28
    1c7a:	a9 5a       	subi	r26, 0xA9	; 169
    1c7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e5 5a       	subi	r30, 0xA5	; 165
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	8d 93       	st	X+, r24
    1c8a:	9c 93       	st	X, r25
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e9 5a       	subi	r30, 0xA9	; 169
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 81       	ld	r24, Z
    1c94:	91 81       	ldd	r25, Z+1	; 0x01
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_sendCommand+0x6a0>
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e9 5a       	subi	r30, 0xA9	; 169
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	62 e0       	ldi	r22, 0x02	; 2
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ed 5a       	subi	r30, 0xAD	; 173
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	80 83       	st	Z, r24
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	a2 83       	std	Z+2, r26	; 0x02
    1cc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cc4:	8e 01       	movw	r16, r28
    1cc6:	01 5b       	subi	r16, 0xB1	; 177
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ed 5a       	subi	r30, 0xAD	; 173
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	2b ea       	ldi	r18, 0xAB	; 171
    1cda:	3a ea       	ldi	r19, 0xAA	; 170
    1cdc:	4a ea       	ldi	r20, 0xAA	; 170
    1cde:	50 e4       	ldi	r21, 0x40	; 64
    1ce0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	f8 01       	movw	r30, r16
    1cea:	80 83       	st	Z, r24
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	a2 83       	std	Z+2, r26	; 0x02
    1cf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e1 5b       	subi	r30, 0xB1	; 177
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	60 81       	ld	r22, Z
    1cfa:	71 81       	ldd	r23, Z+1	; 0x01
    1cfc:	82 81       	ldd	r24, Z+2	; 0x02
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e8       	ldi	r20, 0x80	; 128
    1d06:	5f e3       	ldi	r21, 0x3F	; 63
    1d08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d0c:	88 23       	and	r24, r24
    1d0e:	34 f4       	brge	.+12     	; 0x1d1c <LCD_sendCommand+0x726>
		__ticks = 1;
    1d10:	fe 01       	movw	r30, r28
    1d12:	e2 5b       	subi	r30, 0xB2	; 178
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	80 83       	st	Z, r24
    1d1a:	e0 c0       	rjmp	.+448    	; 0x1edc <LCD_sendCommand+0x8e6>
	else if (__tmp > 255)
    1d1c:	fe 01       	movw	r30, r28
    1d1e:	e1 5b       	subi	r30, 0xB1	; 177
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
    1d22:	60 81       	ld	r22, Z
    1d24:	71 81       	ldd	r23, Z+1	; 0x01
    1d26:	82 81       	ldd	r24, Z+2	; 0x02
    1d28:	93 81       	ldd	r25, Z+3	; 0x03
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	53 e4       	ldi	r21, 0x43	; 67
    1d32:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	0c f0       	brlt	.+2      	; 0x1d3c <LCD_sendCommand+0x746>
    1d3a:	c0 c0       	rjmp	.+384    	; 0x1ebc <LCD_sendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	ed 5a       	subi	r30, 0xAD	; 173
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	82 81       	ldd	r24, Z+2	; 0x02
    1d48:	93 81       	ldd	r25, Z+3	; 0x03
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	4a e7       	ldi	r20, 0x7A	; 122
    1d50:	54 e4       	ldi	r21, 0x44	; 68
    1d52:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e6 5b       	subi	r30, 0xB6	; 182
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0a 5b       	subi	r16, 0xBA	; 186
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e6 5b       	subi	r30, 0xB6	; 182
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a e7       	ldi	r20, 0x7A	; 122
    1d82:	55 e4       	ldi	r21, 0x45	; 69
    1d84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	80 83       	st	Z, r24
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	a2 83       	std	Z+2, r26	; 0x02
    1d94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d96:	fe 01       	movw	r30, r28
    1d98:	ea 5b       	subi	r30, 0xBA	; 186
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	44 f4       	brge	.+16     	; 0x1dc4 <LCD_sendCommand+0x7ce>
		__ticks = 1;
    1db4:	fe 01       	movw	r30, r28
    1db6:	ec 5b       	subi	r30, 0xBC	; 188
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	64 c0       	rjmp	.+200    	; 0x1e8c <LCD_sendCommand+0x896>
	else if (__tmp > 65535)
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ea 5b       	subi	r30, 0xBA	; 186
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	0c f0       	brlt	.+2      	; 0x1de4 <LCD_sendCommand+0x7ee>
    1de2:	43 c0       	rjmp	.+134    	; 0x1e6a <LCD_sendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	fe 01       	movw	r30, r28
    1de6:	e6 5b       	subi	r30, 0xB6	; 182
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	8e 01       	movw	r16, r28
    1e04:	0c 5b       	subi	r16, 0xBC	; 188
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	f8 01       	movw	r30, r16
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    1e1a:	1f c0       	rjmp	.+62     	; 0x1e5a <LCD_sendCommand+0x864>
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ee 5b       	subi	r30, 0xBE	; 190
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 e9       	ldi	r24, 0x90	; 144
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ee 5b       	subi	r30, 0xBE	; 190
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_sendCommand+0x83e>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ee 5b       	subi	r30, 0xBE	; 190
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	de 01       	movw	r26, r28
    1e44:	ac 5b       	subi	r26, 0xBC	; 188
    1e46:	bf 4f       	sbci	r27, 0xFF	; 255
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ec 5b       	subi	r30, 0xBC	; 188
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	11 96       	adiw	r26, 0x01	; 1
    1e56:	9c 93       	st	X, r25
    1e58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ec 5b       	subi	r30, 0xBC	; 188
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	91 81       	ldd	r25, Z+1	; 0x01
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	d1 f6       	brne	.-76     	; 0x1e1c <LCD_sendCommand+0x826>
    1e68:	42 c0       	rjmp	.+132    	; 0x1eee <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	0c 5b       	subi	r16, 0xBC	; 188
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	fe 01       	movw	r30, r28
    1e72:	ea 5b       	subi	r30, 0xBA	; 186
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	de 01       	movw	r26, r28
    1e8e:	a0 5c       	subi	r26, 0xC0	; 192
    1e90:	bf 4f       	sbci	r27, 0xFF	; 255
    1e92:	fe 01       	movw	r30, r28
    1e94:	ec 5b       	subi	r30, 0xBC	; 188
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	11 96       	adiw	r26, 0x01	; 1
    1e9e:	9c 93       	st	X, r25
    1ea0:	8e 93       	st	-X, r24
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e0 5c       	subi	r30, 0xC0	; 192
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_sendCommand+0x8b6>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e0 5c       	subi	r30, 0xC0	; 192
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
    1eba:	19 c0       	rjmp	.+50     	; 0x1eee <LCD_sendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ebc:	8e 01       	movw	r16, r28
    1ebe:	02 5b       	subi	r16, 0xB2	; 178
    1ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e1 5b       	subi	r30, 0xB1	; 177
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	60 81       	ld	r22, Z
    1eca:	71 81       	ldd	r23, Z+1	; 0x01
    1ecc:	82 81       	ldd	r24, Z+2	; 0x02
    1ece:	93 81       	ldd	r25, Z+3	; 0x03
    1ed0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	f8 01       	movw	r30, r16
    1eda:	80 83       	st	Z, r24
    1edc:	fe 01       	movw	r30, r28
    1ede:	e2 5b       	subi	r30, 0xB2	; 178
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ee6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ee8:	8a 95       	dec	r24
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_sendCommand+0x8f2>
    1eec:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	62 e0       	ldi	r22, 0x02	; 2
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a0 e8       	ldi	r26, 0x80	; 128
    1efe:	bf e3       	ldi	r27, 0x3F	; 63
    1f00:	8b af       	std	Y+59, r24	; 0x3b
    1f02:	9c af       	std	Y+60, r25	; 0x3c
    1f04:	ad af       	std	Y+61, r26	; 0x3d
    1f06:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f08:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f0a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f10:	2b ea       	ldi	r18, 0xAB	; 171
    1f12:	3a ea       	ldi	r19, 0xAA	; 170
    1f14:	4a ea       	ldi	r20, 0xAA	; 170
    1f16:	50 e4       	ldi	r21, 0x40	; 64
    1f18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	8f ab       	std	Y+55, r24	; 0x37
    1f22:	98 af       	std	Y+56, r25	; 0x38
    1f24:	a9 af       	std	Y+57, r26	; 0x39
    1f26:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f28:	6f a9       	ldd	r22, Y+55	; 0x37
    1f2a:	78 ad       	ldd	r23, Y+56	; 0x38
    1f2c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f2e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e8       	ldi	r20, 0x80	; 128
    1f36:	5f e3       	ldi	r21, 0x3F	; 63
    1f38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f3c:	88 23       	and	r24, r24
    1f3e:	1c f4       	brge	.+6      	; 0x1f46 <LCD_sendCommand+0x950>
		__ticks = 1;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	8e ab       	std	Y+54, r24	; 0x36
    1f44:	91 c0       	rjmp	.+290    	; 0x2068 <LCD_sendCommand+0xa72>
	else if (__tmp > 255)
    1f46:	6f a9       	ldd	r22, Y+55	; 0x37
    1f48:	78 ad       	ldd	r23, Y+56	; 0x38
    1f4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	53 e4       	ldi	r21, 0x43	; 67
    1f56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <LCD_sendCommand+0x96a>
    1f5e:	7b c0       	rjmp	.+246    	; 0x2056 <LCD_sendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    1f60:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f62:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	54 e4       	ldi	r21, 0x44	; 68
    1f70:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	8a ab       	std	Y+50, r24	; 0x32
    1f7a:	9b ab       	std	Y+51, r25	; 0x33
    1f7c:	ac ab       	std	Y+52, r26	; 0x34
    1f7e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	6a a9       	ldd	r22, Y+50	; 0x32
    1f82:	7b a9       	ldd	r23, Y+51	; 0x33
    1f84:	8c a9       	ldd	r24, Y+52	; 0x34
    1f86:	9d a9       	ldd	r25, Y+53	; 0x35
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a e7       	ldi	r20, 0x7A	; 122
    1f8e:	55 e4       	ldi	r21, 0x45	; 69
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8e a7       	std	Y+46, r24	; 0x2e
    1f9a:	9f a7       	std	Y+47, r25	; 0x2f
    1f9c:	a8 ab       	std	Y+48, r26	; 0x30
    1f9e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1fa0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fa2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fa4:	88 a9       	ldd	r24, Y+48	; 0x30
    1fa6:	99 a9       	ldd	r25, Y+49	; 0x31
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_sendCommand+0x9cc>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9d a7       	std	Y+45, r25	; 0x2d
    1fbe:	8c a7       	std	Y+44, r24	; 0x2c
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <LCD_sendCommand+0xa4a>
	else if (__tmp > 65535)
    1fc2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fc4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fc6:	88 a9       	ldd	r24, Y+48	; 0x30
    1fc8:	99 a9       	ldd	r25, Y+49	; 0x31
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <LCD_sendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	6a a9       	ldd	r22, Y+50	; 0x32
    1fdc:	7b a9       	ldd	r23, Y+51	; 0x33
    1fde:	8c a9       	ldd	r24, Y+52	; 0x34
    1fe0:	9d a9       	ldd	r25, Y+53	; 0x35
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9d a7       	std	Y+45, r25	; 0x2d
    2000:	8c a7       	std	Y+44, r24	; 0x2c
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <LCD_sendCommand+0xa2c>
    2004:	80 e9       	ldi	r24, 0x90	; 144
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	9b a7       	std	Y+43, r25	; 0x2b
    200a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    200c:	8a a5       	ldd	r24, Y+42	; 0x2a
    200e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_sendCommand+0xa1a>
    2014:	9b a7       	std	Y+43, r25	; 0x2b
    2016:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	8c a5       	ldd	r24, Y+44	; 0x2c
    201a:	9d a5       	ldd	r25, Y+45	; 0x2d
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9d a7       	std	Y+45, r25	; 0x2d
    2020:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	8c a5       	ldd	r24, Y+44	; 0x2c
    2024:	9d a5       	ldd	r25, Y+45	; 0x2d
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <LCD_sendCommand+0xa0e>
    202a:	24 c0       	rjmp	.+72     	; 0x2074 <LCD_sendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6e a5       	ldd	r22, Y+46	; 0x2e
    202e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2030:	88 a9       	ldd	r24, Y+48	; 0x30
    2032:	99 a9       	ldd	r25, Y+49	; 0x31
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9d a7       	std	Y+45, r25	; 0x2d
    203e:	8c a7       	std	Y+44, r24	; 0x2c
    2040:	8c a5       	ldd	r24, Y+44	; 0x2c
    2042:	9d a5       	ldd	r25, Y+45	; 0x2d
    2044:	99 a7       	std	Y+41, r25	; 0x29
    2046:	88 a7       	std	Y+40, r24	; 0x28
    2048:	88 a5       	ldd	r24, Y+40	; 0x28
    204a:	99 a5       	ldd	r25, Y+41	; 0x29
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_sendCommand+0xa56>
    2050:	99 a7       	std	Y+41, r25	; 0x29
    2052:	88 a7       	std	Y+40, r24	; 0x28
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_sendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2056:	6f a9       	ldd	r22, Y+55	; 0x37
    2058:	78 ad       	ldd	r23, Y+56	; 0x38
    205a:	89 ad       	ldd	r24, Y+57	; 0x39
    205c:	9a ad       	ldd	r25, Y+58	; 0x3a
    205e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	8e ab       	std	Y+54, r24	; 0x36
    2068:	8e a9       	ldd	r24, Y+54	; 0x36
    206a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    206c:	8f a1       	ldd	r24, Y+39	; 0x27
    206e:	8a 95       	dec	r24
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_sendCommand+0xa78>
    2072:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,0));
    2074:	fe 01       	movw	r30, r28
    2076:	eb 56       	subi	r30, 0x6B	; 107
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	98 2f       	mov	r25, r24
    207e:	91 70       	andi	r25, 0x01	; 1
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	63 e0       	ldi	r22, 0x03	; 3
    2084:	49 2f       	mov	r20, r25
    2086:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,1));
    208a:	fe 01       	movw	r30, r28
    208c:	eb 56       	subi	r30, 0x6B	; 107
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	86 95       	lsr	r24
    2094:	98 2f       	mov	r25, r24
    2096:	91 70       	andi	r25, 0x01	; 1
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	49 2f       	mov	r20, r25
    209e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,2));
    20a2:	fe 01       	movw	r30, r28
    20a4:	eb 56       	subi	r30, 0x6B	; 107
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	86 95       	lsr	r24
    20ac:	86 95       	lsr	r24
    20ae:	98 2f       	mov	r25, r24
    20b0:	91 70       	andi	r25, 0x01	; 1
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	65 e0       	ldi	r22, 0x05	; 5
    20b6:	49 2f       	mov	r20, r25
    20b8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,3));
    20bc:	fe 01       	movw	r30, r28
    20be:	eb 56       	subi	r30, 0x6B	; 107
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	86 95       	lsr	r24
    20c6:	86 95       	lsr	r24
    20c8:	86 95       	lsr	r24
    20ca:	98 2f       	mov	r25, r24
    20cc:	91 70       	andi	r25, 0x01	; 1
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	66 e0       	ldi	r22, 0x06	; 6
    20d2:	49 2f       	mov	r20, r25
    20d4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e8       	ldi	r26, 0x80	; 128
    20de:	bf e3       	ldi	r27, 0x3F	; 63
    20e0:	8b a3       	std	Y+35, r24	; 0x23
    20e2:	9c a3       	std	Y+36, r25	; 0x24
    20e4:	ad a3       	std	Y+37, r26	; 0x25
    20e6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	6b a1       	ldd	r22, Y+35	; 0x23
    20ea:	7c a1       	ldd	r23, Y+36	; 0x24
    20ec:	8d a1       	ldd	r24, Y+37	; 0x25
    20ee:	9e a1       	ldd	r25, Y+38	; 0x26
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a e7       	ldi	r20, 0x7A	; 122
    20f6:	55 e4       	ldi	r21, 0x45	; 69
    20f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8f 8f       	std	Y+31, r24	; 0x1f
    2102:	98 a3       	std	Y+32, r25	; 0x20
    2104:	a9 a3       	std	Y+33, r26	; 0x21
    2106:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2108:	6f 8d       	ldd	r22, Y+31	; 0x1f
    210a:	78 a1       	ldd	r23, Y+32	; 0x20
    210c:	89 a1       	ldd	r24, Y+33	; 0x21
    210e:	9a a1       	ldd	r25, Y+34	; 0x22
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <LCD_sendCommand+0xb34>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9e 8f       	std	Y+30, r25	; 0x1e
    2126:	8d 8f       	std	Y+29, r24	; 0x1d
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <LCD_sendCommand+0xbb2>
	else if (__tmp > 65535)
    212a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    212c:	78 a1       	ldd	r23, Y+32	; 0x20
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <LCD_sendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2142:	6b a1       	ldd	r22, Y+35	; 0x23
    2144:	7c a1       	ldd	r23, Y+36	; 0x24
    2146:	8d a1       	ldd	r24, Y+37	; 0x25
    2148:	9e a1       	ldd	r25, Y+38	; 0x26
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9e 8f       	std	Y+30, r25	; 0x1e
    2168:	8d 8f       	std	Y+29, r24	; 0x1d
    216a:	0f c0       	rjmp	.+30     	; 0x218a <LCD_sendCommand+0xb94>
    216c:	80 e9       	ldi	r24, 0x90	; 144
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	9c 8f       	std	Y+28, r25	; 0x1c
    2172:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_sendCommand+0xb82>
    217c:	9c 8f       	std	Y+28, r25	; 0x1c
    217e:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9e 8f       	std	Y+30, r25	; 0x1e
    2188:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    218c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <LCD_sendCommand+0xb76>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <LCD_sendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2196:	78 a1       	ldd	r23, Y+32	; 0x20
    2198:	89 a1       	ldd	r24, Y+33	; 0x21
    219a:	9a a1       	ldd	r25, Y+34	; 0x22
    219c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9e 8f       	std	Y+30, r25	; 0x1e
    21a6:	8d 8f       	std	Y+29, r24	; 0x1d
    21a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ac:	9a 8f       	std	Y+26, r25	; 0x1a
    21ae:	89 8f       	std	Y+25, r24	; 0x19
    21b0:	89 8d       	ldd	r24, Y+25	; 0x19
    21b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_sendCommand+0xbbe>
    21b8:	9a 8f       	std	Y+26, r25	; 0x1a
    21ba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	62 e0       	ldi	r22, 0x02	; 2
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 e8       	ldi	r26, 0x80	; 128
    21cc:	bf e3       	ldi	r27, 0x3F	; 63
    21ce:	8d 8b       	std	Y+21, r24	; 0x15
    21d0:	9e 8b       	std	Y+22, r25	; 0x16
    21d2:	af 8b       	std	Y+23, r26	; 0x17
    21d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	2b ea       	ldi	r18, 0xAB	; 171
    21e0:	3a ea       	ldi	r19, 0xAA	; 170
    21e2:	4a ea       	ldi	r20, 0xAA	; 170
    21e4:	50 e4       	ldi	r21, 0x40	; 64
    21e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	89 8b       	std	Y+17, r24	; 0x11
    21f0:	9a 8b       	std	Y+18, r25	; 0x12
    21f2:	ab 8b       	std	Y+19, r26	; 0x13
    21f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21f6:	69 89       	ldd	r22, Y+17	; 0x11
    21f8:	7a 89       	ldd	r23, Y+18	; 0x12
    21fa:	8b 89       	ldd	r24, Y+19	; 0x13
    21fc:	9c 89       	ldd	r25, Y+20	; 0x14
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	1c f4       	brge	.+6      	; 0x2214 <LCD_sendCommand+0xc1e>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	88 8b       	std	Y+16, r24	; 0x10
    2212:	91 c0       	rjmp	.+290    	; 0x2336 <LCD_sendCommand+0xd40>
	else if (__tmp > 255)
    2214:	69 89       	ldd	r22, Y+17	; 0x11
    2216:	7a 89       	ldd	r23, Y+18	; 0x12
    2218:	8b 89       	ldd	r24, Y+19	; 0x13
    221a:	9c 89       	ldd	r25, Y+20	; 0x14
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	53 e4       	ldi	r21, 0x43	; 67
    2224:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	0c f0       	brlt	.+2      	; 0x222e <LCD_sendCommand+0xc38>
    222c:	7b c0       	rjmp	.+246    	; 0x2324 <LCD_sendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a e7       	ldi	r20, 0x7A	; 122
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	8c 87       	std	Y+12, r24	; 0x0c
    2248:	9d 87       	std	Y+13, r25	; 0x0d
    224a:	ae 87       	std	Y+14, r26	; 0x0e
    224c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2250:	7d 85       	ldd	r23, Y+13	; 0x0d
    2252:	8e 85       	ldd	r24, Y+14	; 0x0e
    2254:	9f 85       	ldd	r25, Y+15	; 0x0f
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a e7       	ldi	r20, 0x7A	; 122
    225c:	55 e4       	ldi	r21, 0x45	; 69
    225e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	88 87       	std	Y+8, r24	; 0x08
    2268:	99 87       	std	Y+9, r25	; 0x09
    226a:	aa 87       	std	Y+10, r26	; 0x0a
    226c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    226e:	68 85       	ldd	r22, Y+8	; 0x08
    2270:	79 85       	ldd	r23, Y+9	; 0x09
    2272:	8a 85       	ldd	r24, Y+10	; 0x0a
    2274:	9b 85       	ldd	r25, Y+11	; 0x0b
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <LCD_sendCommand+0xc9a>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9f 83       	std	Y+7, r25	; 0x07
    228c:	8e 83       	std	Y+6, r24	; 0x06
    228e:	3f c0       	rjmp	.+126    	; 0x230e <LCD_sendCommand+0xd18>
	else if (__tmp > 65535)
    2290:	68 85       	ldd	r22, Y+8	; 0x08
    2292:	79 85       	ldd	r23, Y+9	; 0x09
    2294:	8a 85       	ldd	r24, Y+10	; 0x0a
    2296:	9b 85       	ldd	r25, Y+11	; 0x0b
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <LCD_sendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    22aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    22ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9f 83       	std	Y+7, r25	; 0x07
    22ce:	8e 83       	std	Y+6, r24	; 0x06
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <LCD_sendCommand+0xcfa>
    22d2:	80 e9       	ldi	r24, 0x90	; 144
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	9d 83       	std	Y+5, r25	; 0x05
    22d8:	8c 83       	std	Y+4, r24	; 0x04
    22da:	8c 81       	ldd	r24, Y+4	; 0x04
    22dc:	9d 81       	ldd	r25, Y+5	; 0x05
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_sendCommand+0xce8>
    22e2:	9d 83       	std	Y+5, r25	; 0x05
    22e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8e 81       	ldd	r24, Y+6	; 0x06
    22e8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9f 83       	std	Y+7, r25	; 0x07
    22ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8e 81       	ldd	r24, Y+6	; 0x06
    22f2:	9f 81       	ldd	r25, Y+7	; 0x07
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <LCD_sendCommand+0xcdc>
    22f8:	24 c0       	rjmp	.+72     	; 0x2342 <LCD_sendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	68 85       	ldd	r22, Y+8	; 0x08
    22fc:	79 85       	ldd	r23, Y+9	; 0x09
    22fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2300:	9b 85       	ldd	r25, Y+11	; 0x0b
    2302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9f 83       	std	Y+7, r25	; 0x07
    230c:	8e 83       	std	Y+6, r24	; 0x06
    230e:	8e 81       	ldd	r24, Y+6	; 0x06
    2310:	9f 81       	ldd	r25, Y+7	; 0x07
    2312:	9b 83       	std	Y+3, r25	; 0x03
    2314:	8a 83       	std	Y+2, r24	; 0x02
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <LCD_sendCommand+0xd24>
    231e:	9b 83       	std	Y+3, r25	; 0x03
    2320:	8a 83       	std	Y+2, r24	; 0x02
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_sendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2324:	69 89       	ldd	r22, Y+17	; 0x11
    2326:	7a 89       	ldd	r23, Y+18	; 0x12
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	88 8b       	std	Y+16, r24	; 0x10
    2336:	88 89       	ldd	r24, Y+16	; 0x10
    2338:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	8a 95       	dec	r24
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_sendCommand+0xd46>
    2340:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2342:	cb 56       	subi	r28, 0x6B	; 107
    2344:	df 4f       	sbci	r29, 0xFF	; 255
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	c1 58       	subi	r28, 0x81	; 129
    2368:	d0 40       	sbci	r29, 0x00	; 0
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	fe 01       	movw	r30, r28
    2376:	ef 57       	subi	r30, 0x7F	; 127
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    2386:	fe 01       	movw	r30, r28
    2388:	e3 58       	subi	r30, 0x83	; 131
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 e8       	ldi	r26, 0x80	; 128
    2392:	bf e3       	ldi	r27, 0x3F	; 63
    2394:	80 83       	st	Z, r24
    2396:	91 83       	std	Z+1, r25	; 0x01
    2398:	a2 83       	std	Z+2, r26	; 0x02
    239a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	8e 01       	movw	r16, r28
    239e:	07 58       	subi	r16, 0x87	; 135
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	fe 01       	movw	r30, r28
    23a4:	e3 58       	subi	r30, 0x83	; 131
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4a e7       	ldi	r20, 0x7A	; 122
    23b6:	55 e4       	ldi	r21, 0x45	; 69
    23b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	f8 01       	movw	r30, r16
    23c2:	80 83       	st	Z, r24
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	a2 83       	std	Z+2, r26	; 0x02
    23c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 58       	subi	r30, 0x87	; 135
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	5f e3       	ldi	r21, 0x3F	; 63
    23e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23e4:	88 23       	and	r24, r24
    23e6:	44 f4       	brge	.+16     	; 0x23f8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    23e8:	fe 01       	movw	r30, r28
    23ea:	e9 58       	subi	r30, 0x89	; 137
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
    23f6:	64 c0       	rjmp	.+200    	; 0x24c0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    23f8:	fe 01       	movw	r30, r28
    23fa:	e7 58       	subi	r30, 0x87	; 135
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	3f ef       	ldi	r19, 0xFF	; 255
    240a:	4f e7       	ldi	r20, 0x7F	; 127
    240c:	57 e4       	ldi	r21, 0x47	; 71
    240e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2412:	18 16       	cp	r1, r24
    2414:	0c f0       	brlt	.+2      	; 0x2418 <LCD_displayCharacter+0xbe>
    2416:	43 c0       	rjmp	.+134    	; 0x249e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	fe 01       	movw	r30, r28
    241a:	e3 58       	subi	r30, 0x83	; 131
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	60 81       	ld	r22, Z
    2420:	71 81       	ldd	r23, Z+1	; 0x01
    2422:	82 81       	ldd	r24, Z+2	; 0x02
    2424:	93 81       	ldd	r25, Z+3	; 0x03
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e4       	ldi	r21, 0x41	; 65
    242e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8e 01       	movw	r16, r28
    2438:	09 58       	subi	r16, 0x89	; 137
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	f8 01       	movw	r30, r16
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	1f c0       	rjmp	.+62     	; 0x248e <LCD_displayCharacter+0x134>
    2450:	fe 01       	movw	r30, r28
    2452:	eb 58       	subi	r30, 0x8B	; 139
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 e9       	ldi	r24, 0x90	; 144
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    245e:	fe 01       	movw	r30, r28
    2460:	eb 58       	subi	r30, 0x8B	; 139
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_displayCharacter+0x10e>
    246c:	fe 01       	movw	r30, r28
    246e:	eb 58       	subi	r30, 0x8B	; 139
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	de 01       	movw	r26, r28
    2478:	a9 58       	subi	r26, 0x89	; 137
    247a:	bf 4f       	sbci	r27, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	e9 58       	subi	r30, 0x89	; 137
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	11 96       	adiw	r26, 0x01	; 1
    248a:	9c 93       	st	X, r25
    248c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	fe 01       	movw	r30, r28
    2490:	e9 58       	subi	r30, 0x89	; 137
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	d1 f6       	brne	.-76     	; 0x2450 <LCD_displayCharacter+0xf6>
    249c:	27 c0       	rjmp	.+78     	; 0x24ec <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249e:	8e 01       	movw	r16, r28
    24a0:	09 58       	subi	r16, 0x89	; 137
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	fe 01       	movw	r30, r28
    24a6:	e7 58       	subi	r30, 0x87	; 135
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	60 81       	ld	r22, Z
    24ac:	71 81       	ldd	r23, Z+1	; 0x01
    24ae:	82 81       	ldd	r24, Z+2	; 0x02
    24b0:	93 81       	ldd	r25, Z+3	; 0x03
    24b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	f8 01       	movw	r30, r16
    24bc:	91 83       	std	Z+1, r25	; 0x01
    24be:	80 83       	st	Z, r24
    24c0:	de 01       	movw	r26, r28
    24c2:	ad 58       	subi	r26, 0x8D	; 141
    24c4:	bf 4f       	sbci	r27, 0xFF	; 255
    24c6:	fe 01       	movw	r30, r28
    24c8:	e9 58       	subi	r30, 0x89	; 137
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	8d 93       	st	X+, r24
    24d2:	9c 93       	st	X, r25
    24d4:	fe 01       	movw	r30, r28
    24d6:	ed 58       	subi	r30, 0x8D	; 141
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_displayCharacter+0x184>
    24e2:	fe 01       	movw	r30, r28
    24e4:	ed 58       	subi	r30, 0x8D	; 141
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	62 e0       	ldi	r22, 0x02	; 2
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    24f6:	fe 01       	movw	r30, r28
    24f8:	e1 59       	subi	r30, 0x91	; 145
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a0 e8       	ldi	r26, 0x80	; 128
    2502:	bf e3       	ldi	r27, 0x3F	; 63
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	a2 83       	std	Z+2, r26	; 0x02
    250a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250c:	8e 01       	movw	r16, r28
    250e:	05 59       	subi	r16, 0x95	; 149
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
    2512:	fe 01       	movw	r30, r28
    2514:	e1 59       	subi	r30, 0x91	; 145
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	55 e4       	ldi	r21, 0x45	; 69
    2528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	f8 01       	movw	r30, r16
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    253a:	fe 01       	movw	r30, r28
    253c:	e5 59       	subi	r30, 0x95	; 149
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	60 81       	ld	r22, Z
    2542:	71 81       	ldd	r23, Z+1	; 0x01
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	44 f4       	brge	.+16     	; 0x2568 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2558:	fe 01       	movw	r30, r28
    255a:	e7 59       	subi	r30, 0x97	; 151
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
    2566:	64 c0       	rjmp	.+200    	; 0x2630 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2568:	fe 01       	movw	r30, r28
    256a:	e5 59       	subi	r30, 0x95	; 149
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	0c f0       	brlt	.+2      	; 0x2588 <LCD_displayCharacter+0x22e>
    2586:	43 c0       	rjmp	.+134    	; 0x260e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2588:	fe 01       	movw	r30, r28
    258a:	e1 59       	subi	r30, 0x91	; 145
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	60 81       	ld	r22, Z
    2590:	71 81       	ldd	r23, Z+1	; 0x01
    2592:	82 81       	ldd	r24, Z+2	; 0x02
    2594:	93 81       	ldd	r25, Z+3	; 0x03
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8e 01       	movw	r16, r28
    25a8:	07 59       	subi	r16, 0x97	; 151
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	f8 01       	movw	r30, r16
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
    25be:	1f c0       	rjmp	.+62     	; 0x25fe <LCD_displayCharacter+0x2a4>
    25c0:	fe 01       	movw	r30, r28
    25c2:	e9 59       	subi	r30, 0x99	; 153
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 e9       	ldi	r24, 0x90	; 144
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
    25ce:	fe 01       	movw	r30, r28
    25d0:	e9 59       	subi	r30, 0x99	; 153
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <LCD_displayCharacter+0x27e>
    25dc:	fe 01       	movw	r30, r28
    25de:	e9 59       	subi	r30, 0x99	; 153
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	91 83       	std	Z+1, r25	; 0x01
    25e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e6:	de 01       	movw	r26, r28
    25e8:	a7 59       	subi	r26, 0x97	; 151
    25ea:	bf 4f       	sbci	r27, 0xFF	; 255
    25ec:	fe 01       	movw	r30, r28
    25ee:	e7 59       	subi	r30, 0x97	; 151
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	11 96       	adiw	r26, 0x01	; 1
    25fa:	9c 93       	st	X, r25
    25fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	fe 01       	movw	r30, r28
    2600:	e7 59       	subi	r30, 0x97	; 151
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	91 81       	ldd	r25, Z+1	; 0x01
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	d1 f6       	brne	.-76     	; 0x25c0 <LCD_displayCharacter+0x266>
    260c:	27 c0       	rjmp	.+78     	; 0x265c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260e:	8e 01       	movw	r16, r28
    2610:	07 59       	subi	r16, 0x97	; 151
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	fe 01       	movw	r30, r28
    2616:	e5 59       	subi	r30, 0x95	; 149
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	60 81       	ld	r22, Z
    261c:	71 81       	ldd	r23, Z+1	; 0x01
    261e:	82 81       	ldd	r24, Z+2	; 0x02
    2620:	93 81       	ldd	r25, Z+3	; 0x03
    2622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	f8 01       	movw	r30, r16
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
    2630:	de 01       	movw	r26, r28
    2632:	ab 59       	subi	r26, 0x9B	; 155
    2634:	bf 4f       	sbci	r27, 0xFF	; 255
    2636:	fe 01       	movw	r30, r28
    2638:	e7 59       	subi	r30, 0x97	; 151
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	8d 93       	st	X+, r24
    2642:	9c 93       	st	X, r25
    2644:	fe 01       	movw	r30, r28
    2646:	eb 59       	subi	r30, 0x9B	; 155
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <LCD_displayCharacter+0x2f4>
    2652:	fe 01       	movw	r30, r28
    2654:	eb 59       	subi	r30, 0x9B	; 155
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
	_delay_us(1);

#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,4));
    265c:	fe 01       	movw	r30, r28
    265e:	ef 57       	subi	r30, 0x7F	; 127
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	82 95       	swap	r24
    2666:	8f 70       	andi	r24, 0x0F	; 15
    2668:	98 2f       	mov	r25, r24
    266a:	91 70       	andi	r25, 0x01	; 1
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	63 e0       	ldi	r22, 0x03	; 3
    2670:	49 2f       	mov	r20, r25
    2672:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,5));
    2676:	fe 01       	movw	r30, r28
    2678:	ef 57       	subi	r30, 0x7F	; 127
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 81       	ld	r24, Z
    267e:	82 95       	swap	r24
    2680:	86 95       	lsr	r24
    2682:	87 70       	andi	r24, 0x07	; 7
    2684:	98 2f       	mov	r25, r24
    2686:	91 70       	andi	r25, 0x01	; 1
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	49 2f       	mov	r20, r25
    268e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,6));
    2692:	fe 01       	movw	r30, r28
    2694:	ef 57       	subi	r30, 0x7F	; 127
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 81       	ld	r24, Z
    269a:	82 95       	swap	r24
    269c:	86 95       	lsr	r24
    269e:	86 95       	lsr	r24
    26a0:	83 70       	andi	r24, 0x03	; 3
    26a2:	98 2f       	mov	r25, r24
    26a4:	91 70       	andi	r25, 0x01	; 1
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	65 e0       	ldi	r22, 0x05	; 5
    26aa:	49 2f       	mov	r20, r25
    26ac:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,7));
    26b0:	fe 01       	movw	r30, r28
    26b2:	ef 57       	subi	r30, 0x7F	; 127
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	98 2f       	mov	r25, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	99 27       	eor	r25, r25
    26be:	99 1f       	adc	r25, r25
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	66 e0       	ldi	r22, 0x06	; 6
    26c4:	49 2f       	mov	r20, r25
    26c6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    26ca:	fe 01       	movw	r30, r28
    26cc:	ef 59       	subi	r30, 0x9F	; 159
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e8       	ldi	r26, 0x80	; 128
    26d6:	bf e3       	ldi	r27, 0x3F	; 63
    26d8:	80 83       	st	Z, r24
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	a2 83       	std	Z+2, r26	; 0x02
    26de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e0:	8e 01       	movw	r16, r28
    26e2:	03 5a       	subi	r16, 0xA3	; 163
    26e4:	1f 4f       	sbci	r17, 0xFF	; 255
    26e6:	fe 01       	movw	r30, r28
    26e8:	ef 59       	subi	r30, 0x9F	; 159
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4a e7       	ldi	r20, 0x7A	; 122
    26fa:	55 e4       	ldi	r21, 0x45	; 69
    26fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	f8 01       	movw	r30, r16
    2706:	80 83       	st	Z, r24
    2708:	91 83       	std	Z+1, r25	; 0x01
    270a:	a2 83       	std	Z+2, r26	; 0x02
    270c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    270e:	fe 01       	movw	r30, r28
    2710:	e3 5a       	subi	r30, 0xA3	; 163
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	44 f4       	brge	.+16     	; 0x273c <LCD_displayCharacter+0x3e2>
		__ticks = 1;
    272c:	fe 01       	movw	r30, r28
    272e:	e5 5a       	subi	r30, 0xA5	; 165
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	80 83       	st	Z, r24
    273a:	64 c0       	rjmp	.+200    	; 0x2804 <LCD_displayCharacter+0x4aa>
	else if (__tmp > 65535)
    273c:	fe 01       	movw	r30, r28
    273e:	e3 5a       	subi	r30, 0xA3	; 163
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	0c f0       	brlt	.+2      	; 0x275c <LCD_displayCharacter+0x402>
    275a:	43 c0       	rjmp	.+134    	; 0x27e2 <LCD_displayCharacter+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	fe 01       	movw	r30, r28
    275e:	ef 59       	subi	r30, 0x9F	; 159
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	8e 01       	movw	r16, r28
    277c:	05 5a       	subi	r16, 0xA5	; 165
    277e:	1f 4f       	sbci	r17, 0xFF	; 255
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	f8 01       	movw	r30, r16
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
    2792:	1f c0       	rjmp	.+62     	; 0x27d2 <LCD_displayCharacter+0x478>
    2794:	fe 01       	movw	r30, r28
    2796:	e7 5a       	subi	r30, 0xA7	; 167
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 e9       	ldi	r24, 0x90	; 144
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
    27a2:	fe 01       	movw	r30, r28
    27a4:	e7 5a       	subi	r30, 0xA7	; 167
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_displayCharacter+0x452>
    27b0:	fe 01       	movw	r30, r28
    27b2:	e7 5a       	subi	r30, 0xA7	; 167
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	de 01       	movw	r26, r28
    27bc:	a5 5a       	subi	r26, 0xA5	; 165
    27be:	bf 4f       	sbci	r27, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	e5 5a       	subi	r30, 0xA5	; 165
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	11 96       	adiw	r26, 0x01	; 1
    27ce:	9c 93       	st	X, r25
    27d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d2:	fe 01       	movw	r30, r28
    27d4:	e5 5a       	subi	r30, 0xA5	; 165
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	d1 f6       	brne	.-76     	; 0x2794 <LCD_displayCharacter+0x43a>
    27e0:	27 c0       	rjmp	.+78     	; 0x2830 <LCD_displayCharacter+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	8e 01       	movw	r16, r28
    27e4:	05 5a       	subi	r16, 0xA5	; 165
    27e6:	1f 4f       	sbci	r17, 0xFF	; 255
    27e8:	fe 01       	movw	r30, r28
    27ea:	e3 5a       	subi	r30, 0xA3	; 163
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	f8 01       	movw	r30, r16
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    2804:	de 01       	movw	r26, r28
    2806:	a9 5a       	subi	r26, 0xA9	; 169
    2808:	bf 4f       	sbci	r27, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	e5 5a       	subi	r30, 0xA5	; 165
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 81       	ld	r24, Z
    2812:	91 81       	ldd	r25, Z+1	; 0x01
    2814:	8d 93       	st	X+, r24
    2816:	9c 93       	st	X, r25
    2818:	fe 01       	movw	r30, r28
    281a:	e9 5a       	subi	r30, 0xA9	; 169
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	91 81       	ldd	r25, Z+1	; 0x01
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_displayCharacter+0x4c8>
    2826:	fe 01       	movw	r30, r28
    2828:	e9 5a       	subi	r30, 0xA9	; 169
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	62 e0       	ldi	r22, 0x02	; 2
    2834:	40 e0       	ldi	r20, 0x00	; 0
    2836:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    283a:	fe 01       	movw	r30, r28
    283c:	ed 5a       	subi	r30, 0xAD	; 173
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e8       	ldi	r26, 0x80	; 128
    2846:	bf e3       	ldi	r27, 0x3F	; 63
    2848:	80 83       	st	Z, r24
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	a2 83       	std	Z+2, r26	; 0x02
    284e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2850:	8e 01       	movw	r16, r28
    2852:	01 5b       	subi	r16, 0xB1	; 177
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	ed 5a       	subi	r30, 0xAD	; 173
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	2b ea       	ldi	r18, 0xAB	; 171
    2866:	3a ea       	ldi	r19, 0xAA	; 170
    2868:	4a ea       	ldi	r20, 0xAA	; 170
    286a:	50 e4       	ldi	r21, 0x40	; 64
    286c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	f8 01       	movw	r30, r16
    2876:	80 83       	st	Z, r24
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	a2 83       	std	Z+2, r26	; 0x02
    287c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    287e:	fe 01       	movw	r30, r28
    2880:	e1 5b       	subi	r30, 0xB1	; 177
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2898:	88 23       	and	r24, r24
    289a:	34 f4       	brge	.+12     	; 0x28a8 <LCD_displayCharacter+0x54e>
		__ticks = 1;
    289c:	fe 01       	movw	r30, r28
    289e:	e2 5b       	subi	r30, 0xB2	; 178
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	80 83       	st	Z, r24
    28a6:	e0 c0       	rjmp	.+448    	; 0x2a68 <LCD_displayCharacter+0x70e>
	else if (__tmp > 255)
    28a8:	fe 01       	movw	r30, r28
    28aa:	e1 5b       	subi	r30, 0xB1	; 177
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	60 81       	ld	r22, Z
    28b0:	71 81       	ldd	r23, Z+1	; 0x01
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	4f e7       	ldi	r20, 0x7F	; 127
    28bc:	53 e4       	ldi	r21, 0x43	; 67
    28be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28c2:	18 16       	cp	r1, r24
    28c4:	0c f0       	brlt	.+2      	; 0x28c8 <LCD_displayCharacter+0x56e>
    28c6:	c0 c0       	rjmp	.+384    	; 0x2a48 <LCD_displayCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    28c8:	fe 01       	movw	r30, r28
    28ca:	ed 5a       	subi	r30, 0xAD	; 173
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a e7       	ldi	r20, 0x7A	; 122
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	fe 01       	movw	r30, r28
    28e8:	e6 5b       	subi	r30, 0xB6	; 182
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	80 83       	st	Z, r24
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	a2 83       	std	Z+2, r26	; 0x02
    28f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f4:	8e 01       	movw	r16, r28
    28f6:	0a 5b       	subi	r16, 0xBA	; 186
    28f8:	1f 4f       	sbci	r17, 0xFF	; 255
    28fa:	fe 01       	movw	r30, r28
    28fc:	e6 5b       	subi	r30, 0xB6	; 182
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	60 81       	ld	r22, Z
    2902:	71 81       	ldd	r23, Z+1	; 0x01
    2904:	82 81       	ldd	r24, Z+2	; 0x02
    2906:	93 81       	ldd	r25, Z+3	; 0x03
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4a e7       	ldi	r20, 0x7A	; 122
    290e:	55 e4       	ldi	r21, 0x45	; 69
    2910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	f8 01       	movw	r30, r16
    291a:	80 83       	st	Z, r24
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	a2 83       	std	Z+2, r26	; 0x02
    2920:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2922:	fe 01       	movw	r30, r28
    2924:	ea 5b       	subi	r30, 0xBA	; 186
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	44 f4       	brge	.+16     	; 0x2950 <LCD_displayCharacter+0x5f6>
		__ticks = 1;
    2940:	fe 01       	movw	r30, r28
    2942:	ec 5b       	subi	r30, 0xBC	; 188
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	80 83       	st	Z, r24
    294e:	64 c0       	rjmp	.+200    	; 0x2a18 <LCD_displayCharacter+0x6be>
	else if (__tmp > 65535)
    2950:	fe 01       	movw	r30, r28
    2952:	ea 5b       	subi	r30, 0xBA	; 186
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	0c f0       	brlt	.+2      	; 0x2970 <LCD_displayCharacter+0x616>
    296e:	43 c0       	rjmp	.+134    	; 0x29f6 <LCD_displayCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2970:	fe 01       	movw	r30, r28
    2972:	e6 5b       	subi	r30, 0xB6	; 182
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8e 01       	movw	r16, r28
    2990:	0c 5b       	subi	r16, 0xBC	; 188
    2992:	1f 4f       	sbci	r17, 0xFF	; 255
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	f8 01       	movw	r30, r16
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
    29a6:	1f c0       	rjmp	.+62     	; 0x29e6 <LCD_displayCharacter+0x68c>
    29a8:	fe 01       	movw	r30, r28
    29aa:	ee 5b       	subi	r30, 0xBE	; 190
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 e9       	ldi	r24, 0x90	; 144
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	91 83       	std	Z+1, r25	; 0x01
    29b4:	80 83       	st	Z, r24
    29b6:	fe 01       	movw	r30, r28
    29b8:	ee 5b       	subi	r30, 0xBE	; 190
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <LCD_displayCharacter+0x666>
    29c4:	fe 01       	movw	r30, r28
    29c6:	ee 5b       	subi	r30, 0xBE	; 190
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ce:	de 01       	movw	r26, r28
    29d0:	ac 5b       	subi	r26, 0xBC	; 188
    29d2:	bf 4f       	sbci	r27, 0xFF	; 255
    29d4:	fe 01       	movw	r30, r28
    29d6:	ec 5b       	subi	r30, 0xBC	; 188
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	11 96       	adiw	r26, 0x01	; 1
    29e2:	9c 93       	st	X, r25
    29e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	fe 01       	movw	r30, r28
    29e8:	ec 5b       	subi	r30, 0xBC	; 188
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	d1 f6       	brne	.-76     	; 0x29a8 <LCD_displayCharacter+0x64e>
    29f4:	42 c0       	rjmp	.+132    	; 0x2a7a <LCD_displayCharacter+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f6:	8e 01       	movw	r16, r28
    29f8:	0c 5b       	subi	r16, 0xBC	; 188
    29fa:	1f 4f       	sbci	r17, 0xFF	; 255
    29fc:	fe 01       	movw	r30, r28
    29fe:	ea 5b       	subi	r30, 0xBA	; 186
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	f8 01       	movw	r30, r16
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	de 01       	movw	r26, r28
    2a1a:	a0 5c       	subi	r26, 0xC0	; 192
    2a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1e:	fe 01       	movw	r30, r28
    2a20:	ec 5b       	subi	r30, 0xBC	; 188
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	11 96       	adiw	r26, 0x01	; 1
    2a2a:	9c 93       	st	X, r25
    2a2c:	8e 93       	st	-X, r24
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e0 5c       	subi	r30, 0xC0	; 192
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_displayCharacter+0x6de>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e0 5c       	subi	r30, 0xC0	; 192
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
    2a46:	19 c0       	rjmp	.+50     	; 0x2a7a <LCD_displayCharacter+0x720>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a48:	8e 01       	movw	r16, r28
    2a4a:	02 5b       	subi	r16, 0xB2	; 178
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e1 5b       	subi	r30, 0xB1	; 177
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	f8 01       	movw	r30, r16
    2a66:	80 83       	st	Z, r24
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e2 5b       	subi	r30, 0xB2	; 178
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a72:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a74:	8a 95       	dec	r24
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <LCD_displayCharacter+0x71a>
    2a78:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	62 e0       	ldi	r22, 0x02	; 2
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	a0 e8       	ldi	r26, 0x80	; 128
    2a8a:	bf e3       	ldi	r27, 0x3F	; 63
    2a8c:	8b af       	std	Y+59, r24	; 0x3b
    2a8e:	9c af       	std	Y+60, r25	; 0x3c
    2a90:	ad af       	std	Y+61, r26	; 0x3d
    2a92:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a94:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a96:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a9c:	2b ea       	ldi	r18, 0xAB	; 171
    2a9e:	3a ea       	ldi	r19, 0xAA	; 170
    2aa0:	4a ea       	ldi	r20, 0xAA	; 170
    2aa2:	50 e4       	ldi	r21, 0x40	; 64
    2aa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	8f ab       	std	Y+55, r24	; 0x37
    2aae:	98 af       	std	Y+56, r25	; 0x38
    2ab0:	a9 af       	std	Y+57, r26	; 0x39
    2ab2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2ab4:	6f a9       	ldd	r22, Y+55	; 0x37
    2ab6:	78 ad       	ldd	r23, Y+56	; 0x38
    2ab8:	89 ad       	ldd	r24, Y+57	; 0x39
    2aba:	9a ad       	ldd	r25, Y+58	; 0x3a
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e8       	ldi	r20, 0x80	; 128
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ac8:	88 23       	and	r24, r24
    2aca:	1c f4       	brge	.+6      	; 0x2ad2 <LCD_displayCharacter+0x778>
		__ticks = 1;
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	8e ab       	std	Y+54, r24	; 0x36
    2ad0:	91 c0       	rjmp	.+290    	; 0x2bf4 <LCD_displayCharacter+0x89a>
	else if (__tmp > 255)
    2ad2:	6f a9       	ldd	r22, Y+55	; 0x37
    2ad4:	78 ad       	ldd	r23, Y+56	; 0x38
    2ad6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ad8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4f e7       	ldi	r20, 0x7F	; 127
    2ae0:	53 e4       	ldi	r21, 0x43	; 67
    2ae2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ae6:	18 16       	cp	r1, r24
    2ae8:	0c f0       	brlt	.+2      	; 0x2aec <LCD_displayCharacter+0x792>
    2aea:	7b c0       	rjmp	.+246    	; 0x2be2 <LCD_displayCharacter+0x888>
	{
		_delay_ms(__us / 1000.0);
    2aec:	6b ad       	ldd	r22, Y+59	; 0x3b
    2aee:	7c ad       	ldd	r23, Y+60	; 0x3c
    2af0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2af2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a e7       	ldi	r20, 0x7A	; 122
    2afa:	54 e4       	ldi	r21, 0x44	; 68
    2afc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	8a ab       	std	Y+50, r24	; 0x32
    2b06:	9b ab       	std	Y+51, r25	; 0x33
    2b08:	ac ab       	std	Y+52, r26	; 0x34
    2b0a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6a a9       	ldd	r22, Y+50	; 0x32
    2b0e:	7b a9       	ldd	r23, Y+51	; 0x33
    2b10:	8c a9       	ldd	r24, Y+52	; 0x34
    2b12:	9d a9       	ldd	r25, Y+53	; 0x35
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a e7       	ldi	r20, 0x7A	; 122
    2b1a:	55 e4       	ldi	r21, 0x45	; 69
    2b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8e a7       	std	Y+46, r24	; 0x2e
    2b26:	9f a7       	std	Y+47, r25	; 0x2f
    2b28:	a8 ab       	std	Y+48, r26	; 0x30
    2b2a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2b2c:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b2e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b30:	88 a9       	ldd	r24, Y+48	; 0x30
    2b32:	99 a9       	ldd	r25, Y+49	; 0x31
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <LCD_displayCharacter+0x7f4>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9d a7       	std	Y+45, r25	; 0x2d
    2b4a:	8c a7       	std	Y+44, r24	; 0x2c
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <LCD_displayCharacter+0x872>
	else if (__tmp > 65535)
    2b4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b50:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b52:	88 a9       	ldd	r24, Y+48	; 0x30
    2b54:	99 a9       	ldd	r25, Y+49	; 0x31
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <LCD_displayCharacter+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6a a9       	ldd	r22, Y+50	; 0x32
    2b68:	7b a9       	ldd	r23, Y+51	; 0x33
    2b6a:	8c a9       	ldd	r24, Y+52	; 0x34
    2b6c:	9d a9       	ldd	r25, Y+53	; 0x35
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9d a7       	std	Y+45, r25	; 0x2d
    2b8c:	8c a7       	std	Y+44, r24	; 0x2c
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <LCD_displayCharacter+0x854>
    2b90:	80 e9       	ldi	r24, 0x90	; 144
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	9b a7       	std	Y+43, r25	; 0x2b
    2b96:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b98:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b9a:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_displayCharacter+0x842>
    2ba0:	9b a7       	std	Y+43, r25	; 0x2b
    2ba2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ba6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9d a7       	std	Y+45, r25	; 0x2d
    2bac:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bb0:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <LCD_displayCharacter+0x836>
    2bb6:	24 c0       	rjmp	.+72     	; 0x2c00 <LCD_displayCharacter+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bba:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bbc:	88 a9       	ldd	r24, Y+48	; 0x30
    2bbe:	99 a9       	ldd	r25, Y+49	; 0x31
    2bc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9d a7       	std	Y+45, r25	; 0x2d
    2bca:	8c a7       	std	Y+44, r24	; 0x2c
    2bcc:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bce:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bd0:	99 a7       	std	Y+41, r25	; 0x29
    2bd2:	88 a7       	std	Y+40, r24	; 0x28
    2bd4:	88 a5       	ldd	r24, Y+40	; 0x28
    2bd6:	99 a5       	ldd	r25, Y+41	; 0x29
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <LCD_displayCharacter+0x87e>
    2bdc:	99 a7       	std	Y+41, r25	; 0x29
    2bde:	88 a7       	std	Y+40, r24	; 0x28
    2be0:	0f c0       	rjmp	.+30     	; 0x2c00 <LCD_displayCharacter+0x8a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2be2:	6f a9       	ldd	r22, Y+55	; 0x37
    2be4:	78 ad       	ldd	r23, Y+56	; 0x38
    2be6:	89 ad       	ldd	r24, Y+57	; 0x39
    2be8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	8e ab       	std	Y+54, r24	; 0x36
    2bf4:	8e a9       	ldd	r24, Y+54	; 0x36
    2bf6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bf8:	8f a1       	ldd	r24, Y+39	; 0x27
    2bfa:	8a 95       	dec	r24
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <LCD_displayCharacter+0x8a0>
    2bfe:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,0));
    2c00:	fe 01       	movw	r30, r28
    2c02:	ef 57       	subi	r30, 0x7F	; 127
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	98 2f       	mov	r25, r24
    2c0a:	91 70       	andi	r25, 0x01	; 1
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	63 e0       	ldi	r22, 0x03	; 3
    2c10:	49 2f       	mov	r20, r25
    2c12:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,1));
    2c16:	fe 01       	movw	r30, r28
    2c18:	ef 57       	subi	r30, 0x7F	; 127
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	86 95       	lsr	r24
    2c20:	98 2f       	mov	r25, r24
    2c22:	91 70       	andi	r25, 0x01	; 1
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	64 e0       	ldi	r22, 0x04	; 4
    2c28:	49 2f       	mov	r20, r25
    2c2a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,2));
    2c2e:	fe 01       	movw	r30, r28
    2c30:	ef 57       	subi	r30, 0x7F	; 127
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	86 95       	lsr	r24
    2c38:	86 95       	lsr	r24
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	91 70       	andi	r25, 0x01	; 1
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	65 e0       	ldi	r22, 0x05	; 5
    2c42:	49 2f       	mov	r20, r25
    2c44:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,3));
    2c48:	fe 01       	movw	r30, r28
    2c4a:	ef 57       	subi	r30, 0x7F	; 127
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	86 95       	lsr	r24
    2c52:	86 95       	lsr	r24
    2c54:	86 95       	lsr	r24
    2c56:	98 2f       	mov	r25, r24
    2c58:	91 70       	andi	r25, 0x01	; 1
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	66 e0       	ldi	r22, 0x06	; 6
    2c5e:	49 2f       	mov	r20, r25
    2c60:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a0 e8       	ldi	r26, 0x80	; 128
    2c6a:	bf e3       	ldi	r27, 0x3F	; 63
    2c6c:	8b a3       	std	Y+35, r24	; 0x23
    2c6e:	9c a3       	std	Y+36, r25	; 0x24
    2c70:	ad a3       	std	Y+37, r26	; 0x25
    2c72:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c74:	6b a1       	ldd	r22, Y+35	; 0x23
    2c76:	7c a1       	ldd	r23, Y+36	; 0x24
    2c78:	8d a1       	ldd	r24, Y+37	; 0x25
    2c7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	4a e7       	ldi	r20, 0x7A	; 122
    2c82:	55 e4       	ldi	r21, 0x45	; 69
    2c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	8f 8f       	std	Y+31, r24	; 0x1f
    2c8e:	98 a3       	std	Y+32, r25	; 0x20
    2c90:	a9 a3       	std	Y+33, r26	; 0x21
    2c92:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2c94:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c96:	78 a1       	ldd	r23, Y+32	; 0x20
    2c98:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	2c f4       	brge	.+10     	; 0x2cb6 <LCD_displayCharacter+0x95c>
		__ticks = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9e 8f       	std	Y+30, r25	; 0x1e
    2cb2:	8d 8f       	std	Y+29, r24	; 0x1d
    2cb4:	3f c0       	rjmp	.+126    	; 0x2d34 <LCD_displayCharacter+0x9da>
	else if (__tmp > 65535)
    2cb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2cb8:	78 a1       	ldd	r23, Y+32	; 0x20
    2cba:	89 a1       	ldd	r24, Y+33	; 0x21
    2cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	3f ef       	ldi	r19, 0xFF	; 255
    2cc2:	4f e7       	ldi	r20, 0x7F	; 127
    2cc4:	57 e4       	ldi	r21, 0x47	; 71
    2cc6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	4c f5       	brge	.+82     	; 0x2d20 <LCD_displayCharacter+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cce:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e2       	ldi	r20, 0x20	; 32
    2cdc:	51 e4       	ldi	r21, 0x41	; 65
    2cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf4:	8d 8f       	std	Y+29, r24	; 0x1d
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <LCD_displayCharacter+0x9bc>
    2cf8:	80 e9       	ldi	r24, 0x90	; 144
    2cfa:	91 e0       	ldi	r25, 0x01	; 1
    2cfc:	9c 8f       	std	Y+28, r25	; 0x1c
    2cfe:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_displayCharacter+0x9aa>
    2d08:	9c 8f       	std	Y+28, r25	; 0x1c
    2d0a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	9e 8f       	std	Y+30, r25	; 0x1e
    2d14:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <LCD_displayCharacter+0x99e>
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <LCD_displayCharacter+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d20:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d22:	78 a1       	ldd	r23, Y+32	; 0x20
    2d24:	89 a1       	ldd	r24, Y+33	; 0x21
    2d26:	9a a1       	ldd	r25, Y+34	; 0x22
    2d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9e 8f       	std	Y+30, r25	; 0x1e
    2d32:	8d 8f       	std	Y+29, r24	; 0x1d
    2d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d38:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3a:	89 8f       	std	Y+25, r24	; 0x19
    2d3c:	89 8d       	ldd	r24, Y+25	; 0x19
    2d3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <LCD_displayCharacter+0x9e6>
    2d44:	9a 8f       	std	Y+26, r25	; 0x1a
    2d46:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	62 e0       	ldi	r22, 0x02	; 2
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <GPIO_writePin>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a0 e8       	ldi	r26, 0x80	; 128
    2d58:	bf e3       	ldi	r27, 0x3F	; 63
    2d5a:	8d 8b       	std	Y+21, r24	; 0x15
    2d5c:	9e 8b       	std	Y+22, r25	; 0x16
    2d5e:	af 8b       	std	Y+23, r26	; 0x17
    2d60:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d62:	6d 89       	ldd	r22, Y+21	; 0x15
    2d64:	7e 89       	ldd	r23, Y+22	; 0x16
    2d66:	8f 89       	ldd	r24, Y+23	; 0x17
    2d68:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6a:	2b ea       	ldi	r18, 0xAB	; 171
    2d6c:	3a ea       	ldi	r19, 0xAA	; 170
    2d6e:	4a ea       	ldi	r20, 0xAA	; 170
    2d70:	50 e4       	ldi	r21, 0x40	; 64
    2d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	89 8b       	std	Y+17, r24	; 0x11
    2d7c:	9a 8b       	std	Y+18, r25	; 0x12
    2d7e:	ab 8b       	std	Y+19, r26	; 0x13
    2d80:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2d82:	69 89       	ldd	r22, Y+17	; 0x11
    2d84:	7a 89       	ldd	r23, Y+18	; 0x12
    2d86:	8b 89       	ldd	r24, Y+19	; 0x13
    2d88:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e8       	ldi	r20, 0x80	; 128
    2d90:	5f e3       	ldi	r21, 0x3F	; 63
    2d92:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d96:	88 23       	and	r24, r24
    2d98:	1c f4       	brge	.+6      	; 0x2da0 <LCD_displayCharacter+0xa46>
		__ticks = 1;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	88 8b       	std	Y+16, r24	; 0x10
    2d9e:	91 c0       	rjmp	.+290    	; 0x2ec2 <LCD_displayCharacter+0xb68>
	else if (__tmp > 255)
    2da0:	69 89       	ldd	r22, Y+17	; 0x11
    2da2:	7a 89       	ldd	r23, Y+18	; 0x12
    2da4:	8b 89       	ldd	r24, Y+19	; 0x13
    2da6:	9c 89       	ldd	r25, Y+20	; 0x14
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4f e7       	ldi	r20, 0x7F	; 127
    2dae:	53 e4       	ldi	r21, 0x43	; 67
    2db0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2db4:	18 16       	cp	r1, r24
    2db6:	0c f0       	brlt	.+2      	; 0x2dba <LCD_displayCharacter+0xa60>
    2db8:	7b c0       	rjmp	.+246    	; 0x2eb0 <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    2dba:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a e7       	ldi	r20, 0x7A	; 122
    2dc8:	54 e4       	ldi	r21, 0x44	; 68
    2dca:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8c 87       	std	Y+12, r24	; 0x0c
    2dd4:	9d 87       	std	Y+13, r25	; 0x0d
    2dd6:	ae 87       	std	Y+14, r26	; 0x0e
    2dd8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ddc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2dde:	8e 85       	ldd	r24, Y+14	; 0x0e
    2de0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a e7       	ldi	r20, 0x7A	; 122
    2de8:	55 e4       	ldi	r21, 0x45	; 69
    2dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	88 87       	std	Y+8, r24	; 0x08
    2df4:	99 87       	std	Y+9, r25	; 0x09
    2df6:	aa 87       	std	Y+10, r26	; 0x0a
    2df8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2dfa:	68 85       	ldd	r22, Y+8	; 0x08
    2dfc:	79 85       	ldd	r23, Y+9	; 0x09
    2dfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e00:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	5f e3       	ldi	r21, 0x3F	; 63
    2e0a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <LCD_displayCharacter+0xac2>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9f 83       	std	Y+7, r25	; 0x07
    2e18:	8e 83       	std	Y+6, r24	; 0x06
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    2e1c:	68 85       	ldd	r22, Y+8	; 0x08
    2e1e:	79 85       	ldd	r23, Y+9	; 0x09
    2e20:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e22:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e36:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e38:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9f 83       	std	Y+7, r25	; 0x07
    2e5a:	8e 83       	std	Y+6, r24	; 0x06
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <LCD_displayCharacter+0xb22>
    2e5e:	80 e9       	ldi	r24, 0x90	; 144
    2e60:	91 e0       	ldi	r25, 0x01	; 1
    2e62:	9d 83       	std	Y+5, r25	; 0x05
    2e64:	8c 83       	std	Y+4, r24	; 0x04
    2e66:	8c 81       	ldd	r24, Y+4	; 0x04
    2e68:	9d 81       	ldd	r25, Y+5	; 0x05
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_displayCharacter+0xb10>
    2e6e:	9d 83       	std	Y+5, r25	; 0x05
    2e70:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8e 81       	ldd	r24, Y+6	; 0x06
    2e74:	9f 81       	ldd	r25, Y+7	; 0x07
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	9f 83       	std	Y+7, r25	; 0x07
    2e7a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <LCD_displayCharacter+0xb04>
    2e84:	24 c0       	rjmp	.+72     	; 0x2ece <LCD_displayCharacter+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	68 85       	ldd	r22, Y+8	; 0x08
    2e88:	79 85       	ldd	r23, Y+9	; 0x09
    2e8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9f 83       	std	Y+7, r25	; 0x07
    2e98:	8e 83       	std	Y+6, r24	; 0x06
    2e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e9e:	9b 83       	std	Y+3, r25	; 0x03
    2ea0:	8a 83       	std	Y+2, r24	; 0x02
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <LCD_displayCharacter+0xb4c>
    2eaa:	9b 83       	std	Y+3, r25	; 0x03
    2eac:	8a 83       	std	Y+2, r24	; 0x02
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_displayCharacter+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2eb0:	69 89       	ldd	r22, Y+17	; 0x11
    2eb2:	7a 89       	ldd	r23, Y+18	; 0x12
    2eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	88 8b       	std	Y+16, r24	; 0x10
    2ec2:	88 89       	ldd	r24, Y+16	; 0x10
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	8a 95       	dec	r24
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <LCD_displayCharacter+0xb6e>
    2ecc:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    2ece:	cf 57       	subi	r28, 0x7F	; 127
    2ed0:	df 4f       	sbci	r29, 0xFF	; 255
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	08 95       	ret

00002ee6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	00 d0       	rcall	.+0      	; 0x2eec <LCD_displayString+0x6>
    2eec:	0f 92       	push	r0
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	9b 83       	std	Y+3, r25	; 0x03
    2ef4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    2ef6:	19 82       	std	Y+1, r1	; 0x01
    2ef8:	0e c0       	rjmp	.+28     	; 0x2f16 <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	28 2f       	mov	r18, r24
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	8a 81       	ldd	r24, Y+2	; 0x02
    2f02:	9b 81       	ldd	r25, Y+3	; 0x03
    2f04:	fc 01       	movw	r30, r24
    2f06:	e2 0f       	add	r30, r18
    2f08:	f3 1f       	adc	r31, r19
    2f0a:	80 81       	ld	r24, Z
    2f0c:	0e 94 ad 11 	call	0x235a	; 0x235a <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	8f 5f       	subi	r24, 0xFF	; 255
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f20:	fc 01       	movw	r30, r24
    2f22:	e2 0f       	add	r30, r18
    2f24:	f3 1f       	adc	r31, r19
    2f26:	80 81       	ld	r24, Z
    2f28:	88 23       	and	r24, r24
    2f2a:	39 f7       	brne	.-50     	; 0x2efa <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	62 97       	sbiw	r28, 0x12	; 18
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	9a 8b       	std	Y+18, r25	; 0x12
    2f4e:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    2f50:	89 89       	ldd	r24, Y+17	; 0x11
    2f52:	9a 89       	ldd	r25, Y+18	; 0x12
    2f54:	9e 01       	movw	r18, r28
    2f56:	2f 5f       	subi	r18, 0xFF	; 255
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	b9 01       	movw	r22, r18
    2f5c:	4a e0       	ldi	r20, 0x0A	; 10
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <itoa>

   LCD_displayString(arr);
    2f64:	ce 01       	movw	r24, r28
    2f66:	01 96       	adiw	r24, 0x01	; 1
    2f68:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_displayString>
}
    2f6c:	62 96       	adiw	r28, 0x12	; 18
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <LCD_moveCursor+0x6>
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <LCD_moveCursor+0x8>
    2f86:	0f 92       	push	r0
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	8a 83       	std	Y+2, r24	; 0x02
    2f8e:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	3d 83       	std	Y+5, r19	; 0x05
    2f98:	2c 83       	std	Y+4, r18	; 0x04
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9e:	81 30       	cpi	r24, 0x01	; 1
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	c1 f0       	breq	.+48     	; 0x2fd4 <LCD_moveCursor+0x56>
    2fa4:	2c 81       	ldd	r18, Y+4	; 0x04
    2fa6:	3d 81       	ldd	r19, Y+5	; 0x05
    2fa8:	22 30       	cpi	r18, 0x02	; 2
    2faa:	31 05       	cpc	r19, r1
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <LCD_moveCursor+0x3a>
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	61 f0       	breq	.+24     	; 0x2fce <LCD_moveCursor+0x50>
    2fb6:	19 c0       	rjmp	.+50     	; 0x2fea <LCD_moveCursor+0x6c>
    2fb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2fba:	3d 81       	ldd	r19, Y+5	; 0x05
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	69 f0       	breq	.+26     	; 0x2fdc <LCD_moveCursor+0x5e>
    2fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc6:	83 30       	cpi	r24, 0x03	; 3
    2fc8:	91 05       	cpc	r25, r1
    2fca:	61 f0       	breq	.+24     	; 0x2fe4 <LCD_moveCursor+0x66>
    2fcc:	0e c0       	rjmp	.+28     	; 0x2fea <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	89 83       	std	Y+1, r24	; 0x01
    2fd2:	0b c0       	rjmp	.+22     	; 0x2fea <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	80 5c       	subi	r24, 0xC0	; 192
    2fd8:	89 83       	std	Y+1, r24	; 0x01
    2fda:	07 c0       	rjmp	.+14     	; 0x2fea <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	80 5f       	subi	r24, 0xF0	; 240
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	80 5c       	subi	r24, 0xC0	; 192
    2fe8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	80 68       	ori	r24, 0x80	; 128
    2fee:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	cf 91       	pop	r28
    2ffe:	df 91       	pop	r29
    3000:	08 95       	ret

00003002 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	00 d0       	rcall	.+0      	; 0x3008 <LCD_displayStringRowColumn+0x6>
    3008:	00 d0       	rcall	.+0      	; 0x300a <LCD_displayStringRowColumn+0x8>
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	6a 83       	std	Y+2, r22	; 0x02
    3012:	5c 83       	std	Y+4, r21	; 0x04
    3014:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	6a 81       	ldd	r22, Y+2	; 0x02
    301a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	9c 81       	ldd	r25, Y+4	; 0x04
    3022:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_displayString>
}
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <LCD_sendCommand>
}
    3042:	cf 91       	pop	r28
    3044:	df 91       	pop	r29
    3046:	08 95       	ret

00003048 <__prologue_saves__>:
    3048:	2f 92       	push	r2
    304a:	3f 92       	push	r3
    304c:	4f 92       	push	r4
    304e:	5f 92       	push	r5
    3050:	6f 92       	push	r6
    3052:	7f 92       	push	r7
    3054:	8f 92       	push	r8
    3056:	9f 92       	push	r9
    3058:	af 92       	push	r10
    305a:	bf 92       	push	r11
    305c:	cf 92       	push	r12
    305e:	df 92       	push	r13
    3060:	ef 92       	push	r14
    3062:	ff 92       	push	r15
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	ca 1b       	sub	r28, r26
    3072:	db 0b       	sbc	r29, r27
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	09 94       	ijmp

00003080 <__epilogue_restores__>:
    3080:	2a 88       	ldd	r2, Y+18	; 0x12
    3082:	39 88       	ldd	r3, Y+17	; 0x11
    3084:	48 88       	ldd	r4, Y+16	; 0x10
    3086:	5f 84       	ldd	r5, Y+15	; 0x0f
    3088:	6e 84       	ldd	r6, Y+14	; 0x0e
    308a:	7d 84       	ldd	r7, Y+13	; 0x0d
    308c:	8c 84       	ldd	r8, Y+12	; 0x0c
    308e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3090:	aa 84       	ldd	r10, Y+10	; 0x0a
    3092:	b9 84       	ldd	r11, Y+9	; 0x09
    3094:	c8 84       	ldd	r12, Y+8	; 0x08
    3096:	df 80       	ldd	r13, Y+7	; 0x07
    3098:	ee 80       	ldd	r14, Y+6	; 0x06
    309a:	fd 80       	ldd	r15, Y+5	; 0x05
    309c:	0c 81       	ldd	r16, Y+4	; 0x04
    309e:	1b 81       	ldd	r17, Y+3	; 0x03
    30a0:	aa 81       	ldd	r26, Y+2	; 0x02
    30a2:	b9 81       	ldd	r27, Y+1	; 0x01
    30a4:	ce 0f       	add	r28, r30
    30a6:	d1 1d       	adc	r29, r1
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	ed 01       	movw	r28, r26
    30b4:	08 95       	ret

000030b6 <itoa>:
    30b6:	fb 01       	movw	r30, r22
    30b8:	9f 01       	movw	r18, r30
    30ba:	e8 94       	clt
    30bc:	42 30       	cpi	r20, 0x02	; 2
    30be:	c4 f0       	brlt	.+48     	; 0x30f0 <itoa+0x3a>
    30c0:	45 32       	cpi	r20, 0x25	; 37
    30c2:	b4 f4       	brge	.+44     	; 0x30f0 <itoa+0x3a>
    30c4:	4a 30       	cpi	r20, 0x0A	; 10
    30c6:	29 f4       	brne	.+10     	; 0x30d2 <itoa+0x1c>
    30c8:	97 fb       	bst	r25, 7
    30ca:	1e f4       	brtc	.+6      	; 0x30d2 <itoa+0x1c>
    30cc:	90 95       	com	r25
    30ce:	81 95       	neg	r24
    30d0:	9f 4f       	sbci	r25, 0xFF	; 255
    30d2:	64 2f       	mov	r22, r20
    30d4:	77 27       	eor	r23, r23
    30d6:	0e 94 8c 18 	call	0x3118	; 0x3118 <__udivmodhi4>
    30da:	80 5d       	subi	r24, 0xD0	; 208
    30dc:	8a 33       	cpi	r24, 0x3A	; 58
    30de:	0c f0       	brlt	.+2      	; 0x30e2 <itoa+0x2c>
    30e0:	89 5d       	subi	r24, 0xD9	; 217
    30e2:	81 93       	st	Z+, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	a1 f7       	brne	.-24     	; 0x30d2 <itoa+0x1c>
    30ea:	16 f4       	brtc	.+4      	; 0x30f0 <itoa+0x3a>
    30ec:	5d e2       	ldi	r21, 0x2D	; 45
    30ee:	51 93       	st	Z+, r21
    30f0:	10 82       	st	Z, r1
    30f2:	c9 01       	movw	r24, r18
    30f4:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <strrev>

000030f8 <strrev>:
    30f8:	dc 01       	movw	r26, r24
    30fa:	fc 01       	movw	r30, r24
    30fc:	67 2f       	mov	r22, r23
    30fe:	71 91       	ld	r23, Z+
    3100:	77 23       	and	r23, r23
    3102:	e1 f7       	brne	.-8      	; 0x30fc <strrev+0x4>
    3104:	32 97       	sbiw	r30, 0x02	; 2
    3106:	04 c0       	rjmp	.+8      	; 0x3110 <strrev+0x18>
    3108:	7c 91       	ld	r23, X
    310a:	6d 93       	st	X+, r22
    310c:	70 83       	st	Z, r23
    310e:	62 91       	ld	r22, -Z
    3110:	ae 17       	cp	r26, r30
    3112:	bf 07       	cpc	r27, r31
    3114:	c8 f3       	brcs	.-14     	; 0x3108 <strrev+0x10>
    3116:	08 95       	ret

00003118 <__udivmodhi4>:
    3118:	aa 1b       	sub	r26, r26
    311a:	bb 1b       	sub	r27, r27
    311c:	51 e1       	ldi	r21, 0x11	; 17
    311e:	07 c0       	rjmp	.+14     	; 0x312e <__udivmodhi4_ep>

00003120 <__udivmodhi4_loop>:
    3120:	aa 1f       	adc	r26, r26
    3122:	bb 1f       	adc	r27, r27
    3124:	a6 17       	cp	r26, r22
    3126:	b7 07       	cpc	r27, r23
    3128:	10 f0       	brcs	.+4      	; 0x312e <__udivmodhi4_ep>
    312a:	a6 1b       	sub	r26, r22
    312c:	b7 0b       	sbc	r27, r23

0000312e <__udivmodhi4_ep>:
    312e:	88 1f       	adc	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	5a 95       	dec	r21
    3134:	a9 f7       	brne	.-22     	; 0x3120 <__udivmodhi4_loop>
    3136:	80 95       	com	r24
    3138:	90 95       	com	r25
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	08 95       	ret

00003140 <_exit>:
    3140:	f8 94       	cli

00003142 <__stop_program>:
    3142:	ff cf       	rjmp	.-2      	; 0x3142 <__stop_program>
